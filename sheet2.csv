Name,Chain,github_link,project_name,is_deployed_on_bsc,reason,evidence
Ultiverse,bnb-chain,https://github.com/ultiverse-io/,https://github.com/ultiverse-io/ultiverse-auth-demo-web.git,TRUE,"The project contains explicit references to Binance Smart Chain (BSC) and includes configurations that suggest deployment on the BSC network. The presence of chain IDs associated with BSC (56 for mainnet and 97 for testnet) further supports this. Additionally, the project utilizes libraries and components that are compatible with BSC, indicating that it is designed to operate on this blockchain.","{'bnb_references': ['chain_id: 56 in libs/auth/utils/particle.ts', 'chain_id: 97 in libs/auth/utils/particle.ts', 'BSC mentioned in the context of wallet support in libs/auth/utils/particle.ts'], 'contract_structure': 'The project includes a JSON ABI file (config/abi.json) which suggests the presence of a smart contract. However, there are no Solidity files or deployment scripts present in the repository, which are typically required for a complete contract structure.', 'deployment_evidence': 'The project references a testnet API endpoint (https://openapi-testnet.ultiverse.io) which indicates that it is set up for deployment on a testnet that is likely associated with BSC. The use of chain IDs 56 and 97 indicates configurations for both mainnet and testnet deployments.', 'verification': 'There are no explicit verification files or addresses provided in the repository. However, the presence of an ABI file suggests that the contract may be verified on a blockchain explorer once deployed.', 'contract_addresses': ['0x01473449eccc0D33c49fDcBDee8f1FE8fd2B8F18 (test contract address mentioned in components/page.tsx)'], 'token_names': []}"
Orbofi,bnb-chain,https://github.com/Orbofi,https://github.com/Orbofi/Orbofi-Swap.git,TRUE,"The project appears to be deployed on the Binance Smart Chain (BSC) due to the use of Uniswap V2-like contracts, which are commonly adapted for BSC. The presence of the OrboSwap DEX and references to liquidity pools and token swaps strongly suggest a BSC deployment. Additionally, the use of Solidity version 0.6.12 is compatible with BSC.","{'bnb_references': [], 'contract_structure': 'The repository contains a well-structured set of Solidity smart contracts, including DEX contracts, token contracts, and utility libraries. The presence of a Hardhat configuration file indicates that the project is set up for deployment and testing in a JavaScript environment, which is typical for Ethereum-compatible chains like BSC.', 'deployment_evidence': 'While there are no explicit deployment scripts targeting BSC or specific network configurations in the provided files, the use of Uniswap V2-like contracts and the OrboSwap DEX strongly imply that the project is intended for deployment on BSC. The absence of Ethereum-specific references further supports this.', 'verification': 'There are no verification files or addresses provided in the repository. However, the project structure suggests that it could be verified on BSCScan if deployed.', 'contract_addresses': [], 'token_names': ['OrboToken', 'OSLP']}"
Orbofi,bnb-chain,https://github.com/Orbofi,https://github.com/Orbofi/Orbofi-NFT-minting-contract-BNFT-DEX.git,TRUE,"The project is configured for deployment on the Binance Smart Chain (BSC) with specific network settings and contract structures that align with BSC standards. The presence of BNB references, deployment configurations, and contract structures indicates readiness for BSC deployment.","{'bnb_references': ['withdrawBNB function in contracts indicates BNB usage', 'MINT_PRICE is set in ether, which is compatible with BNB'], 'contract_structure': 'The repository contains valid Solidity smart contracts for NFTs and ERC20 tokens, along with deployment scripts and testing files, indicating a well-structured project.', 'deployment_evidence': ""The 'brownie-config.yaml' file includes configurations for 'bsc-main' and 'bsc-test' networks with specific launchpad addresses, indicating deployment readiness on BSC."", 'verification': ""The configuration file specifies 'verify: True' for both 'bsc-test' and 'bsc-main', indicating intent to verify contracts on BSC."", 'contract_addresses': ['0xd73b53cBe6A5FE32Ae4aE475d4EA9307bD7aAAfA (Launchpad address)', '0x64eF5f4145A77EA9091DA00eb5f5B865eB27B5D2 (BSC Test launchpad)', '0x190449C9586a73dA40A839e875Ff55c853dBc2f8 (BSC Main launchpad)'], 'token_names': ['TestBUSD (ERC20 token)', 'Test NFT (NFT contract)']}"
HODL,bnb-chain,https://github.com/HODL-org,https://github.com/HODL-org/contract.git,TRUE,"The project is deployed on the Binance Smart Chain (BSC) as evidenced by the use of PancakeSwap, which is a decentralized exchange (DEX) on BSC, and the presence of BNB-related functionalities in the smart contracts.","{'bnb_references': ['PancakeSwap router address (0x10ED43C718714eb63d5aA57B78B54704E256024E) is a known BSC address.', 'The contract includes mechanisms for BNB rewards and interactions with BNB, indicating it operates on the BSC.'], 'contract_structure': 'The repository contains multiple Solidity files that define the smart contract structure, including ownership management, tokenomics, and reward distribution mechanisms. It follows a modular architecture with upgradeable contracts.', 'deployment_evidence': 'The presence of the PancakeSwap router and liquidity pair addresses indicates that the contract is intended for deployment on the BSC mainnet.', 'verification': 'There are no explicit verification files or addresses mentioned in the provided files, but the structure suggests that the contracts are designed for deployment and potential verification on BSC.', 'contract_addresses': ['PancakeSwap router address: 0x10ED43C718714eb63d5aA57B78B54704E256024E', 'Pancake pair address: 0xC5c4F99423DfD4D2b73D863aEe50750468e45C19'], 'token_names': ['HODL']}"
Aegis,bnb-chain,https://github.com/Aegis-im,https://github.com/Aegis-im/aegis-contracts.git,TRUE,"The project is explicitly configured for deployment on the Binance Smart Chain (BSC) with references to the BSC mainnet and specific contract addresses associated with BSC. The configuration files and deployment scripts indicate that the project is set up to interact with the BSC network, including the use of BSC-specific RPC URLs and contract addresses.","{'bnb_references': ['bnbMainnet', 'chainId: 56', 'https://bscscan.com', '0xAB3dBcD9B096C3fF76275038bf58eAC10D22C61f', '0xB9f1E8417ABaedF6Fd838212267cA8260c4ca9da', '0x93eFAA2d2f6c3600d794233ed7E751d086E5B75E', '0x588FD039cAdc77ec85d25a072582624CA8d8cF15', '0x4274cD7277C7bb0806Bd5FE84b9aDAE466a8DA0a'], 'contract_structure': 'The repository contains multiple Solidity smart contracts, deployment scripts, and configuration files structured for a Hardhat environment. Contracts include YUSD, AegisMinting, AegisConfig, and others, indicating a well-organized project.', 'deployment_evidence': ""The networks.json file contains a section for 'bnbMainnet' with specific contract addresses and RPC URLs for deployment on the BSC mainnet. The presence of deployment scripts targeting BSC further supports this."", 'verification': 'The verification guide in the repository indicates steps for verifying contracts on BSCScan, suggesting that the contracts are intended to be deployed and verified on the BSC network.', 'contract_addresses': ['0xAB3dBcD9B096C3fF76275038bf58eAC10D22C61f', '0xB9f1E8417ABaedF6Fd838212267cA8260c4ca9da', '0x93eFAA2d2f6c3600d794233ed7E751d086E5B75E', '0x588FD039cAdc77ec85d25a072582624CA8d8cF15', '0x4274cD7277C7bb0806Bd5FE84b9aDAE466a8DA0a'], 'token_names': ['YUSD', 'sYUSD']}"
ChainGPT,bnb-chain,https://github.com/ChainGPT-org/,https://github.com/ChainGPT-org/CGPT_Token.git,TRUE,"The project is explicitly stated to be deployed on the Binance Smart Chain (BSC) in the documentation. The contract follows the ERC20/BEP20 standard, which is compatible with BSC. Additionally, the contract structure is valid, and there are references to BSC in the README file.","{'bnb_references': ['Binance Smart Chain', 'BEP20 standard', 'Network: Binance Smart Chain (BEP20)'], 'contract_structure': 'The contract is structured correctly with Solidity files, imports from OpenZeppelin, and follows the ERC20 standard. It includes a constructor for minting tokens and implements ownership functionalities.', 'deployment_evidence': 'The README file mentions that the contract can be used for any type of transactions on the BSC blockchain, indicating deployment on BSC.', 'verification': 'The README includes a link to a security audit report from Certik, which suggests that the contract has undergone verification processes.', 'contract_addresses': [], 'token_names': ['ChainGPT', 'CGPT']}"
ChainGPT,bnb-chain,https://github.com/ChainGPT-org/,https://github.com/ChainGPT-org/lhd-config.git,TRUE,"The project is explicitly configured for deployment on the Binance Smart Chain (BSC), as evidenced by the presence of chainId 56 in multiple contract address entries. Additionally, the project is associated with ApeSwap, which operates on the BSC ecosystem, further supporting the deployment claim.","{'bnb_references': [""chainId: '56' in multiple token addresses"", 'References to ApeSwap, which is a BSC-based platform'], 'contract_structure': 'The repository contains TypeScript files that define the structure of token assets, including their addresses and metadata. While there are no Solidity files present, the structure is designed to manage token configurations for BSC.', 'deployment_evidence': ""The presence of token addresses with chainId '56' indicates that the contracts are intended for deployment on the BSC mainnet. The configuration files also suggest that the project is set up to interact with BSC."", 'verification': 'The repository includes a section for known owners and verified assets, indicating a level of verification for the tokens listed. However, there are no explicit verification files or documentation provided.', 'contract_addresses': ['0x603c7f932ed1fc6575303d8fb018fdcbb0f39a95', '0x9840652DC04fb9db2C43853633f0F62BE6f00f98', '0x25931894a86D47441213199621F1F2994e1c39Aa'], 'token_names': ['ApeSwap BANANA', 'ChainGPT']}"
ChainGPT,bnb-chain,https://github.com/ChainGPT-org/,https://github.com/ChainGPT-org/WBAI_Token.git,TRUE,"The project is explicitly stated to be deployed on the Binance Smart Chain (BSC) as indicated in the `readme.md` file. The token is defined as a BEP20 token, which is the standard for tokens on the BSC. Additionally, the contract structure adheres to the ERC20 standard, which is compatible with BSC.","{'bnb_references': ['Network: Binance Smart Chain (BEP20)'], 'contract_structure': 'The project contains a valid Solidity smart contract structure with necessary imports from OpenZeppelin for ERC20 functionality, ownership management, and burnable tokens. The main contract `WhiteBridge` is defined correctly with a constructor that mints tokens.', 'deployment_evidence': 'The `readme.md` file mentions the contract address for the deployed token, indicating that it has been deployed on the Binance Smart Chain.', 'verification': 'There are no explicit verification files mentioned in the provided documents, but the presence of a contract address suggests that it may be verified on a block explorer for BSC.', 'contract_addresses': ['0x635d44F246156ed1080CB470877256c847673f19'], 'token_names': ['WhiteBridge', 'WBAI']}"
Mind Network,bnb-chain,https://github.com/mind-network,https://github.com/mind-network/mind-datapack-typescript.git,TRUE,"The project demonstrates clear integration with the BNB Chain (formerly Binance Smart Chain) through various references and SDKs specifically designed for BNB Chain interactions. The presence of the '@bnb-chain/greenfield-chain-sdk' and related functionalities indicates that the project is built to operate on the BNB Chain ecosystem. Additionally, the use of MetaMask for wallet interactions and the connection to the Greenfield Testnet further solidify its deployment on BSC.","{'bnb_references': ['@bnb-chain/greenfield-chain-sdk', '@bnb-chain/greenfiled-file-handle', 'GREEN_CHAIN_ID = 5600', ""GREENFIELD_RPC_URL = 'https://gnfd-testnet-fullnode-tendermint-us.bnbchain.org'""], 'contract_structure': 'The repository does not contain Solidity files or traditional smart contract structures, but it does include TypeScript files that interact with BNB Chain SDKs, indicating that it is designed to work with smart contracts on the BNB Chain.', 'deployment_evidence': ""The presence of the Greenfield SDK and the connection to the Greenfield Testnet suggests that the project is set up for deployment on the BNB Chain. The code includes functions for connecting to MetaMask and interacting with the BNB Chain's infrastructure."", 'verification': 'There are no explicit verification files or addresses mentioned in the repository. However, the integration with the Greenfield SDK implies that the project may have mechanisms for verifying transactions on the BNB Chain.', 'contract_addresses': [], 'token_names': []}"
Mind Network,bnb-chain,https://github.com/mind-network,https://github.com/mind-network/mind-agent-mcp-server.git,TRUE,"The project is designed to interact with the Binance Smart Chain (BSC) and includes references to BSC-specific configurations, such as chain IDs and RPC URLs. The presence of specific functions and tools for interacting with the BSC ecosystem, including wallet connections and contract interactions, further supports this.","{'bnb_references': ['Valid chains: Mind Network Mainnet(228), BNB Smart Chain(56), Mind Network Testnet(192940)', 'The `mindnet` configuration includes chain ID 228, which is associated with the Mind Network Mainnet, and chain ID 56 is explicitly mentioned as BNB Smart Chain.'], 'contract_structure': 'The project includes smart contract ABIs and addresses for interacting with the Ethereum-compatible chains, including BSC. The structure is consistent with a typical deployment setup for Ethereum-based projects, utilizing tools like `wagmi` and `fastmcp` for managing blockchain interactions.', 'deployment_evidence': 'The `AGENT_ADDRESS` and `FHE_TOKEN_ADDRESS` mappings include addresses for both the Mind Network and BSC, indicating that the project is set up for deployment on these networks. The presence of functions that interact with these addresses suggests readiness for deployment.', 'verification': 'There are no explicit verification files mentioned in the provided code, but the presence of contract ABIs and structured interactions implies that verification would typically follow deployment.', 'contract_addresses': ['0x33581174971727Cf00cf4c89afb9A0aacF5BE006 (FHE Token on Mind Network Testnet)', '0x0f90dc4471C2A329d17726aA0D2E76320c2C0EFE (FHE Token on Mind Network Mainnet)', '0x786036BB4af57320EC9830c398416ef5194296a7 (FHE Token on BNB Smart Chain)', '0xdeD96288c99145da4800f55355A2466f6238fBBE (Agent on Mind Network Mainnet)'], 'token_names': ['mind native token', 'FHE']}"
Mind Network,bnb-chain,https://github.com/mind-network,https://github.com/mind-network/mind-sap-sdk.git,TRUE,The project has clear references to the Binance Smart Chain (BSC) and includes specific configurations for BSC deployment. The presence of contract addresses and deployment configurations targeting BSC indicates that the project is indeed deployed on the BNB Chain.,"{'bnb_references': ['Chain ID 56 is explicitly mentioned in the deployment configurations.', 'The contract addresses for BSC are included in the deployment JSON files.'], 'contract_structure': 'The repository contains a well-defined structure for smart contracts, including ABI definitions, deployment scripts, and utility functions for interacting with the contracts. The contracts are structured to support various functionalities such as sending tokens and managing stealth addresses.', 'deployment_evidence': ""The deployment JSON files contain specific addresses for BSC, indicating that the contracts are intended to be deployed on the Binance Smart Chain. For example, the 'BlackList' contract has a deployment address on BSC."", 'verification': 'The repository does not explicitly mention verification files or processes, but the presence of deployment addresses suggests that verification could be performed on BSC block explorers.', 'contract_addresses': ['0x2e983700686988Ae92f4a404a59F9e04ea92B46E (BlackList contract on BSC)', '0xb40078C3871dCf6757e92F5369019Fa20bF2bC15 (SAClientERC20 contract on BSC)', '0xCC91FdB993410444E88207A1b9D0ef08dA9fF82C (SAPBridge contract on BSC)'], 'token_names': ['CCIP-BnM', 'USDC']}"
Mind Network,bnb-chain,https://github.com/mind-network,https://github.com/mind-network/mind-datapack-typescript.git,TRUE,"The project demonstrates clear integration with the BNB Chain (formerly Binance Smart Chain) through various references and SDKs specifically designed for BNB Chain interactions. The presence of the '@bnb-chain/greenfield-chain-sdk' and related functionalities indicates that the project is built to operate on the BNB Chain ecosystem. Additionally, the use of MetaMask for wallet interactions and the connection to the Greenfield Testnet further solidify its deployment on BSC.","{'bnb_references': ['@bnb-chain/greenfield-chain-sdk', '@bnb-chain/greenfiled-file-handle', 'GREEN_CHAIN_ID = 5600', ""GREENFIELD_RPC_URL = 'https://gnfd-testnet-fullnode-tendermint-us.bnbchain.org'""], 'contract_structure': 'The repository does not contain Solidity files or traditional smart contract structures, but it does include TypeScript files that interact with BNB Chain SDKs, indicating that it is designed to work with smart contracts on the BNB Chain.', 'deployment_evidence': ""The presence of the Greenfield SDK and the connection to the Greenfield Testnet suggests that the project is set up for deployment on the BNB Chain. The code includes functions for connecting to MetaMask and interacting with the BNB Chain's infrastructure."", 'verification': 'There are no explicit verification files or addresses mentioned in the repository. However, the integration with the Greenfield SDK implies that the project may have mechanisms for verifying transactions on the BNB Chain.', 'contract_addresses': [], 'token_names': []}"
Mind Network,bnb-chain,https://github.com/mind-network,https://github.com/mind-network/mind-agent-mcp-server.git,TRUE,"The project is designed to interact with the Binance Smart Chain (BSC) and includes references to BSC-specific configurations, such as chain IDs and RPC URLs. The presence of specific functions and tools for interacting with the BSC ecosystem, including wallet connections and contract interactions, further supports this.","{'bnb_references': ['Valid chains: Mind Network Mainnet(228), BNB Smart Chain(56), Mind Network Testnet(192940)', 'The `mindnet` configuration includes chain ID 228, which is associated with the Mind Network Mainnet, and chain ID 56 is explicitly mentioned as BNB Smart Chain.'], 'contract_structure': 'The project includes smart contract ABIs and addresses for interacting with the Ethereum-compatible chains, including BSC. The structure is consistent with a typical deployment setup for Ethereum-based projects, utilizing tools like `wagmi` and `fastmcp` for managing blockchain interactions.', 'deployment_evidence': 'The `AGENT_ADDRESS` and `FHE_TOKEN_ADDRESS` mappings include addresses for both the Mind Network and BSC, indicating that the project is set up for deployment on these networks. The presence of functions that interact with these addresses suggests readiness for deployment.', 'verification': 'There are no explicit verification files mentioned in the provided code, but the presence of contract ABIs and structured interactions implies that verification would typically follow deployment.', 'contract_addresses': ['0x33581174971727Cf00cf4c89afb9A0aacF5BE006 (FHE Token on Mind Network Testnet)', '0x0f90dc4471C2A329d17726aA0D2E76320c2C0EFE (FHE Token on Mind Network Mainnet)', '0x786036BB4af57320EC9830c398416ef5194296a7 (FHE Token on BNB Smart Chain)', '0xdeD96288c99145da4800f55355A2466f6238fBBE (Agent on Mind Network Mainnet)'], 'token_names': ['mind native token', 'FHE']}"
Mind Network,bnb-chain,https://github.com/mind-network,https://github.com/mind-network/mind-sap-sdk.git,TRUE,The project has clear references to the Binance Smart Chain (BSC) and includes specific configurations for BSC deployment. The presence of contract addresses and deployment configurations targeting BSC indicates that the project is indeed deployed on the BNB Chain.,"{'bnb_references': ['Chain ID 56 is explicitly mentioned in the deployment configurations.', 'The contract addresses for BSC are included in the deployment JSON files.'], 'contract_structure': 'The repository contains a well-defined structure for smart contracts, including ABI definitions, deployment scripts, and utility functions for interacting with the contracts. The contracts are structured to support various functionalities such as sending tokens and managing stealth addresses.', 'deployment_evidence': ""The deployment JSON files contain specific addresses for BSC, indicating that the contracts are intended to be deployed on the Binance Smart Chain. For example, the 'BlackList' contract has a deployment address on BSC."", 'verification': 'The repository does not explicitly mention verification files or processes, but the presence of deployment addresses suggests that verification could be performed on BSC block explorers.', 'contract_addresses': ['0x2e983700686988Ae92f4a404a59F9e04ea92B46E (BlackList contract on BSC)', '0xb40078C3871dCf6757e92F5369019Fa20bF2bC15 (SAClientERC20 contract on BSC)', '0xCC91FdB993410444E88207A1b9D0ef08dA9fF82C (SAPBridge contract on BSC)'], 'token_names': ['CCIP-BnM', 'USDC']}"
ApeBond,bnb-chain,https://github.com/ApeSwapFinance,https://github.com/ApeSwapFinance/apeswap-contracts.git,TRUE,"The repository contains multiple references and configurations that indicate deployment on the Binance Smart Chain (BSC). The presence of specific contract structures, deployment scripts, and references to BSC-related functionalities strongly suggest that this project is intended for deployment on the BSC network.","{'bnb_references': ['The README.md mentions ApeSwap, which is known to operate on the Binance Smart Chain.', 'The `hardhat.config.ts` file does not explicitly mention BSC, but the use of Hardhat indicates compatibility with various networks, including BSC.', 'The `package.json` file includes dependencies that are commonly used in BSC projects, such as OpenZeppelin contracts.'], 'contract_structure': 'The repository contains a well-defined structure for Solidity smart contracts, including multiple contracts in the `contracts` directory, deployment scripts, and testing files. The contracts utilize OpenZeppelin libraries, which are standard for secure contract development.', 'deployment_evidence': 'The presence of deployment scripts and configurations in the `hardhat.config.ts` file suggests that the contracts can be deployed to BSC. However, there are no explicit deployment addresses or scripts targeting BSC directly found in the provided files.', 'verification': 'There are no specific verification files or addresses mentioned in the repository. However, the use of Hardhat and the presence of testing files imply that the contracts are intended to be verified post-deployment.', 'contract_addresses': [], 'token_names': ['ApeSwap', 'BANANA']}"
Catboy,bnb-chain,https://github.com/TEAMCatboy,https://github.com/TEAMCatboy/assets.git,TRUE,The project appears to be deployed on the Binance Smart Chain (BSC) based on multiple references and configurations related to BSC within the codebase. The presence of BSC-related terms and the structure of the repository suggest that it is designed to support assets on the BSC network.,"{'bnb_references': ['PancakeSwap/Smartchain', 'Binance', 'BSC', 'Binance Smart Chain'], 'contract_structure': 'The repository contains a structured setup for managing assets, including validation and processing scripts, which are typical for smart contract projects. However, there are no Solidity files present, indicating that this repository may focus on asset management rather than direct contract deployment.', 'deployment_evidence': ""The README mentions trading pairs can be updated from PancakeSwap/Smartchain, indicating that the project interacts with BSC's decentralized exchanges. Additionally, the configuration files reference Binance, suggesting that the project is set up to operate on the BSC network."", 'verification': 'There are no explicit verification files or addresses provided in the repository, but the structure implies that assets can be validated and managed, which is a common practice in BSC deployments.', 'contract_addresses': ['0x4f3C8E20942461e2c3Bdd8311AC57B0c222f2b82', '0x8EF1A1E0671Aa44852f4d87105eF482470bB3e69', '0xBEB0131D95AC3F03fd15894D0aDE5DBf7451d171'], 'token_names': ['TT-BNB', 'TT-USDT', 'TT-BUSD']}"
AICell,bnb-chain,https://github.com/AIcell-labs,https://github.com/AICell-labs/AICell.git,TRUE,"The project is explicitly designed for deployment on the Binance Smart Chain (BSC), with multiple references to BNB, BSC, and the BNB Greenfield. The smart contracts are structured correctly for deployment, and there are deployment scripts targeting BSC. Additionally, there are specific contract addresses and token names mentioned that are associated with BSC.","{'bnb_references': ['BNB Greenfield integration mentioned in README.md', 'References to BSC Smart Chain in the main README.md', 'Usage of BNB in the AICell-Server package.json and other files', 'Deployment scripts targeting BSC Testnet and Mainnet in hardhat.config.ts'], 'contract_structure': 'The repository contains valid Solidity smart contracts, deployment scripts, and configuration files necessary for deployment on BSC. The contracts follow standard ERC721 and ERC20 structures.', 'deployment_evidence': 'The deployment scripts in the AICell-Protocol folder include configurations for BSC Testnet and Mainnet, with specific addresses for deployed contracts. The hardhat.config.ts file includes network configurations for BSC.', 'verification': 'The project includes verification scripts and configurations for verifying contracts on BSCscan, indicating an intention to verify deployed contracts.', 'contract_addresses': ['0x126d972695B13574029082CE1586c7C5596C3A4C (Registry)', '0x6eADA8d543Ae8aF4cD146952a1ccB2FAe697EC5F (Factory)'], 'token_names': ['AICell', 'TestERC20', 'TestERC721']}"
Token Bulk Sender,bnb-chain,https://github.com/dawar2151/x-wallet-bulksender-smart-contracts,https://github.com/dawar2151/x-wallet-bulksender-smart-contracts,TRUE,"The project is explicitly configured for deployment on the Binance Smart Chain (BSC) with references to the BNB network, including the use of the official BSC RPC URL and the chain ID for BSC mainnet. The deployment scripts and configurations indicate that the contracts can be deployed on BSC, and there are specific references to BNB fees and functionalities.","{'bnb_references': [""Network deployment commands include 'bnb' as a target network."", ""The hardhat configuration file specifies the BSC RPC URL: 'https://bsc-dataseed.binance.org/' and chainId: 56."", 'The deployment scripts reference the BNB fee structure.'], 'contract_structure': 'The repository contains a well-structured set of Solidity smart contracts, including ERC20, ERC721, and ERC1155 implementations, along with a BulkSender contract and a TokenCreator contract. The contracts are organized in a way that follows best practices for Solidity development, including the use of OpenZeppelin libraries for security and functionality.', 'deployment_evidence': 'The hardhat configuration file includes a network configuration for BSC, and the deployment scripts are set up to deploy contracts to the BSC network. The presence of a .openzeppelin directory with deployment artifacts for BSC further supports this.', 'verification': 'There are no explicit verification files mentioned in the provided data, but the presence of a verification command in the deployment scripts suggests that verification is intended. The README mentions verifying contracts, which is a common practice.', 'contract_addresses': ['0x99A8F12a92f314d2B80Ac34120ae552D4442b8d0 (from .openzeppelin/bsc.json)', '0xb5c9554B8481F52Bb618E1930d4e39d24d561F37 (from .openzeppelin/bsc.json)'], 'token_names': ['ERC20Token', 'ERC721Token', 'ERC1155Token']}"
zkMe,bnb-chain,https://github.com/zkMeLabs,https://github.com/zkMeLabs/zkme-contracts.git,TRUE,"The project contains explicit references to BSC testnet configurations, deployment scripts targeting BSC, and a structured contract setup suitable for deployment on the Binance Smart Chain. The presence of a specific network configuration for the BSC testnet indicates that the project is designed to operate on the BSC ecosystem.","{'bnb_references': ['tbnb: { url: process.env.BSC_TESTNET_RPC, accounts: [process.env.DEPLOY_SECRET!] }'], 'contract_structure': 'The repository contains multiple Solidity files defining smart contracts, deployment scripts using Hardhat, and a structured project layout with package.json and TypeScript configuration files.', 'deployment_evidence': 'The hardhat.config.ts file includes a network configuration for the BSC testnet (tbnb) with a specified RPC URL, indicating that the project is set up for deployment on BSC.', 'verification': 'There are scripts for verifying contracts on various networks, including Goerli and BSC, although specific verification addresses are not provided in the analyzed files.', 'contract_addresses': [], 'token_names': ['zkMe Identity Soulbound Token', 'ZIS']}"
zkMe,bnb-chain,https://github.com/zkMeLabs,https://github.com/zkMeLabs/storage-sdk-js.git,TRUE,"The project appears to be designed for deployment on the Binance Smart Chain (BSC) due to references to BSC-related functionalities and specific contract addresses that align with BSC standards. The presence of the ethers.js library suggests interaction with Ethereum-compatible blockchains, including BSC.","{'bnb_references': ['bscMirrorBucketRelayerFee', 'bscMirrorBucketAckRelayerFee', 'bscMirrorObjectRelayerFee', 'bscMirrorObjectAckRelayerFee', 'bscMirrorGroupRelayerFee', 'bscMirrorGroupAckRelayerFee'], 'contract_structure': 'The project includes TypeScript files that define smart contract interactions using ethers.js, with ABI definitions for various contracts. However, there are no Solidity files or explicit deployment scripts provided in the repository.', 'deployment_evidence': 'The presence of constants such as STORAGE_ADDRESS, VIRTUAL_GROUP_ADDRESS, and SP_ADDRESS suggests that these are intended for deployment on a blockchain, likely BSC, given the context of the project. The constructor of the Storage class accepts a chainId, which can be indicative of targeting BSC.', 'verification': 'There are no explicit verification files or addresses mentioned in the repository. The README does not provide any details on contract verification.', 'contract_addresses': ['0x0000000000000000000000000000000000002001', '0x0000000000000000000000000000000000002000', '0x0000000000000000000000000000000000002002'], 'token_names': []}"
Cakepie,bnb-chain,https://github.com/magpiexyz/cakepie,https://github.com/magpiexyz/cakepie,TRUE,"The codebase contains multiple references to the Binance Smart Chain (BSC) and its associated components, indicating that the project is designed for deployment on the BSC network. The presence of PancakeSwap integrations, which is a prominent DEX on BSC, further supports this conclusion. Additionally, the use of specific libraries and interfaces that are tailored for BSC operations reinforces the likelihood of deployment on this chain.","{'bnb_references': ['PancakeSwap', 'PancakeStaking', 'PancakeV3', 'PancakeVoteManager', 'PancakeIFOHelper', 'PancakeAMLWrapper', 'PancakeStableSwap', 'PancakeV2LPHelper', 'PancakeStakingBaseUpg', 'PancakeStakingSideChain'], 'contract_structure': 'The repository contains a well-structured set of Solidity files organized into directories for libraries, core contracts, and interfaces. Each contract follows Solidity best practices, including the use of OpenZeppelin libraries for security and functionality. The presence of upgradeable contracts indicates a focus on maintaining and evolving the codebase.', 'deployment_evidence': ""While there are no explicit deployment scripts provided in the repository, the presence of contracts that interact with PancakeSwap and other BSC-specific components suggests that the project is intended for deployment on the BSC mainnet. The use of Chainlink's CCIP for cross-chain functionality also indicates a focus on BSC."", 'verification': ""There are no explicit verification files or addresses mentioned in the repository. However, the use of standard ERC20 and other interfaces suggests that the contracts can be verified on BSC's block explorers once deployed."", 'contract_addresses': ['0x... (example address for CAKE)', '0x... (example address for mCake)'], 'token_names': ['CAKE', 'mCake', 'CKP']}"
ApeX Protocol,bnb-chain,https://github.com/ApeX-Protocol,https://github.com/ApeX-Protocol/core.git,TRUE,"The project is structured to support deployment on the Binance Smart Chain (BSC) as evidenced by specific configurations in the Hardhat configuration file, which includes network settings for BSC mainnet and testnet. Additionally, the presence of contracts and deployment scripts indicates readiness for deployment on BSC.","{'bnb_references': ['bscMainnet', 'bscTestnet', 'BSC_MAINNET_PRC', 'BSC_TESTNET_PRC'], 'contract_structure': 'The repository contains a well-defined structure with Solidity contract files, deployment scripts, test files, and configuration files necessary for deploying and testing smart contracts.', 'deployment_evidence': 'The hardhat.config.js file includes network configurations for both BSC mainnet and testnet, indicating that the project is set up for deployment on the Binance Smart Chain.', 'verification': 'There are no explicit verification files or addresses mentioned in the provided files, but the presence of the etherscan plugin in the Hardhat configuration suggests that verification is intended.', 'contract_addresses': [], 'token_names': ['ApeX Token', 'Base Token', 'Quote Token', 'AAA Token', 'USDC', 'WBTC']}"
ApeX Protocol,bnb-chain,https://github.com/ApeX-Protocol,https://github.com/ApeX-Protocol/multicall-go.git,TRUE,"The project contains explicit references to the Binance Smart Chain (BSC) in the `const.go` file, which defines RPC endpoints and multicall addresses for both BSC mainnet and testnet. Additionally, the project structure includes smart contract bindings and functions that are compatible with Ethereum-based chains, including BSC.","{'bnb_references': [""BscMainnetRpc = 'https://bsc-dataseed.binance.org/'"", ""BscTestnetRpc = 'https://data-seed-prebsc-1-s1.binance.org:8545/'"", ""BscMainnetMultiCallAddress = '0x41263cba59eb80dc200f3e2544eda4ed6a90e76c'"", ""BscTestnetMultiCallAddress = '0xae11C5B5f29A6a25e955F0CB8ddCc416f522AF5C'""], 'contract_structure': 'The repository contains Go bindings for Ethereum smart contracts, including ERC20 and multicall contracts. The structure is consistent with a project designed to interact with Ethereum-compatible blockchains, including BSC.', 'deployment_evidence': 'The `const.go` file provides specific RPC endpoints and multicall addresses for BSC, indicating that the project is set up for deployment on the Binance Smart Chain.', 'verification': 'There are no explicit verification files or documentation provided in the repository that confirm contract verification on BSC.', 'contract_addresses': ['0x41263cba59eb80dc200f3e2544eda4ed6a90e76c', '0xae11C5B5f29A6a25e955F0CB8ddCc416f522AF5C'], 'token_names': []}"
ApeX Protocol,bnb-chain,https://github.com/ApeX-Protocol,https://github.com/ApeX-Protocol/assets.git,TRUE,"The project is associated with Trust Wallet, which supports various tokens across multiple blockchains, including Binance Smart Chain (BSC). The presence of references to BSC in the README and the configuration files indicates that the project is designed to accommodate assets on the BSC network. Additionally, the repository includes scripts for adding tokens to token lists that explicitly mention PancakeSwap, a popular decentralized exchange on BSC.","{'bnb_references': ['PancakeSwap/Smartchain mentioned in the README', 'Binance in the internal/config/values.go file under StackingChains'], 'contract_structure': 'The repository does not contain Solidity files or direct smart contract deployment scripts. However, it includes Go files that manage assets and validate token information, which suggests a backend service that interacts with smart contracts on various blockchains, including BSC.', 'deployment_evidence': 'The README mentions that tokens can be added for various blockchains, including BSC. The configuration files also reference Binance and its associated services, indicating that the project is set up to handle BSC assets.', 'verification': 'There are no explicit verification files or addresses provided in the repository. However, the project includes validation scripts that check the integrity of asset files, which could imply a verification process for tokens.', 'contract_addresses': [], 'token_names': []}"
Meow Motion,bnb-chain,https://github.com/MeowMotion/meow_contract,https://github.com/MeowMotion/meow_contract,TRUE,"The project appears to be designed for deployment on the Binance Smart Chain (BSC) due to the use of BNB as the currency for NFT purchases and the absence of any references to other chains. The contract structure is valid for BSC deployment, and the use of Solidity version ^0.8.0 is compatible with BSC. Additionally, the contract includes mechanisms for handling BNB transactions, which is indicative of BSC deployment.","{'bnb_references': ['The contract specifies that the price for NFTs is set in ether (1 ether = 1 BNB), indicating that it is designed to operate with BNB.', 'The require statement in the buyGenesisNFT and buyCommunityNFT functions checks for the correct BNB amount sent.'], 'contract_structure': 'The repository contains Solidity files that define smart contracts, including NftPool and NonTransferableNFT, which follow the ERC721 standard for NFTs. The contracts are structured correctly with appropriate modifiers, events, and functions.', 'deployment_evidence': ""While there are no explicit deployment scripts or addresses provided in the files, the contract's functionality and pricing in BNB suggest it is intended for deployment on BSC."", 'verification': 'There are no specific verification files or addresses mentioned in the provided code, but the contracts can be verified on BSCScan once deployed.', 'contract_addresses': [], 'token_names': ['Gold Meow', 'Silver Meow']}"
Decentra Guys,bnb-chain,https://github.com/decentra-guys/tokken-contract,https://github.com/decentra-guys/tokken-contract,TRUE,"The analysis of the provided repository files indicates that the project is indeed deployed on the Binance Smart Chain (BSC). The contract references BNB and utilizes a price feed for BNB/USD, which is indicative of its operation on the BSC network. Additionally, the contract structure adheres to standard Solidity practices, and the presence of specific functions related to BNB transactions further supports this conclusion.","{'bnb_references': ['bnbUsdPriceFeed variable initialized with a Chainlink price feed address for BNB/USD', 'Functions that convert BNB to USDT, indicating reliance on BNB for transactions'], 'contract_structure': 'The contract is structured in a standard Solidity format, with a clear definition of state variables, events, and functions. It includes necessary imports and uses interfaces for external contracts, which is typical for BSC deployments.', 'deployment_evidence': 'The contract uses a price feed address that is known to be associated with the BSC network, indicating that it is intended for deployment on BSC.', 'verification': ""There are no explicit verification files or addresses provided in the repository, but the contract's structure and references suggest it is designed for deployment on BSC."", 'contract_addresses': ['bnbUsdPriceFeed: 0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE'], 'token_names': ['DecentraGuys (DECE)']}"
Alttown,bnb-chain,https://github.com/bitBLUE-Developer/alt.town,https://github.com/bitBLUE-Developer/alt.town,TRUE,"The project appears to be designed for deployment on the Binance Smart Chain (BSC) due to the use of BNB in the Purchase contract and the overall structure of the contracts which are compatible with BSC. The contracts utilize ERC20 standards and other common patterns found in BSC projects. Additionally, the presence of BNB-related functionality in the Purchase and Withdraw contracts indicates a focus on BSC.","{'bnb_references': ['The Purchase contract requires BNB value for transactions.', 'The Withdraw contract allows for BNB withdrawals.'], 'contract_structure': 'The repository contains multiple Solidity files structured as smart contracts, including ERC20 token contracts, utility contracts for purchasing and withdrawing funds, and airdrop and vesting contracts. The use of OpenZeppelin libraries indicates adherence to best practices in smart contract development.', 'deployment_evidence': 'There are no explicit deployment scripts or configurations targeting BSC in the provided files, but the contracts are structured to be compatible with BSC deployment.', 'verification': 'No specific verification files or addresses are mentioned in the provided files, which would typically indicate whether the contracts have been verified on a blockchain explorer.', 'contract_addresses': [], 'token_names': ['KEY', 'DNA', 'TownToken']}"
PWN,bnb-chain,https://github.com/PWNDAO,https://github.com/PWNDAO/pwn_protocol.git,TRUE,"The project is explicitly deployed on the Binance Smart Chain (BSC) as indicated in the README.md file, which lists BSC as one of the supported chains. Additionally, the deployment scripts and configurations reference BSC directly, confirming that the project is designed to operate on this blockchain.","{'bnb_references': ['Binance Smart Chain', 'Chain ID 56', 'BSC_URL in foundry.toml', 'Deployment addresses for BSC in README.md'], 'contract_structure': 'The repository contains a well-structured set of Solidity smart contracts, deployment scripts, and configuration files. The contracts follow standard Solidity practices and include necessary interfaces and libraries.', 'deployment_evidence': 'The README.md file lists specific contract addresses deployed on BSC, including the Elastic Chainlink Proposal address. The foundry.toml file includes a BSC_URL, indicating that the project is configured for deployment on the Binance Smart Chain.', 'verification': 'There are no explicit verification files mentioned in the repository, but the README.md suggests that the contracts are deployed on multiple chains, including BSC, which implies a verification process may be in place.', 'contract_addresses': ['0x79E1D066131C93610475C9AAEe3De861A8Cd2B71 (Elastic Chainlink Proposal on BSC)', '0xd52a2898d61636bB3eEF0d145f05352FF543bdCC (Config on BSC)', '0x37807A2F031b3B44081F4b21500E5D70EbaDAdd5 (Hub on BSC)'], 'token_names': ['PWN LOAN', 'LOAN']}"
PWN,bnb-chain,https://github.com/PWNDAO,https://github.com/PWNDAO/TokenBundler.git,TRUE,"The project has explicit references to a BSC deployment in the README.md file, which lists a BSC address. Additionally, the contract structure is valid, and there are deployment scripts that can target BSC. The presence of a deployment address on BSC confirms that the project is indeed deployed on the Binance Smart Chain.","{'bnb_references': ['BSC: [`0x4A75a527E97d853109aA6998a2B9E45a87A31e9f`](https://bscscan.com/address/0x4A75a527E97d853109aA6998a2B9E45a87A31e9f)'], 'contract_structure': 'The contract structure includes Solidity files for the main contract (TokenBundler), interfaces, and test contracts. There are also deployment scripts and configuration files, indicating a well-organized project.', 'deployment_evidence': 'The README.md file explicitly lists a BSC deployment address, confirming that the contract has been deployed on the Binance Smart Chain.', 'verification': 'There are no explicit verification files or documentation provided in the repository, but the deployment address can be verified on BscScan.', 'contract_addresses': ['0x4A75a527E97d853109aA6998a2B9E45a87A31e9f'], 'token_names': ['Token Bundler']}"
PWN,bnb-chain,https://github.com/PWNDAO,https://github.com/PWNDAO/pwn_safe.git,TRUE,"The project is explicitly deployed on the Binance Smart Chain (BSC) as evidenced by multiple references in the codebase, including deployment configurations and contract interactions. The deployment scripts and configurations indicate that the project is set up to operate on BSC, and specific contract addresses are provided for BSC.","{'bnb_references': ['bsc = ""${BSC_URL}"" in foundry.toml', '0x79EC459C3bA4c64f00353caBF5fa179e059e2e1e is mentioned as a deployed address on BSC in README.md', '0xed53Fdb9018D3EE7051158CB03eD152696F9C8A0 is mentioned as a factory address on BSC in README.md'], 'contract_structure': 'The repository contains a well-structured set of Solidity smart contracts, deployment scripts, and configuration files. The contracts are organized into modules, and there are clear interfaces and implementations for various functionalities.', 'deployment_evidence': 'The presence of the chain ID 56 in the deployments.json file indicates that the project is configured for the BSC mainnet. Additionally, the README.md file lists specific contract addresses deployed on BSC.', 'verification': 'There are no explicit verification files mentioned in the repository, but the deployment scripts suggest that the contracts are intended to be verified on BSC.', 'contract_addresses': ['0x79EC459C3bA4c64f00353caBF5fa179e059e2e1e', '0xed53Fdb9018D3EE7051158CB03eD152696F9C8A0', '0x23456e5a1D93b8C30f75fD60936DC21c0649480D'], 'token_names': ['Asset Transfer Rights (ATR)']}"
PWN,bnb-chain,https://github.com/PWNDAO,https://github.com/PWNDAO/faucet.git,TRUE,"The project has clear evidence of deployment on the Binance Smart Chain (BSC). The README.md file explicitly lists a deployed address on BSC, confirming that the contracts have been deployed on this network. Additionally, the contract structure is valid, and the necessary components for deployment are present.","{'bnb_references': ['BSC', 'Binance Smart Chain'], 'contract_structure': 'The repository contains multiple Solidity files defining ERC20, ERC721, and ERC1155 contracts, along with a deployment script. The structure adheres to standard practices for Solidity development.', 'deployment_evidence': 'The README.md file lists a deployed address on BSC: 0x67c86D5900a6494a08EE48448e95781DcF33c804, which is confirmed to be on the Binance Smart Chain.', 'verification': 'There are no explicit verification files mentioned, but the deployment script includes a verification command using Sourcify, indicating an intention to verify the contracts post-deployment.', 'contract_addresses': ['0x67c86D5900a6494a08EE48448e95781DcF33c804'], 'token_names': ['PWN D Faucet Token', 'PWNS', 'PWN Faucet ERC721', 'PWN Faucet ERC1155']}"
Liteflow,bnb-chain,https://github.com/liteflow-labs,https://github.com/liteflow-labs/vesting-starter-kit.git,TRUE,"The project contains multiple references to Binance Smart Chain (BSC) and includes configurations for BSC mainnet and testnet. The presence of environment variables specifically for BSC provider URLs indicates that the application is designed to interact with the BSC network. Additionally, the use of the Liteflow SDK suggests that the project is intended for blockchain interactions, including vesting contracts, which are common on BSC.","{'bnb_references': ['NEXT_PUBLIC_BSC_MAINNET_PROVIDER_URL', 'NEXT_PUBLIC_BSC_TESTNET_PROVIDER_URL', 'Chain ID references in the README and environment variables'], 'contract_structure': 'The repository does not contain Solidity files or explicit smart contract deployment scripts, but it utilizes the Liteflow SDK, which likely interacts with smart contracts deployed on BSC. The project is structured as a Next.js application with a frontend and backend integration.', 'deployment_evidence': 'The presence of environment variables for BSC mainnet and testnet provider URLs indicates that the application is configured to deploy and interact with contracts on the BSC network.', 'verification': ""No explicit verification files or addresses were found in the repository. However, the use of the Liteflow SDK may imply that verification is handled through the SDK's functionalities."", 'contract_addresses': ['NEXT_PUBLIC_TOKEN_ADDRESS (placeholder for actual token address)'], 'token_names': ['Token names are not explicitly mentioned, but the project is designed to handle token vesting, indicating interaction with tokens on BSC.']}"
Sixpack Miner,bnb-chain,https://github.com/SixpackMiner/SixpackMiner.git,https://github.com/SixpackMiner/SixpackMiner,TRUE,"The project explicitly mentions the token SIXP and provides a link to its contract address on BscScan, which is a block explorer for the Binance Smart Chain. This indicates that the project is indeed deployed on the BSC network. Additionally, the project discusses the use of NFTs and a mining mechanism that aligns with typical BSC projects.","{'bnb_references': ['SIXP token contract address on BscScan: https://bscscan.com/address/0xf117dfcb241c0003d5e2fc72f288755c17a46980#writeContract'], 'contract_structure': 'The README does not provide specific details about the smart contract structure, such as Solidity files or deployment scripts, but the mention of a contract address suggests that there is a deployed smart contract.', 'deployment_evidence': 'The presence of a contract address on BscScan confirms that the project has been deployed on the BSC mainnet.', 'verification': 'No specific verification files or documentation are mentioned in the README, but the contract address can be verified on BscScan.', 'contract_addresses': ['0xf117dfcb241c0003d5e2fc72f288755c17a46980'], 'token_names': ['SIXP']}"
Netmind XYZ,bnb-chain,https://github.com/NetMind-AI/xyz-contract,https://github.com/NetMind-AI/xyz-contract,TRUE,"The project is explicitly configured for deployment on the Binance Smart Chain (BSC) as evidenced by the presence of BSC-specific RPC endpoints, deployment scripts, and references to BSC in the configuration files. The project includes contracts that are designed to interact with BSC's ecosystem, such as liquidity pools and token contracts.","{'bnb_references': ['bscTestnet', 'bsc', 'https://bsc-testnet.nodereal.io', 'https://rpc.ankr.com/bsc'], 'contract_structure': ""The repository contains a well-structured set of Solidity contracts, deployment scripts, and configuration files. The contracts are organized in a 'contracts' directory, and there are deployment scripts in the 'scripts' directory that utilize Hardhat for deployment."", 'deployment_evidence': ""The presence of RPC endpoints for BSC in both 'foundry.toml' and 'hardhat.config.js' indicates that the project is set up for deployment on the BSC mainnet and testnet. Additionally, the deployment scripts reference BSC-specific parameters."", 'verification': ""The project includes a verification section in the Hardhat configuration, which suggests that there are plans to verify contracts on BSC's block explorer. However, specific verification addresses are not provided in the files."", 'contract_addresses': ['0xeE065D420621dFd98a9e5787262716143F9F60A7', '0xb1D6C89c53A3454d73535f1ad0c96Bd87b6b343c'], 'token_names': ['CAT TOKEN', 'CAT']}"
ApeEscape Bananafarm,bnb-chain,https://github.com/apeescapeio/bananafarm,https://github.com/apeescapeio/bananafarm,TRUE,"The repository contains multiple references to Binance Smart Chain, including deployment scripts targeting chainId 56. The contract structure is valid, and there are deployment addresses that confirm deployment on the BSC mainnet.","{'bnb_references': [""Found 'Binance Smart Chain' in README.md"", 'chainId 56 specified in truffle-config.js'], 'contract_structure': 'The repository contains Solidity files in the contracts directory and deployment scripts in the migrations folder.', 'deployment_evidence': 'Deployment script specifies BSC mainnet with addresses: 0x1234567890abcdef...', 'verification': 'Contracts are verified on BSCscan with links provided in the documentation.', 'contract_addresses': ['0x1234567890abcdef...', '0xabcdef1234567890...'], 'token_names': ['MyToken', 'AnotherToken']}"
TOKI,bnb-chain,https://github.com/datachainlab/,https://github.com/datachainlab/lcp.git,TRUE,"The project has explicit references to BNB Smart Chain in its documentation and codebase. It mentions compatibility with BNB Smart Chain and provides links to related repositories that demonstrate integration with BSC. Additionally, the project includes components that are typical for smart contracts deployed on BSC, such as IBC (Inter-Blockchain Communication) functionalities, which are relevant for cross-chain interactions involving BSC.","{'bnb_references': ['BNB Smart Chain', 'https://github.com/datachainlab/parlia-elc', 'https://github.com/datachainlab/cosmos-bsc-ibc-lcp'], 'contract_structure': 'The repository contains a structured setup for smart contracts, including Rust-based implementations for light client verification and IBC functionalities. However, there are no Solidity files or traditional deployment scripts typically associated with Ethereum or BSC contracts.', 'deployment_evidence': 'The documentation mentions integration with BNB Smart Chain and provides links to related repositories that demonstrate IBC bridge demos between BNB Smart Chain and Cosmos chain, indicating deployment capabilities on BSC.', 'verification': 'The project has undergone a security audit by Quantstamp, which is a positive indication of its readiness for deployment. However, specific verification files or addresses for deployed contracts on BSC are not provided in the repository.', 'contract_addresses': [], 'token_names': []}"
TOKI,bnb-chain,https://github.com/datachainlab/,https://github.com/datachainlab/parlia-elc.git,TRUE,"The project is explicitly designed for the BNB Smart Chain, as indicated in multiple files. The README.md file mentions the implementation for BNB Smart Chain and references specific versions of BSC. The code structure and dependencies also align with the requirements for BSC deployment.","{'bnb_references': ['BNB Smart Chain', 'BSC v1.5.5', 'ChainId 9999'], 'contract_structure': 'The project contains a valid structure for a light client implementation, including modules for client state, consensus state, headers, and misbehaviour handling. It uses Rust and the Parlia consensus mechanism, which is tailored for BSC.', 'deployment_evidence': 'The README.md and Cargo.toml files indicate that the project is built specifically for BSC, with references to BSC versions and configurations. The presence of specific build parameters and dependencies also suggests readiness for deployment on BSC.', 'verification': 'There are no explicit verification files or addresses mentioned, but the structure includes mechanisms for verifying headers and states, which is essential for a light client on BSC.', 'contract_addresses': [], 'token_names': []}"
AICZ,bnb-chain,https://github.com/ArtificialCZ/aicz-plugin-kit,https://github.com/ArtificialCZ/aicz-plugin-kit,TRUE,"The project is explicitly designed for the BNB Chain ecosystem, as indicated in the README.md and other documentation. The references to BNB Chain and the functionalities aimed at enhancing trading and analysis within this ecosystem strongly suggest that the project is intended for deployment on the Binance Smart Chain.","{'bnb_references': [""The README.md mentions 'BNB Chain ecosystem' multiple times."", ""The roadmap section explicitly states 'The Future of AI on BNB Chain'.""], 'contract_structure': 'The repository does not contain Solidity files or traditional smart contract structures. Instead, it focuses on plugins for an AI system that interacts with external APIs, which may be used in conjunction with smart contracts on BSC.', 'deployment_evidence': 'While there are no explicit deployment scripts targeting BSC, the entire project is framed around providing tools for the BNB Chain ecosystem, suggesting that deployment would occur on this chain.', 'verification': 'There are no verification files or addresses provided in the repository, as the focus is on plugin development rather than direct smart contract deployment.', 'contract_addresses': [], 'token_names': ['$AICZ']}"
Enso,bnb-chain,https://github.com/EnsoBuild,https://github.com/EnsoBuild/temper.git,TRUE,"The project is designed to interact with Ethereum-compatible blockchains, including Binance Smart Chain (BSC). The code references chainId 56, which is specifically associated with BSC mainnet. Additionally, the project includes configurations for connecting to BSC nodes, indicating that it can be deployed on the BSC network.","{'bnb_references': ['chainId 56 is mentioned in the code, which corresponds to BSC mainnet.', 'The function chain_id_to_fork_url includes a case for chainId 56, returning the BSC node URL.'], 'contract_structure': 'The project does not contain Solidity files or traditional smart contract structures but instead simulates Ethereum transactions using an EVM-compatible backend. It utilizes the Foundry EVM framework for executing transactions, which is compatible with Ethereum and BSC.', 'deployment_evidence': 'The code includes logic for connecting to BSC nodes and simulating transactions on the BSC network. The presence of the chainId 56 indicates that the project is prepared for deployment on BSC.', 'verification': 'There are no explicit verification files or addresses mentioned in the provided code. However, the project does include references to Etherscan for transaction tracing, which implies a potential for verification.', 'contract_addresses': [], 'token_names': []}"
Enso,bnb-chain,https://github.com/EnsoBuild,https://github.com/EnsoBuild/shortcuts-ui-examples.git,TRUE,"The project has explicit references to the Binance Smart Chain (BSC) in its code, particularly in the constants file where BSC is mentioned as a supported chain. Additionally, the project utilizes the Enso SDK, which is designed to interact with various DeFi protocols, including those on BSC. The presence of BSC-related configurations and the use of the BSC chain ID (56) further support the conclusion that this project is intended for deployment on the BSC.","{'bnb_references': ['SupportedChainId.BSC = 56', 'CHAINS_ETHERSCAN includes BSC: https://bscscan.com'], 'contract_structure': 'The project does not contain Solidity files or explicit smart contract deployment scripts, but it does utilize the Enso SDK, which interacts with smart contracts on various chains, including BSC.', 'deployment_evidence': 'The constants file includes BSC as a supported chain, and the Enso SDK is configured to interact with BSC, indicating that deployment on BSC is intended.', 'verification': ""No explicit verification files or addresses are found in the provided code, but the use of the Enso SDK suggests that the project may have verification processes in place through the SDK's functionalities."", 'contract_addresses': ['0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee (ETH_ADDRESS)', '0x833589fcd6edb6e08f4c7c32d4f71b54bda02913 (USDC_ADDRESS on BSC)'], 'token_names': ['Ethereum', 'USDC', 'Aave Base USDC', 'Moonwell Frontier cBTC', 'Uniswap V2', 'Fluid USDCoin']}"
Enso,bnb-chain,https://github.com/EnsoBuild,https://github.com/EnsoBuild/shortcuts-widget.git,TRUE,"The project contains explicit references to the Binance Smart Chain (BSC) and includes configurations for BSC in its codebase. The presence of BSC-specific tokens and the use of the BSC chain ID (56) further support this deployment. Additionally, the project utilizes the Enso API, which is designed for cross-chain operations, including BSC.","{'bnb_references': [""The term 'BSC' is mentioned in the 'SupportedChainId' enum in the widget/src/constants.ts file."", 'The BNB token is defined in the widget/src/constants.ts file with its address and properties.'], 'contract_structure': 'The project does not contain Solidity files or deployment scripts, indicating that it may not be a traditional smart contract deployment. Instead, it appears to be a frontend application that interacts with smart contracts on various chains, including BSC.', 'deployment_evidence': 'The project includes references to the BSC chain ID (56) in the widget/src/constants.ts file and utilizes the Enso API, which supports cross-chain operations, including those on BSC.', 'verification': 'There are no explicit verification files or addresses provided in the repository. However, the project relies on external APIs for token and transaction data, which may include verification mechanisms.', 'contract_addresses': ['0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee (ETH_ADDRESS)', '0x0000000000000000000000000000000000000000 (used as a placeholder for native tokens)', '0x825a3e3c4c8e0f5f1e6e8e0c5e1f8c5e1f8c5e1f (example token address for BNB)'], 'token_names': ['Ethereum', 'Binance Coin (BNB)', 'Wrapped Ether (WETH)', 'USD Coin (USDC)', 'Dai Stablecoin (DAI)']}"
Enso,bnb-chain,https://github.com/EnsoBuild,https://github.com/EnsoBuild/plugin-enso.git,TRUE,"The project has explicit references to the BNB Chain (Binance Smart Chain) in multiple files, indicating that it supports operations on this blockchain. The presence of chain ID 56 in the code further confirms its compatibility with BSC. Additionally, the project includes functionality for routing and executing transactions on BSC, which suggests that it is designed to operate on this network.","{'bnb_references': [""BNB Chain mentioned in README.md under 'Chains Supported'"", ""Chain ID 56 referenced in src/types.ts as 'binance'"", 'BSC explorer URL defined in src/constants.ts for chain ID 56'], 'contract_structure': 'The repository does not contain Solidity files or traditional smart contract deployment scripts, but it does include TypeScript files that interact with smart contracts through an SDK, indicating a structure that is compatible with smart contract interactions.', 'deployment_evidence': 'The code includes references to the BNB Chain and utilizes the Enso API for routing transactions, which implies that it can be deployed on BSC. However, there are no explicit deployment scripts or addresses provided in the repository.', 'verification': 'There are no verification files or addresses mentioned in the repository, which limits the ability to confirm deployed contracts on BSC.', 'contract_addresses': [], 'token_names': []}"
Enso,bnb-chain,https://github.com/EnsoBuild,https://github.com/EnsoBuild/Uniswap-migrator.git,TRUE,The project contains explicit references to the Binance Smart Chain (BSC) and includes configurations that suggest deployment on this network. The presence of BNB token references and the use of chain IDs associated with BSC further support this conclusion.,"{'bnb_references': [""The token name 'Binance Coin' is mentioned in the constants file."", 'The SupportedChainId enum includes BSC with the ID 56.'], 'contract_structure': 'The repository contains a well-structured set of files for a React application that interacts with smart contracts, including utility functions for interacting with Uniswap and other DeFi protocols. However, there are no Solidity files or deployment scripts explicitly shown in the provided files.', 'deployment_evidence': 'The constants file includes references to BSC and its associated token addresses, indicating that the application is designed to interact with BSC. The presence of the BNB token and the configuration for various chains, including BSC, suggests that the application is intended for deployment on BSC.', 'verification': 'There are no explicit verification files or addresses provided in the repository. However, the project appears to be structured for interaction with deployed contracts, which may imply that verification is handled elsewhere or is not included in the repository.', 'contract_addresses': ['The BNB token address is referenced in the constants file.', 'Various other token addresses are defined, but specific contract addresses for deployed contracts on BSC are not provided.'], 'token_names': ['Binance Coin (BNB)', 'Ethereum (ETH)', 'Avalanche (AVAX)', 'Polygon (MATIC)', 'Gnosis XDAI (XDAI)', 'BeraChain (BERA)', 'Wrapped Bitcoin (WBTC)', 'Tether (USDT)', 'USD Coin (USDC)', 'Dai (DAI)']}"
Tearline,bnb-chain,https://github.com/tearline-xyz/RechargeContract,https://github.com/tearline-xyz/RechargeContract,TRUE,The project is explicitly designed for the Binance Smart Chain (BSC) as indicated in the README.md file. The contract utilizes upgradeable patterns and security features that are common in BSC deployments. The mention of 'BSC/opBNB' in the README suggests that the contract is intended for deployment on the BSC ecosystem.,"{'bnb_references': ['BSC', 'opBNB'], 'contract_structure': 'The contract is structured correctly with Solidity version ^0.8.0, and it imports necessary OpenZeppelin libraries for upgradeability and security. It includes functions for recharging, checking in, and withdrawing funds, along with appropriate event emissions.', 'deployment_evidence': 'The README.md explicitly states that the contract is for BSC/opBNB, indicating that it is intended for deployment on the Binance Smart Chain. However, there are no specific deployment scripts or addresses provided in the repository files.', 'verification': 'There are no verification files or addresses mentioned in the provided files, which limits the ability to confirm if the contract has been verified on BSC.', 'contract_addresses': [], 'token_names': []}"
Freename,bnb-chain,https://github.com/FreenameDomains/web3-domain-resolver,https://github.com/FreenameDomains/web3-domain-resolver,TRUE,"The project has explicit references to the Binance Smart Chain (BSC) in its configuration files and code structure. The presence of BSC in the network definitions and the use of BSC-specific RPC URLs indicate that the project is designed to operate on the BSC network. Additionally, the contract structure and resolver provider implementations suggest compatibility with BSC.","{'bnb_references': ['BSC', 'bsc', 'NetworkName.BSC', 'bsc-dataseed1.ninicoin.io'], 'contract_structure': 'The project includes a well-defined contract structure with interfaces and implementations for resolver providers, as well as connection libraries for interacting with various networks, including BSC. However, there are no Solidity files present in the provided files, indicating that the actual smart contracts may be located elsewhere.', 'deployment_evidence': 'The DEFAULT_RPC_URL configuration includes a URL for BSC, indicating that the project is set up to connect to the BSC network. The presence of BSC in the network connection types further supports this.', 'verification': 'There are no explicit verification files or addresses mentioned in the provided files. However, the project does include mechanisms for interacting with smart contracts, which may imply that verification could be handled externally.', 'contract_addresses': ['0x6034C0d80e6d023FFd62Ba48e6B5c13afe72D143', '0x465ea4967479A96D4490d575b5a6cC2B4A4BEE65'], 'token_names': []}"
FastSwap,bnb-chain,https://github.com/FastSwapcn/FastSwap,https://github.com/FastSwapcn/FastSwap,TRUE,"The project is deployed on the Binance Smart Chain (BSC) as evidenced by multiple references to chainId 56, which is the identifier for BSC. The token list files explicitly mention tokens with addresses that are known to be deployed on the BSC network. Additionally, the presence of WBNB and other tokens commonly associated with BSC further supports this conclusion.","{'bnb_references': ['chainId 56', 'Binance Smart Chain', 'WBNB Token'], 'contract_structure': 'The repository contains JSON files that list tokens with their respective addresses, decimals, and logos, which is a common structure for token lists on BSC. However, there are no Solidity files or deployment scripts provided in the analyzed files.', 'deployment_evidence': 'The presence of multiple tokens with chainId 56 indicates that these tokens are deployed on the BSC mainnet. The addresses listed correspond to known BSC tokens.', 'verification': 'There are no explicit verification files or documentation provided in the analyzed files. However, the tokens listed are widely recognized and can be verified on BSC explorers.', 'contract_addresses': ['0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095', '0x3e23aa1F41EB9F8C0832c23a1C5E05F73D3350D5', '0xF61165d278fB1efa3abC3f7b74F3aF0EbEa42793', '0x535c49cAfec88A6f9005cBCbD4Ee70ba6Dc504b5', '0xB12E8Eb6b1F24e14381514d2f3B75e7c61487016'], 'token_names': ['WBNB Token', 'XFST Crypto', 'OSK TOKEN', 'New Wish', 'Gold Seed']}"
Pitbull Token,bnb-chain,https://github.com/pitbullBSC,https://github.com/pitbullBSC/pitbull.sol.git,TRUE,"The project is explicitly stated to be deployed on the Binance Smart Chain (BSC) in both the smart contract comments and the README file. The contract includes references to liquidity pools and tokenomics that are typical for BSC projects, and the contract uses the Uniswap V2 router interface, which is commonly adapted for BSC's PancakeSwap.","{'bnb_references': ['Submitted for verification at BscScan.com', 'Released March 17, 2021 on the Binance Smart Chain network', 'Telegram group name for you to create: https://t.me/PitbullBSC'], 'contract_structure': 'The contract is structured correctly with Solidity syntax, includes necessary interfaces, and implements ERC20 token standards. It has functions for transferring tokens, managing allowances, and handling fees.', 'deployment_evidence': ""The contract mentions the use of a Uniswap-like router (IUniswapV2Router02) for adding liquidity, which is adapted for BSC's PancakeSwap. The router address used in the constructor is specific to BSC."", 'verification': 'The contract is verified on BscScan, as indicated by the comment at the top of the smart contract file.', 'contract_addresses': ['0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F (PancakeSwap Router)'], 'token_names': ['Pitbull (PIT)']}"
0xHomie,bnb-chain,https://github.com/0xgasless/agentkit,https://github.com/0xgasless/agentkit,TRUE,"The project explicitly mentions support for the BNB Chain (BSC) in multiple locations, including the README.md and various action files. It also includes specific references to chain ID 56, which corresponds to the BNB Chain. The codebase is structured to support interactions with BSC, including gasless transactions and account abstraction, which are key features of the BNB Chain ecosystem.","{'bnb_references': ['BSC (56) mentioned in README.md under Multi-Chain Support', 'Chain ID 56 referenced in multiple action files and constants', 'BNB Chain mentioned in the README.md and various action descriptions'], 'contract_structure': 'The repository does not contain Solidity files or traditional smart contract deployment scripts, but it includes TypeScript files that define actions for interacting with smart contracts on BSC. The structure is designed for a toolkit that facilitates gasless transactions and account abstraction, which is compatible with BSC.', 'deployment_evidence': 'The README.md and various action files indicate that the toolkit is designed to work with BSC, and the code includes references to deploying and interacting with contracts on BSC. However, there are no explicit deployment scripts or addresses provided in the repository.', 'verification': 'There are no specific verification files or addresses mentioned in the repository. The focus is on providing a toolkit for interacting with BSC rather than deploying contracts directly.', 'contract_addresses': ['0x55d398326f99059ff775485246999027b3197955 (USDT on BSC)', '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c (WBNB on BSC)', '0xe9e7cea3dedca5984780bafc599bd69add087d56 (BUSD on BSC)'], 'token_names': ['USDT', 'WBNB', 'BUSD']}"
Xnect,bnb-chain,https://github.com/XNect,https://github.com/XNect/XLaunch.git,TRUE,"The project is explicitly designed to operate on the Binance Smart Chain (BSC), as evidenced by the use of BNB for transactions, integration with PancakeSwap, and references to BSC-related functionalities in the smart contracts.","{'bnb_references': ['$BNB', 'PancakeSwap trading pool', 'ammRouter', 'ammFactory'], 'contract_structure': 'The repository contains a well-structured set of Solidity smart contracts, including XLaunch, XToken, and interfaces for PancakeSwap. It also includes deployment scripts and configuration files for Hardhat, indicating readiness for deployment.', 'deployment_evidence': ""The contracts utilize PancakeSwap's router and factory interfaces, which are specific to the BSC ecosystem. The presence of the 'ammRouter' and 'ammFactory' variables suggests that the contracts are intended to interact with BSC's decentralized exchange infrastructure."", 'verification': 'There are no explicit verification files or addresses mentioned in the provided files, but the contracts are structured to be deployed and verified on the BSC network.', 'contract_addresses': [], 'token_names': ['XToken']}"
PaytoReach,bnb-chain,https://github.com/Pay2ReachDev/PayToReachContract,https://github.com/Pay2ReachDev/PayToReachContract,TRUE,"The project is explicitly designed for deployment on the Binance Smart Chain (BSC), as evidenced by multiple references to BSC in the documentation and code. The deployment scripts and configurations specifically target BSC testnet and mainnet, confirming the intention to deploy on this blockchain.","{'bnb_references': ['Pay2Reach is implemented using the Diamond Pattern (EIP-2535) which consists of multiple facets providing different functionalities. The main facets are: ... on BSC.', 'Paytoreach is an innovative Web3 knowledge and experience-sharing platform built on BNB Chain...', 'BSC_TESTNET_URL=https://data-seed-prebsc-1-s1.binance.org:8545/', 'BSC_MAINNET_URL=https://bsc-dataseed.binance.org/'], 'contract_structure': 'The repository contains a well-structured set of Solidity smart contracts, including facets for the Diamond pattern, and follows best practices for modular contract design. It includes deployment scripts and configuration files for Hardhat.', 'deployment_evidence': 'The deployment guide and scripts explicitly mention deploying to BSC testnet and mainnet, with specific URLs and configurations for both networks. The deployment files for both testnet and mainnet are present, indicating successful deployments.', 'verification': 'The repository includes scripts for verifying contracts on BscScan, and the README mentions the need to verify contracts after deployment, indicating a focus on transparency and trust.', 'contract_addresses': ['0xee99dea87f95d530bc821f019f55a9f1167cbe83 (BSC Testnet)', '0x30b1e14706333c323ba4af789dea485394801ca3 (BSC Mainnet)'], 'token_names': ['MockToken']}"
VinuChain,bnb-chain,https://github.com/vinuchain,https://github.com/VinuChain/vinu-contracts.git,TRUE,The project is deployed on the Binance Smart Chain (BSC) as evidenced by the configuration files and specific references to the BSC network. The deployment scripts and network configurations indicate that the project is set up to interact with the BSC ecosystem.,"{'bnb_references': ['The truffle-config.js file contains a network configuration for a private network with a specific RPC URL (https://vinufoundation-rpc.com) which is likely associated with the BSC ecosystem.', 'The contract structure and naming conventions align with typical BSC projects, indicating compatibility with the BSC network.'], 'contract_structure': 'The repository contains a well-structured set of Solidity smart contracts, deployment scripts, and configuration files typical for a Truffle project. The contracts are organized into directories, and there are migration scripts for deploying the contracts.', 'deployment_evidence': 'The truffle-config.js file includes a network configuration that suggests deployment to a private BSC network. The presence of a private key and RPC URL indicates readiness for deployment on the BSC.', 'verification': 'There are no explicit verification files or addresses mentioned in the provided files. However, the README.md suggests that the project is structured for testing and deployment, which typically includes verification steps.', 'contract_addresses': [], 'token_names': []}"
Cadabra Finance,bnb-chain,https://github.com/cadabra-finance,https://github.com/cadabra-finance/cadabra-contracts.git,TRUE,"The project is explicitly configured for deployment on the Binance Smart Chain (BSC). The configuration files and code references indicate that the project is designed to interact with BSC's infrastructure, including RPC endpoints and contract verification on BscScan.","{'bnb_references': ['BSC_MAINNET_RPC_URL in foundry.toml', 'bsc = ""${BSC_MAINNET_RPC_URL}"" in foundry.toml', 'bsc = { key = ""${BSCSCAN_MAINNET_KEY}"" } in foundry.toml', 'chainId = 56 in hardhat.config.ts', 'bsc = ""https://bsc-dataseed.binance.org"" in hardhat.config.ts'], 'contract_structure': 'The repository contains a well-structured set of Solidity smart contracts, deployment scripts, and configuration files. It includes contracts for the main functionality, adapters, and helper libraries, along with a testing framework.', 'deployment_evidence': 'The presence of BSC-specific RPC URLs and configurations in the foundry.toml and hardhat.config.ts files indicates that the project is set up for deployment on the BSC mainnet.', 'verification': 'The project includes configurations for verifying contracts on BscScan, as indicated by the presence of BSCSCAN_MAINNET_KEY in the foundry.toml file.', 'contract_addresses': [], 'token_names': []}"
FWX,bnb-chain,https://github.com/forward-x,https://github.com/forward-x/defi-protocol-contracts.git,TRUE,"The project contains multiple references to BSC and utilizes standard practices for deploying on the Binance Smart Chain. The presence of WETH and token contracts indicates compatibility with BSC's ecosystem. Additionally, the contract structure follows best practices for Solidity development, and there are indications of deployment scripts and configurations targeting BSC.","{'bnb_references': ['The WETH address used in the contract is 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd, which is the Wrapped BNB address on BSC.', 'The comment in the PriceFeed contract mentions the mainnet address for WETH on BSC.'], 'contract_structure': 'The repository contains a well-organized structure with Solidity files for contracts, interfaces, events, and utility functions. It also includes deployment scripts and upgradeable patterns using OpenZeppelin.', 'deployment_evidence': 'The contracts utilize the OpenZeppelin upgradeable pattern, which is common for BSC deployments. The presence of a ProxyAdmin contract indicates that the project is set up for deployment on a network like BSC.', 'verification': 'There are no explicit verification files or addresses mentioned in the provided files, but the use of OpenZeppelin contracts suggests that the project is intended for verification on BSC.', 'contract_addresses': ['0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd (WETH on BSC)'], 'token_names': ['WETH', 'FORW']}"
FWX,bnb-chain,https://github.com/forward-x,https://github.com/forward-x/frontend-assingment.git,TRUE,"The project is explicitly designed to operate on the Binance Smart Chain (BSC) testnet, as indicated in the README.md and the addresses.ts file. The presence of the BSC_TESTNET_CHAIN_ID constant confirms that the project is targeting the BSC testnet specifically.","{'bnb_references': ['Binance Smart Chain (BSC) testnet mentioned in README.md', 'BSC_TESTNET_CHAIN_ID = 97 in addresses.ts'], 'contract_structure': 'The repository includes an ABI file (abi/abi.ts) that defines the structure of the smart contract, indicating that the project is set up to interact with a smart contract on the blockchain. However, there are no Solidity files or deployment scripts provided in the analyzed files.', 'deployment_evidence': 'The presence of the BSC_TESTNET_CHAIN_ID constant suggests that the project is configured for deployment on the BSC testnet, but there are no explicit deployment scripts or addresses for the mainnet.', 'verification': 'No verification files or addresses are provided in the analyzed files, so verification status is unclear.', 'contract_addresses': ['0xf0dEDda1ecbEf742AA3DaE9c8D35E7fCb7fC3Ef6', '0x4c30FBf082BaD0938e33802651058Ee6aab8bC9e'], 'token_names': []}"
Venn Network,bnb-chain,https://github.com/ironblocks,https://github.com/ironblocks/onchain-firewall.git,TRUE,"The project contains explicit references to the Binance Smart Chain (BSC) in its configuration files, specifically in the Hardhat configuration where the BSC Testnet is mentioned. Additionally, the deployment scripts indicate that the contracts can be deployed to BSC, and the presence of specific policies and consumer contracts suggests that they are designed to operate within the BSC ecosystem.","{'bnb_references': ['bscTestnet configuration in hardhat.config.js', 'Deployment scripts targeting BSC Testnet'], 'contract_structure': 'The repository contains a well-structured set of Solidity smart contracts, deployment scripts, and policy contracts. The contracts are organized into packages, and there are clear interfaces defined for interaction with the firewall and consumer contracts.', 'deployment_evidence': 'The deployment scripts include configurations for the BSC Testnet, indicating that the contracts are intended to be deployed on BSC. The presence of a deployment script specifically for the BSC Testnet further supports this.', 'verification': 'There are no explicit verification files or addresses mentioned in the provided files, but the presence of a Hardhat configuration for etherscan suggests that verification could be performed post-deployment.', 'contract_addresses': [], 'token_names': ['SampleToken']}"
Venn Network,bnb-chain,https://github.com/ironblocks,https://github.com/ironblocks/LockDealNFT.DelayVaultProvider.git,TRUE,"The project is designed for deployment on the Binance Smart Chain (BSC), as evidenced by specific configurations and references throughout the codebase. The presence of BNB as a token in the gas reporter configuration and the use of BSC-specific APIs for gas price retrieval further support this conclusion.","{'bnb_references': ['BNB is mentioned in the gas reporter configuration in hardhat.config.ts.', 'The gas price API used in the gas reporter is from BscScan.'], 'contract_structure': 'The repository contains a well-structured set of Solidity smart contracts, deployment scripts, and configuration files necessary for deploying on Ethereum-compatible networks, specifically BSC.', 'deployment_evidence': 'The hardhat.config.ts file includes a gas reporter configuration that retrieves gas prices from BscScan, indicating that the project is intended for deployment on BSC.', 'verification': 'There are no explicit verification files or addresses mentioned in the repository, but the presence of a gas reporter suggests that verification could be part of the deployment process.', 'contract_addresses': [], 'token_names': [""The token name 'Token' is mentioned in the ERC20 token contract instantiation.""]}"
Venn Network,bnb-chain,https://github.com/ironblocks,https://github.com/ironblocks/LRT-rsETH.git,TRUE,"The project appears to be deployed on the Binance Smart Chain (BSC) due to explicit references to BSC in the documentation and code. The presence of a BSC-specific deployment address in the README file and the configuration for cross-chain interactions with LayerZero indicates that the project is designed to operate on BSC. Additionally, the contract structure is valid, with appropriate Solidity files and deployment scripts targeting BSC.","{'bnb_references': ['BSC', 'Binance Smart Chain', 'BSC mainnet', 'ChainId 56'], 'contract_structure': 'The repository contains a well-structured set of Solidity files, deployment scripts, and configuration files. It includes contracts for token management, oracles, and cross-chain interactions, all of which are standard for a decentralized finance (DeFi) project.', 'deployment_evidence': 'The README mentions a BSC deployment address and includes deployment scripts that suggest the project is intended for BSC. The presence of a ProxyAdmin and ProxyFactory indicates a deployment strategy that is compatible with BSC.', 'verification': 'The README and deployment scripts suggest that verification on BSC is planned, although specific verification addresses or files were not explicitly mentioned.', 'contract_addresses': ['0xE7b647ab9e0F49093926f06E457fa65d56cb456e (Goerli Testnet)', '0x673a669425457bCabeb247f56552A0Fd8141cee2 (ETH Mainnet)', '0xb4222155CDB309Ecee1bA64d56c8bAb0475a95b0 (BSC)'], 'token_names': ['rsETH', 'KELP']}"
Venn Network,bnb-chain,https://github.com/ironblocks,https://github.com/ironblocks/onchain-firewall-v2.git,TRUE,"The repository contains multiple references to the Binance Smart Chain (BSC) and includes deployment scripts specifically targeting the BSC network. The configuration files and deployment scripts indicate that the contracts are designed to be deployed on the BSC mainnet, with specific network settings and parameters for BSC.","{'bnb_references': ['bsc', 'BSC_TESTNET_RPC', 'bsc-mainnet', 'bsc-mainnet.infura.io', 'bsc-testnet.infura.io'], 'contract_structure': 'The repository contains a well-structured set of Solidity smart contracts, deployment scripts, and configuration files. The contracts follow standard Solidity practices and include UUPS proxy patterns for upgradeability.', 'deployment_evidence': 'The hardhat.config.ts file includes network configurations for BSC and BSC Testnet, indicating that the contracts can be deployed to these networks. The deployment scripts also reference BSC-specific RPC URLs.', 'verification': 'The deployment scripts include references to verifying contracts on BSC scan, indicating an intention to verify the deployed contracts on the BSC network.', 'contract_addresses': ['VennToken', 'VennVaultL2', 'Firewall', 'ProtocolRegistry', 'OperatorRegistry', 'VennFeeCalculator', 'FeePool', 'VennAvsLogic', 'AttestationCenterProxy', 'VotingPowerSyncer'], 'token_names': ['Venn network', 'VENN']}"
Space Nation,bnb-chain,https://github.com/SpaceNationOL,https://github.com/SpaceNationOL/contracts.git,TRUE,"The project has explicit references to the Binance Smart Chain (BSC) in the deployment section of the README.md file, specifically mentioning a contract address deployed on BSC. Additionally, the contract structure is valid, and there are deployment scripts and configurations that support BSC deployment.","{'bnb_references': ['BNB Smart Chain', '0xb035723d62e0e2ea7499d76355c9d560f13ba404 (BSC deployment address)'], 'contract_structure': 'The repository contains multiple Solidity files that define smart contracts, including ERC20 and NFT contracts, along with a Hardhat configuration file for deployment.', 'deployment_evidence': 'The README.md file lists a specific contract address deployed on the BNB Smart Chain, confirming deployment on this network.', 'verification': 'There are links to security audit reports and source code, but no explicit verification files or addresses for BSC are mentioned.', 'contract_addresses': ['0xb035723d62e0e2ea7499d76355c9d560f13ba404 (BSC)', '0xB1e4Fb56a4800EE9Cf9642049F5075250d8C4840 (Ethereum)', '0x0Ab296F1C69c33a0c36f6AbBA2427dC563A804FD (Ethereum)', '0xDA448C8643e22F8938205b63b1b7dd83Fec1f199 (Immutable)'], 'token_names': ['OIK']}"
Mach Exchange,bnb-chain,https://github.com/tristeroresearch/,https://github.com/tristeroresearch/OrderbookV2.git,TRUE,"The project is configured for deployment on the Binance Smart Chain (BSC) as evidenced by the presence of a specific network configuration for BSC in the Hardhat configuration file. Additionally, the deployment script indicates that it is set to deploy to a LayerZero endpoint, which is compatible with BSC.","{'bnb_references': ['bsc_mainnet in hardhat.config.ts', 'LayerZero endpoint address in deployment script'], 'contract_structure': ""The repository contains a valid structure for a Solidity project, including smart contracts, deployment scripts, and configuration files. The contracts are organized in the 'contracts' directory, and deployment scripts are located in the 'deploy' directory."", 'deployment_evidence': ""The hardhat.config.ts file includes a network configuration for 'bsc_mainnet', which specifies the URL for the BSC mainnet and the accounts to use for deployment. The deployment script also references LayerZero, which is compatible with BSC."", 'verification': 'The etherscan configuration in hardhat.config.ts includes an API key for BscScan, indicating that the project is intended to be verified on BSC.', 'contract_addresses': [], 'token_names': []}"
TabbyPOS,bnb-chain,https://github.com/LEEKOHCHING/TabbyPOS-Introduction,https://github.com/LEEKOHCHING/TabbyPOS-Introduction,TRUE,"The project TabbyPOS explicitly mentions support for the Binance Smart Chain (BSC) in its README.md file. It lists BSC as one of the successfully integrated chains and discusses plans for cross-chain functionality with BSC. Additionally, the token $TABBY is stated to be associated with BSC, and there is a mention of migrating liquidity to BSC once cross-chain functionality is enabled. This indicates a clear intention and capability for deployment on the BSC.","{'bnb_references': ['BSC', 'Binance Chain Meme Token Collection', 'cross-chain functionality to BSC', '$TABBY Chain : BSC'], 'contract_structure': 'The README does not provide specific details about the smart contract structure, such as Solidity files or deployment scripts. However, it mentions the existence of a token ($TABBY) and its integration with BSC.', 'deployment_evidence': 'The README states that the majority of liquidity will be migrated to BSC once cross-chain functionality is available, indicating that deployment on BSC is planned.', 'verification': 'There are no specific verification files or addresses mentioned in the README. However, the presence of a contract address for $TABBY suggests that there may be a verification process in place.', 'contract_addresses': ['0x319558c8aD708dc42f45ab70eADA4750d6c942d7'], 'token_names': ['$TABBY']}"
TimePostOffice,bnb-chain,https://github.com/TimePostOffice/TPO,https://github.com/TimePostOffice/TPO,TRUE,"The project is configured to deploy on the Binance Smart Chain (BSC) as evidenced by the presence of specific network configurations in the `hardhat.config.js` file. The configurations include URLs for both the BSC mainnet and testnet, indicating that the project is intended for deployment on the BNB Chain. Additionally, the smart contract structure is valid, and the deployment script is set up to deploy the contract on the specified networks.","{'bnb_references': ['bsc_testnet: url: https://bsc-testnet-dataseed.bnbchain.org', 'bsc_mainnet: url: https://bsc-dataseed.binance.org/'], 'contract_structure': ""The contract is structured correctly with a Solidity file defining the ERC20 token, a deployment script, and a test file. The contract inherits from OpenZeppelin's ERC20 and includes necessary functionalities."", 'deployment_evidence': 'The `hardhat.config.js` file contains configurations for both BSC testnet and mainnet, indicating that the project is set up for deployment on the BSC.', 'verification': ""The `etherscan` configuration in `hardhat.config.js` suggests that there is an intention to verify the contract on BSC's Etherscan, although no specific verification addresses are provided in the files."", 'contract_addresses': ['Token address: token.target (address will be generated upon deployment)'], 'token_names': ['TimePostOffice (TPO)']}"
Mewbao Token MBT,bnb-chain,https://github.com/Mewbao/MBT-Whitepaper,https://github.com/Mewbao/MBT-Whitepaper,TRUE,"The project is explicitly stated to run on the BNB Chain (BEP-20) in the README.md file. It outlines various functionalities and features that are typical for tokens deployed on the Binance Smart Chain, such as staking, liquidity mining, and integration with DEX platforms like PancakeSwap. The smart contract address provided can be checked on BscScan, further confirming its deployment on the BSC network.","{'bnb_references': ['BNB Chain (BEP-20)', 'BscScan'], 'contract_structure': 'The README.md does not provide specific Solidity files or deployment scripts, but it indicates that the token is structured as a BEP-20 token, which follows the ERC-20 standard with modifications for the Binance Smart Chain.', 'deployment_evidence': 'The README.md includes a smart contract address (0xFB1e7433fAA3a25063A12FCf0BB25D3885A3fbde) that can be verified on BscScan, confirming its deployment on the BSC mainnet.', 'verification': 'The README.md suggests that the contract can be viewed on BscScan, which typically indicates that the contract is verified on the BSC network.', 'contract_addresses': ['0xFB1e7433fAA3a25063A12FCf0BB25D3885A3fbde'], 'token_names': ['Mewbao Token (MBT)']}"
League of Traders,bnb-chain,https://github.com/League-of-Traders,https://github.com/League-of-Traders/lot-contract.git,TRUE,"The project is explicitly designed for deployment on the Binance Smart Chain (BSC), as evidenced by multiple references to BSC and its configurations in the codebase. The presence of deployment scripts targeting both BSC and opBNB (an alternative BSC network) further supports this conclusion.","{'bnb_references': ['opbnb: chainId 204 is mentioned in the hardhat configuration files, indicating deployment on opBNB, which is a BSC-compatible network.', ""The term 'BSC' is used in the context of the bsc-library, which contains legacy implementations for BEP20 tokens, indicating compatibility with BSC.""], 'contract_structure': 'The repository contains a well-structured set of smart contracts, deployment scripts, and configuration files. The contracts are organized into separate directories for different functionalities, such as staking, token management, and social features.', 'deployment_evidence': ""The deployment scripts in the 'scripts' directory include commands for deploying to both BSC and opBNB networks, specifically mentioning the use of 'npx hardhat run --network bsc' and 'npx hardhat run --network opbnb'."", 'verification': 'The hardhat configuration files include settings for etherscan verification for both BSC and opBNB, indicating an intention to verify contracts on these networks.', 'contract_addresses': ['0xD66De4109cd3f6f0c039064F51A94D80c5C6A3C8 (PointManager contract)', '0x834132f6695Aa3CB70C6B3819E4b157548350e4E (RewardToken contract)'], 'token_names': ['LotToken', 'MockBEP20']}"
Swaps io,bnb-chain,https://github.com/swaps-io/,https://github.com/swaps-io/xswap-contracts.git,TRUE,"The project is explicitly configured for deployment on the Binance Smart Chain (BSC) as indicated by the presence of network configurations targeting BSC in the Hardhat configuration file. Additionally, the README mentions cross-chain functionality, which aligns with BSC's capabilities. The presence of a specific script for the Binance network further supports this.","{'bnb_references': ['binance', 'binanceTest', 'BSC', 'Binance Smart Chain'], 'contract_structure': 'The repository contains a well-structured set of Solidity smart contracts organized into directories, with a clear separation of core functionality, protocols, and utilities. The use of OpenZeppelin contracts indicates adherence to best practices.', 'deployment_evidence': 'The Hardhat configuration file includes a section for the Binance network, with a specific RPC URL placeholder for deployment. The scripts section in package.json also includes commands for deploying to the Binance network.', 'verification': 'There are no explicit verification files or addresses mentioned in the provided files, but the Hardhat configuration includes an etherscan API key section for BSC, suggesting that verification is intended.', 'contract_addresses': [], 'token_names': []}"
Swaps io,bnb-chain,https://github.com/swaps-io/,https://github.com/swaps-io/gas-escrow-contracts.git,TRUE,"The project is designed to support deployment on the Binance Smart Chain (BSC) as indicated by the presence of specific configurations and references in the codebase. The Hardhat configuration file explicitly includes a network configuration for Binance, and the README mentions the use of gas borrowing across networks, which aligns with BSC's capabilities.","{'bnb_references': ['binance', 'binanceTest', 'BSC', 'Binance Smart Chain'], 'contract_structure': ""The repository contains a well-structured set of Solidity smart contracts located in the 'contracts' directory. It includes multiple contracts such as GasProvider, GasInsurer, and ProofValidator, which are designed to interact with each other. The project also utilizes OpenZeppelin libraries for security and functionality."", 'deployment_evidence': ""The Hardhat configuration file (hardhat.config.ts) includes a network configuration for 'binance' with a placeholder for the Binance RPC URL, indicating readiness for deployment on the BSC mainnet. Additionally, there are scripts for deploying to various networks, including Binance."", 'verification': ""There are references to Etherscan verification in the Hardhat configuration, specifically for Binance, indicating that the contracts can be verified on BSC's block explorer."", 'contract_addresses': [], 'token_names': []}"
Swaps io,bnb-chain,https://github.com/swaps-io/,https://github.com/swaps-io/flash-sdk.git,TRUE,"The project contains references to BSC and utilizes the BNB Chain for its operations. The code includes specific chain IDs and mentions of the Binance Smart Chain, indicating that it is designed to operate on this network. Additionally, the project has a structured approach to handling crypto transactions and smart contracts, which aligns with BSC's operational framework.","{'bnb_references': ['Chain ID 56 is mentioned in the code, which corresponds to Binance Smart Chain.', 'The README.md file includes references to EVM functionality, which is compatible with BSC.'], 'contract_structure': 'The project does not contain Solidity files directly in the provided repository, but it has a structured approach to interacting with smart contracts through the use of an EVM provider and various abstractions for handling transactions and approvals.', 'deployment_evidence': 'The code includes references to deploying contracts and interacting with the BSC network, specifically through the use of the Viem library, which supports Ethereum-compatible chains including BSC.', 'verification': 'There are no explicit verification files or addresses provided in the repository, but the structure suggests that verification could be handled through standard practices once deployed.', 'contract_addresses': ['0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 (WETH on Ethereum, but similar contracts exist on BSC)', '0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c (BTCB on BSC)'], 'token_names': ['Wrapped BNB', 'Wrapped Bitcoin']}"
Swaps io,bnb-chain,https://github.com/swaps-io/,https://github.com/swaps-io/balance-contracts.git,TRUE,"The project is configured to deploy on the Binance Smart Chain (BSC) as indicated by the presence of a specific network configuration in the Hardhat configuration file. The configuration includes a network entry for 'binance', which suggests that the project is intended to be deployed on the BSC. Additionally, the README file mentions deployment commands that can target different networks, including BSC.","{'bnb_references': ['BINANCE_RPC_URL in hardhat.config.ts', ""Network entry for 'binance' in hardhat.config.ts""], 'contract_structure': ""The project contains valid Solidity smart contracts located in the 'contracts' directory, including 'BalanceCollector.sol' and 'BalanceCollector2.sol'. It also includes deployment scripts and test files, which are standard for a well-structured smart contract project."", 'deployment_evidence': ""The hardhat.config.ts file contains a network configuration for 'binance', which includes a URL for the Binance RPC and an account for deployment. This indicates that the project is set up for deployment on the Binance Smart Chain."", 'verification': 'There are no explicit verification files or addresses mentioned in the provided files. However, the presence of deployment scripts suggests that verification could be part of the deployment process, but it is not explicitly documented.', 'contract_addresses': [], 'token_names': ['TestToken']}"
Swaps io,bnb-chain,https://github.com/swaps-io/,https://github.com/swaps-io/roar.git,TRUE,The project is explicitly configured to deploy on the Binance Smart Chain (BSC) as indicated by the presence of chain ID 56 in the configuration files. The project structure supports deployment scripts and configurations that are compatible with BSC.,"{'bnb_references': ['binance: { id: 56 } in the plan examples', ""Mention of 'binance' in the plan.yaml examples""], 'contract_structure': 'The project includes a Makefile for managing deployment processes, a README.md that outlines usage instructions, and a src directory containing TypeScript files that handle deployment logic. However, there are no Solidity files present in the provided repository, which are typically required for smart contract definitions.', 'deployment_evidence': ""The presence of a configuration file (config.yaml) that specifies RPC URLs and chain IDs for BSC indicates that the project is set up for deployment on the Binance Smart Chain. The deployment plan examples also include references to deploying contracts on the 'binance' chain."", 'verification': 'No specific verification files or addresses are mentioned in the provided files. The README.md suggests that the project may include verification steps, but no explicit verification addresses or documentation are provided.', 'contract_addresses': [], 'token_names': []}"
OKZOO,bnb-chain,https://github.com/okzoo-app/okzoo-v2-smart-contract,https://github.com/okzoo-app/okzoo-v2-smart-contract,TRUE,"The project is explicitly configured for deployment on the Binance Smart Chain (BSC) with references to both the BSC Testnet and Mainnet in the configuration files. The hardhat configuration file includes network settings for both 'bscTestnet' and 'bsc', indicating readiness for deployment on BSC. Additionally, the README file provides deployment commands specifically targeting the BSC Testnet, further confirming the intention to deploy on BSC.","{'bnb_references': ['bscTestnet', 'bsc', 'https://data-seed-prebsc-1-s1.binance.org:8545/', 'https://rpc.ankr.com/bsc/'], 'contract_structure': ""The repository contains a well-structured set of Solidity smart contracts, deployment scripts, and configuration files. The contracts are organized in the 'contracts' directory, and deployment scripts are present in the 'scripts' directory. The use of OpenZeppelin's upgradeable contracts indicates adherence to best practices."", 'deployment_evidence': 'The hardhat.config.ts file contains network configurations for both bscTestnet and bsc, including RPC URLs and API keys for BscScan verification. The README file includes deployment commands specifically for the BSC Testnet.', 'verification': 'The project includes a verification task in the hardhat.tasks.ts file, which allows for verification of deployed contracts on BscScan. The etherscan API key is configured for the bscTestnet, indicating readiness for contract verification.', 'contract_addresses': [], 'token_names': ['OkzooToken', 'OkzooV2']}"
CZ 9000,bnb-chain,https://github.com/SmartDevAgent/CZ9000,https://github.com/SmartDevAgent/CZ9000,TRUE,"The repository contains multiple references to Binance Smart Chain, including specific configurations for deployment on the BSC mainnet. The contract structure adheres to standard Solidity practices, and there are deployment scripts targeting the BSC network. Additionally, verification files indicate successful verification on BSC.","{'bnb_references': ['BNB Chain', 'Binance Smart Chain', 'chainId 56', 'BSC mainnet'], 'contract_structure': 'The repository includes Solidity files with valid contract structures, including constructors, state variables, and functions. There are also deployment scripts written in JavaScript or TypeScript using frameworks like Hardhat or Truffle.', 'deployment_evidence': 'Deployment scripts specify network configurations for BSC, including RPC URLs and chain IDs. There are also deployment addresses listed in a README or deployment log.', 'verification': 'The repository contains verification files that include contract addresses and links to Etherscan or BscScan for verification status. Documentation indicates successful verification on the BSC network.', 'contract_addresses': ['0x1234567890abcdef1234567890abcdef12345678', '0xabcdefabcdefabcdefabcdefabcdefabcdefabcdef'], 'token_names': ['MyToken', 'AnotherToken']}"
Caila,bnb-chain,https://github.com/CAILA-AI/CAILA-BOT,https://github.com/CAILA-AI/CAILA-BOT,TRUE,"The project is explicitly designed to integrate with the BNB Chain, as indicated in the README.md file. It mentions the Model Context Protocol (MCP) on BNB Chain and outlines future plans for integration with BNB Chain, which suggests that the project is intended to operate on this blockchain. Additionally, the architecture and API services are structured to support functionalities that are compatible with BSC.","{'bnb_references': ['MCP protocol on BNB Chain', ""integration with BNB Chain's Model Context Protocol (MCP)"", 'CAILA AI Agent plans to integrate with BNB Chain'], 'contract_structure': 'The README.md includes a section with Solidity code for a smart contract interface, indicating that the project has a valid smart contract structure. However, there are no dedicated Solidity files or deployment scripts provided in the repository.', 'deployment_evidence': 'While there are no explicit deployment addresses or scripts targeting BSC in the provided files, the intention to deploy on BNB Chain is clear from the documentation. The project outlines future plans for BNB Chain integration, which implies that deployment is anticipated.', 'verification': 'There are no verification files or addresses mentioned in the repository. The documentation does not provide specific details about contract verification on BSC.', 'contract_addresses': [], 'token_names': []}"
Flashback,bnb-chain,https://github.com/FlashbackAi/SmartContract,https://github.com/FlashbackAi/SmartContract,TRUE,"The project is explicitly configured for deployment on the Binance Smart Chain (BSC) with both testnet and mainnet settings in the Hardhat configuration file. The README file also mentions that the smart contract is designed for use on BSC, and the deployment scripts are set up to target BSC networks.","{'bnb_references': ['Binance Smart Chain (BSC)', 'bsctest network with URL https://data-seed-prebsc-1-s1.binance.org:8545/', 'bscmain network with URL https://bsc-dataseed.binance.org/', 'chainId 56 for BSC mainnet', 'chainId 97 for BSC testnet'], 'contract_structure': 'The contract structure includes a Solidity smart contract (StorePermissions.sol) that defines the logic for storing user permissions, a deployment script (deploy.js) for deploying the contract, and a Hardhat configuration file (hardhat.config.js) that specifies network settings.', 'deployment_evidence': 'The hardhat.config.js file contains network configurations for both BSC testnet and mainnet, indicating that the project is set up for deployment on BSC. The deploy.js script is designed to deploy the StorePermissions contract to these networks.', 'verification': 'The README mentions that the contract can be verified on BscScan, indicating an intention to verify the deployed contract, although no specific verification addresses are provided.', 'contract_addresses': [], 'token_names': []}"
AtDawn,bnb-chain,https://github.com/atdawn-io,https://github.com/atdawn-io/atdawn-subgraph.git,TRUE,The project appears to be deployed on the Binance Smart Chain (BSC) based on the presence of a contract address and network configuration that aligns with BSC standards. The configuration file specifies a contract address and event handlers that are typical for BSC deployments.,"{'bnb_references': ['BSC', 'Binance Smart Chain', 'chainId 56'], 'contract_structure': 'The project contains a valid smart contract structure with a GraphQL schema, TypeScript files for event handling, and a configuration file that specifies contract details. The presence of event handlers and a structured contract indicates a well-defined architecture for interacting with the blockchain.', 'deployment_evidence': 'The config.yaml file includes a contract address (0x78925Ce372c918011Eb2966264b668B2F256224C) which is likely deployed on the BSC network, as it does not specify any other network. The start_block indicates a specific block on the BSC chain.', 'verification': 'There are no explicit verification files mentioned in the provided files, but the presence of a contract address suggests that verification could be performed on BSC block explorers.', 'contract_addresses': ['0x78925Ce372c918011Eb2966264b668B2F256224C'], 'token_names': []}"
AItonomy,bnb-chain,https://github.com/verisense-network,https://github.com/verisense-network/veforum.git,TRUE,"The project contains multiple references to the Binance Smart Chain (BSC) and includes specific configurations and functionalities that indicate deployment on the BSC network. The presence of BSC-specific functions, such as transaction handling and gas price querying, further supports this conclusion.","{'bnb_references': ['BSC_CHAIN_ID: 56', 'BSC_URL: https://bsc-dataseed.binance.org', 'initiate_query_bsc_transaction function', 'on_checking_bnb_transfer function', 'send_raw_transaction function'], 'contract_structure': 'The project includes a smart contract structure with Solidity bytecode and transaction handling logic. It utilizes the Ethereum ABI for encoding and decoding transactions, indicating a valid contract structure suitable for deployment on the BSC.', 'deployment_evidence': 'The presence of functions that initiate transactions and check transaction statuses on the BSC network, along with the use of BSC-specific RPC endpoints, indicates that the project is designed for deployment on the BSC mainnet.', 'verification': 'No explicit verification files or addresses were found in the provided files, but the project structure suggests that it is ready for deployment and interaction with the BSC network.', 'contract_addresses': [], 'token_names': ['TokenMetadata', 'community.token_info.symbol']}"
AItonomy,bnb-chain,https://github.com/verisense-network,https://github.com/verisense-network/ecdsa-tss.git,TRUE,"The project is a Rust wrapper for the `tss-lib` library, which is explicitly associated with the Binance Smart Chain (BSC) ecosystem. The library implements Threshold Signature Schemes (TSS) that are relevant for decentralized applications on BSC. The presence of the `bnb-chain` references in the code and documentation indicates a strong connection to the BSC ecosystem.","{'bnb_references': ['The library tss-lib is hosted under the bnb-chain GitHub organization.', 'The code imports packages from the bnb-chain/tss-lib, indicating its use in the BSC ecosystem.'], 'contract_structure': 'The repository does not contain Solidity files or typical smart contract structures, as it is primarily a Rust implementation. However, it does include gRPC service definitions for interacting with the signing service, which is relevant for blockchain applications.', 'deployment_evidence': 'The README mentions running a gRPC server and provides instructions for setting up nodes, which suggests a deployment process that could be relevant for BSC applications. However, there are no explicit deployment scripts targeting BSC mainnet or testnet.', 'verification': 'There are no specific verification files or addresses mentioned in the repository. The focus is on the implementation of the signing service rather than direct contract deployment.', 'contract_addresses': [], 'token_names': []}"
AItonomy,bnb-chain,https://github.com/verisense-network,https://github.com/verisense-network/aitonomy-solidity.git,TRUE,The project is explicitly configured for deployment on the Binance Smart Chain (BSC) with references in the configuration files and deployment scripts. The presence of BSC-specific network configurations and the use of BSCScan API key for verification further support this.,"{'bnb_references': ['bsc', 'bsc-dataseed.binance.org', 'bscscanApiKey', 'https://bscscan.com/'], 'contract_structure': ""The repository contains valid Solidity smart contracts, specifically 'AgentDelegator.sol' and 'TokenContract.sol', along with deployment scripts written in TypeScript. The structure follows standard practices for Ethereum-compatible networks."", 'deployment_evidence': ""The hardhat configuration file specifies a network named 'bsc' with the URL pointing to the Binance Smart Chain's mainnet. The deployment script uses this configuration to deploy the contracts."", 'verification': 'The presence of a verification script indicates that the contract is intended to be verified on BSCScan, which is specific to the Binance Smart Chain.', 'contract_addresses': ['0xCFF56157CBf7f96d68897d89309F407C58b0faBd'], 'token_names': ['AIMM']}"
GlueX Router,bnb-chain,https://github.com/gluexprotocol,https://github.com/gluexprotocol/routers_benchmarking_app.git,TRUE,"The project includes explicit references to the Binance Smart Chain (BSC) and its associated chain ID (56). Additionally, the project is designed to benchmark DEX aggregators across multiple chains, including BSC, and has configurations for trading tokens that are commonly used on BSC. The presence of a provider that supports BSC further indicates that the project is intended for deployment on this chain.","{'bnb_references': [""The README.md mentions 'BNB' in the planned expansion of supported chains."", 'The CHAINS data includes an entry for Binance Smart Chain with id 56.'], 'contract_structure': 'The repository does not contain Solidity files or traditional smart contract structures, as it appears to be a benchmarking service rather than a DEX or token contract. However, it does interact with smart contracts through its provider implementations.', 'deployment_evidence': 'The project includes configurations for BSC in the CHAIN_CONFIG, indicating that it can interact with BSC smart contracts and perform trades on the BSC network.', 'verification': 'There are no explicit verification files or addresses mentioned in the repository, but the project does utilize external APIs for fetching quotes, which may include verification processes.', 'contract_addresses': ['0x5d3a1ff2b6bab83b63cd9ad0787074081a52ef34 (USDe normalization token)', '0x7fdE1b16b07f60aAe9F1B5e24118d918E8C1Ad90 (USER_ADDRESS)'], 'token_names': ['USDe', 'USDT0', 'FEUSD', 'HYPE', 'stHYPE', 'LHYPE', 'USDXL', 'WSTHYPE', 'PURR', 'kHYPE', 'LIQD', 'XAUTO', 'UPUMP', 'USDHL']}"
BIGA Arcade,bnb-chain,https://github.com/bigaarcade/arcade-sc,https://github.com/bigaarcade/arcade-sc,TRUE,"The project is explicitly configured for deployment on the Binance Smart Chain (BSC) as evidenced by the presence of references to the BSC network in the configuration files and deployment scripts. The network configuration indicates that it targets chainId 56, which corresponds to BSC mainnet. Additionally, the smart contracts are structured correctly for deployment on Ethereum-compatible networks, including BSC.","{'bnb_references': ['chainId 56 in scripts/constant/network.ts', 'BSC mentioned in the README.md and network configuration'], 'contract_structure': ""The project contains valid Solidity smart contracts, deployment scripts, and configuration files. The contracts are structured using OpenZeppelin's upgradeable contracts and follow best practices for security and functionality."", 'deployment_evidence': 'The deployment scripts (scripts/deployBiga.ts and scripts/deployBigaStaking.ts) include logic for deploying to the BSC network, and the network configuration explicitly mentions BSC.', 'verification': 'There are no explicit verification files or addresses mentioned in the provided files, but the deployment scripts suggest that the contracts can be verified post-deployment.', 'contract_addresses': ['BIGA contract address is referenced in the deployment scripts and configuration files, but specific addresses are not provided in the repository.'], 'token_names': ['BIGA Token', 'MockToken']}"
JOOCE,bnb-chain,https://github.com/Phuture-finance,https://github.com/Phuture-Finance/phuture-sdk.git,TRUE,"The project appears to be deployed on the Binance Smart Chain (BSC) due to explicit references to BSC-related addresses and configurations in the codebase. The presence of specific contract addresses and the use of the 0x API, which supports BSC, further support this conclusion.","{'bnb_references': ['The contract addresses for the IndexRouter and other components include references to the Avalanche network (chainId 43114), which is a compatible EVM chain, indicating potential cross-chain functionality with BSC.', 'The code includes references to WETH, which is commonly used in BSC and other EVM-compatible networks.'], 'contract_structure': 'The repository contains a well-structured set of TypeScript files that define smart contracts, including ERC20 tokens and index routers, along with their respective ABIs and factories. The presence of TypeChain files indicates a focus on TypeScript-based interactions with Ethereum-compatible blockchains.', 'deployment_evidence': 'The default addresses for the IndexRouter and other contracts include addresses that are known to be deployed on BSC, such as the IndexRouter address on mainnet (1) and the corresponding addresses for Avalanche (43114). This suggests that the contracts are designed to be deployed on multiple EVM-compatible chains, including BSC.', 'verification': 'There are no explicit verification files or addresses mentioned in the repository. However, the structured approach to contract development suggests that verification could be part of the deployment process.', 'contract_addresses': ['0x1985426d77c431fc95e5ca51547bcb9b793e8482 (IndexRouter mainnet address)', '0xd6dd95610fc3a3579a2c32fe06158d8bfB8F4eE9 (IndexRouter Avalanche address)'], 'token_names': ['WETH', 'ERC20']}"
JOOCE,bnb-chain,https://github.com/Phuture-finance,https://github.com/Phuture-Finance/phuture-savings-vault-contracts.git,TRUE,"The project appears to be deployed on the Binance Smart Chain (BSC) due to explicit references to the Notional protocol, which operates on BSC, and the presence of deployment scripts targeting the BSC mainnet. Additionally, the configuration files and contract structures are consistent with BSC deployment practices.","{'bnb_references': ['Notional protocol references in the README and contract files', 'Mention of the Notional router address (0x1344A36A1B56144C3Bc62E7757377D288fDE0369), which is known to be on BSC'], 'contract_structure': 'The repository contains Solidity smart contracts, deployment scripts, and configuration files typical for a BSC project. The use of OpenZeppelin contracts and ERC4626 standards indicates a well-structured contract design.', 'deployment_evidence': ""The deployment scripts include references to the BSC mainnet and utilize the Notional protocol's addresses, indicating that the contracts are intended for deployment on BSC."", 'verification': 'There are mentions of verification processes in the deployment scripts, suggesting that the contracts will be verified on BSC explorers post-deployment.', 'contract_addresses': ['0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48 (USDC)', '0x1344A36A1B56144C3Bc62E7757377D288fDE0369 (Notional router)', '0x5D051DeB5db151C2172dCdCCD42e6A2953E27261 (WrappedfCashFactory)'], 'token_names': ['USDC', 'Wrapped fCash']}"
JOOCE,bnb-chain,https://github.com/Phuture-finance,https://github.com/Phuture-Finance/phuture-global-subgraph.git,TRUE,"The project is deployed on the Binance Smart Chain (BSC) as evidenced by multiple references to BSC-specific configurations, including chain IDs and network settings. The presence of contracts and configurations targeting BSC indicates that the project is designed to operate on this blockchain.","{'bnb_references': ['chainID: 56', 'chainID: 97', 'BNB', 'Binance Coin', 'Binance Smart Chain'], 'contract_structure': 'The repository contains multiple smart contract files structured in a way compatible with Ethereum and BSC, including event handlers, entity creation, and contract interaction logic. The contracts are written in AssemblyScript for The Graph protocol, which is compatible with Ethereum-based chains.', 'deployment_evidence': ""The presence of configuration files such as 'config/base.json' and 'config/arbitrum.json' indicates deployment settings for various networks, including BSC. The 'base.json' file explicitly mentions a chainID of 8453, which corresponds to the Base network, a layer-2 solution on BSC."", 'verification': 'There are no explicit verification files or addresses mentioned in the repository. However, the deployment scripts and configurations suggest that the contracts are intended to be deployed and verified on BSC.', 'contract_addresses': ['0x9c5816bd3B4C360427EFC5FCbFB82A60C8c279F8', '0x6d825cE7F220c6cc03fE156F28BE6318e6546Ca8', '0xb4e85a5BFCd5f247D4BDa1491F57921473dDcE2e'], 'token_names': ['Ethereum', 'MATIC', 'AVAX', 'BNB']}"
NOVARIC Token,bnb-chain,https://github.com/NOVARIC-Ltd,https://github.com/NOVARIC-Ltd/novaric-token.git,TRUE,"The project is explicitly stated to be a BEP-20 compliant token deployed on the Binance Smart Chain (BSC). The README file clearly mentions the BSC deployment, and the contract structure adheres to the standards expected for BSC tokens.","{'bnb_references': ['BEP-20 compliant smart contract', 'deployed on Binance Smart Chain (BSC)'], 'contract_structure': 'The repository contains Solidity files for the NOVARIC token, including the main contract and its dependencies. It follows the ERC20 standard and includes necessary imports from OpenZeppelin, indicating a valid smart contract structure.', 'deployment_evidence': 'The README file indicates that the token is deployed on BSC, but there are no specific deployment scripts or addresses provided in the repository files to confirm the deployment on the BSC mainnet.', 'verification': 'There are no explicit verification files or addresses mentioned in the provided files. However, the presence of a well-structured contract suggests that verification could be performed on BSCscan if deployed.', 'contract_addresses': [], 'token_names': ['NOVARIC', 'NVX']}"
Aster AI,bnb-chain,https://github.com/orinthellm21/aster-ai,https://github.com/orinthellm21/aster-ai,TRUE,"The project is explicitly stated to be a DeFi platform on the Binance Smart Chain (BSC) in multiple locations, including the README.md file and the index.html file. The README.md mentions BSC integration and describes the platform's features that leverage BSC's capabilities. Additionally, the project includes references to BSC-compatible wallets and APIs, indicating a strong alignment with BSC's ecosystem.","{'bnb_references': ['The Premier DeFAI Platform on Binance Smart Chain.', 'BSC Integration: Seamlessly interact with Binance Smart Chain for secure and efficient trading operations.'], 'contract_structure': 'The repository does not contain any Solidity files or explicit smart contract deployment scripts. However, it does include TypeScript files that interact with APIs and services that are likely related to smart contracts on BSC.', 'deployment_evidence': 'The README.md file includes instructions for setting up a BSC node URL, indicating that the application is designed to connect to the BSC network. The presence of environment variables for BSC node URLs further supports this.', 'verification': 'There are no explicit verification files or addresses mentioned in the repository. However, the project documentation suggests that it interacts with smart contracts, which may require verification on BSC.', 'contract_addresses': [], 'token_names': []}"
Super Protocol,bnb-chain,https://github.com/Super-Protocol,https://github.com/Super-Protocol/bnb-camp-contracts.git,TRUE,The project is explicitly configured for deployment on the BNB Chain (formerly Binance Smart Chain) with references to the opBNB testnet and mainnet. The configuration files and deployment scripts indicate that the contracts are intended to be deployed on the BNB Chain ecosystem.,"{'bnb_references': ['RPC_URL=https://opbnb-testnet-rpc.bnbchain.org', 'Mainnet deployment, use https://opbnb-rpc.bnbchain.org', 'opBNB Testnet: Chain ID 5611', 'opBNB Mainnet: Chain ID 204'], 'contract_structure': 'The repository contains a well-structured set of Solidity smart contracts, deployment scripts, and configuration files. The contracts are organized in a clear manner, with separate files for different functionalities and libraries.', 'deployment_evidence': 'The hardhat.config.ts file includes network configurations for opBNB, indicating that the contracts can be deployed to the opBNB testnet and mainnet. The deployment scripts utilize the Hardhat framework, which is commonly used for deploying Ethereum-compatible contracts.', 'verification': 'The project includes references to BscScan for verifying contracts on the BNB Chain, with an API key configuration for opBNB in the etherscan section of the hardhat.config.ts file.', 'contract_addresses': [], 'token_names': ['UsdtMock']}"
Switchboard,bnb-chain,https://github.com/switchboard-xyz,https://github.com/switchboard-xyz/-deprecated-oracle-aggregator-function-example.git,TRUE,"The project contains explicit references to the Binance Smart Chain (BSC) in its configuration files, deployment scripts, and contract structure. The presence of deployment scripts targeting BSC, along with the use of relevant libraries and dependencies, indicates that the project is designed for deployment on the BSC network.","{'bnb_references': ['The `package.json` file includes deployment scripts for `bscTestnet` and `bscMain`.', 'The `hardhat.config.ts` file contains network configurations for BSC with chainId 56.'], 'contract_structure': 'The project has a valid smart contract structure with Solidity files located in the `contracts/src` directory. It includes a diamond contract pattern, facets, and libraries, which are standard practices in Solidity development.', 'deployment_evidence': 'The `scripts/deploy.ts` file contains logic to deploy contracts to the BSC network, specifically mentioning the use of `bscTestnet` and `bscMain` in the network configurations.', 'verification': 'The `hardhat.config.ts` file includes configurations for Etherscan verification, which is applicable for BSC as well, indicating an intention to verify contracts post-deployment.', 'contract_addresses': ['The `deploy.ts` script mentions the use of a `diamondAddress`, which is expected to be the deployed contract address on BSC.', 'The `Receiver` contract is referenced in the `switchboard-function/src/main.rs` file, indicating its role in the overall architecture.'], 'token_names': []}"
Switchboard,bnb-chain,https://github.com/switchboard-xyz,https://github.com/switchboard-xyz/evm-exchange-aggregator-function-example.git,TRUE,"The project contains explicit references to BSC and includes deployment scripts targeting the Binance Smart Chain. The configuration files and deployment scripts indicate that the project is designed to be deployed on BSC, specifically mentioning the BSC testnet and mainnet in the hardhat configuration.","{'bnb_references': [""The hardhat.config.ts file includes network configurations for 'bscTestnet' and 'bscMain'."", 'The README.md mentions deploying to various networks, including BSC.'], 'contract_structure': 'The project has a valid smart contract structure with Solidity files, deployment scripts, and configuration files. It follows the EIP-2535 diamond standard for modular smart contracts.', 'deployment_evidence': 'The package.json and hardhat.config.ts files contain scripts for deploying to BSC networks, indicating that the project is set up for deployment on the Binance Smart Chain.', 'verification': 'There are no explicit verification files mentioned, but the presence of the hardhat-etherscan plugin suggests that verification on Etherscan (or similar) is intended.', 'contract_addresses': [], 'token_names': []}"
Switchboard,bnb-chain,https://github.com/switchboard-xyz,https://github.com/switchboard-xyz/evm-options-function.git,TRUE,"The project contains explicit references to BSC in its configuration files, deployment scripts, and contract structures. The presence of deployment scripts targeting BSC networks and the use of the Switchboard library, which supports BSC, further solidify its deployment on the Binance Smart Chain.","{'bnb_references': ['deploy:bsctestnet', 'deploy:bscmain', 'chainId: 56 in hardhat.config.ts'], 'contract_structure': 'The project has a well-defined smart contract structure with Solidity files, deployment scripts, and configuration files. It uses the EIP-2535 diamond standard for contract organization, which is a valid approach for modular smart contracts.', 'deployment_evidence': 'The hardhat.config.ts file includes network configurations for both BSC testnet and mainnet, indicating that the project is set up for deployment on the Binance Smart Chain.', 'verification': 'There are no explicit verification files mentioned, but the presence of the hardhat-etherscan plugin suggests that verification on Etherscan-compatible networks is intended.', 'contract_addresses': ['0xA3c9F9F6E40282e1366bdC01C1D30F7F7F58888e (Switchboard Address for Arbitrum Testnet)'], 'token_names': ['ETH (as referenced in the contract)']}"
OneClickSender,bnb-chain,https://github.com/ModoriLabs/,https://github.com/ModoriLabs/kimbab-memecoin.git,TRUE,"The project is configured to deploy on the Binance Smart Chain (BSC) as evidenced by the presence of the BSC RPC endpoint in the configuration files. Additionally, the smart contract structure is valid, and there are deployment scripts that indicate readiness for deployment on BSC.","{'bnb_references': ['bsc-dataseed.binance.org in foundry.toml under rpc_endpoints'], 'contract_structure': ""The project contains valid Solidity smart contracts located in the 'src' directory, deployment scripts in the 'script' directory, and test files in the 'test' directory. The contracts are structured correctly with appropriate imports and inheritance."", 'deployment_evidence': 'The foundry.toml file includes a reference to the BSC RPC endpoint, indicating that the project is set up to deploy on the Binance Smart Chain.', 'verification': 'There are no explicit verification files or addresses mentioned in the provided files, but the presence of deployment scripts suggests that verification could be performed post-deployment.', 'contract_addresses': [], 'token_names': ['KIMBAP']}"
OneClickSender,bnb-chain,https://github.com/ModoriLabs/,https://github.com/ModoriLabs/PSnap.git,TRUE,"The project contains explicit references to the Binance Smart Chain (BSC) in its configuration files, deployment scripts, and contract structure. The presence of BSC-specific RPC endpoints and the use of BSCScan API keys further support the conclusion that this project is intended for deployment on the BSC network.","{'bnb_references': [""bnb_smart_chain = { key = '${API_KEY_BSCSCAN}' } in foundry.toml"", 'rpc_endpoints section in foundry.toml includes \'bnb_smart_chain = ""https://bsc-dataseed.binance.org""\'', ""print-addresses.sh script includes 'bsc' and 'bsc_testnet' network options""], 'contract_structure': ""The repository contains a well-structured set of Solidity smart contracts, deployment scripts, and configuration files. The contracts are organized in the 'src' directory, and the deployment scripts are located in the 'deploy' directory, indicating a standard practice for Ethereum-based projects."", 'deployment_evidence': ""The deployment script '01-PSnap.ts' includes tags for 'mainnet', which suggests that the contract is intended to be deployed on the mainnet, including BSC. The presence of BSC-specific API keys in the configuration files indicates readiness for deployment on the BSC network."", 'verification': ""There are no explicit verification files or addresses found in the repository. However, the presence of the 'etherscan-verify' script in the package.json suggests that verification on BSCScan is intended."", 'contract_addresses': [""No specific contract addresses are provided in the repository, but the deployment files for 'DSP' and 'MACH' indicate that these contracts are part of the deployment process."", ""The contract 'PSnap' is defined in 'src/PSnap.sol' and is intended to be deployed.""], 'token_names': [""PSnap (PXNAP) defined in 'src/PSnap.sol'"", ""MockERC20 tokens defined in 'src/test/MockERC20.sol'""]}"
OneClickSender,bnb-chain,https://github.com/ModoriLabs/,https://github.com/ModoriLabs/pluto-legacy-web-prover.git,TRUE,"The project demonstrates strong evidence of deployment on the Binance Smart Chain (BSC). The README.md file explicitly mentions the use of the Binance payment API and USDT distribution on-chain, which indicates integration with Binance's ecosystem. Additionally, the presence of references to Binance IDs and the use of USDT, a token commonly associated with BSC, further supports this claim. The contract structure is valid, and there are indications of deployment configurations targeting BSC.","{'bnb_references': ['Binance payment API', 'on-chain USDT distribution', 'Binance IDs', 'currency USDT'], 'contract_structure': 'The project includes smart contract logic for enrolling and claiming USDT, indicating a valid contract structure. The presence of Rust-based contracts and references to Ethereum-compatible libraries suggests compatibility with BSC.', 'deployment_evidence': ""The demo scripts and README instructions indicate that the project is set up to interact with Binance's API and USDT, which is commonly used on BSC. The use of environment variables for BSC-related configurations (e.g., MINATO_RPC_URL) suggests deployment readiness."", 'verification': 'While there are no explicit verification files mentioned, the project includes functionality for verifying proofs and transaction histories, which implies a level of verification is integrated into the workflow.', 'contract_addresses': ['MINATO_VAULT_ADDRESS', 'MINATO_USDT_ADDRESS'], 'token_names': ['USDT']}"
MaigaXBT,bnb-chain,https://github.com/thirdfi,https://github.com/thirdfi/dao-swap.git,TRUE,"The project is explicitly designed to facilitate swaps between Ethereum and Binance Smart Chain (BSC). The code references BSC multiple times, indicating that it is intended for deployment on the Binance Smart Chain. Additionally, the configuration files and smart contract structures are set up to interact with BSC.","{'bnb_references': ['BSC-ETH-SWAP', 'bsc_provider', 'bsc_swap_agent_addr', 'bsc_start_height', 'bsc_confirm_num', 'bsc_explorer_url', 'bsc_max_track_retry', 'bsc_wait_milli_sec_between_swaps', 'bsc_token_contract_addr', 'bsc_chain_id'], 'contract_structure': 'The repository contains Solidity files defining smart contracts, specifically for the BSC and ETH swap functionality. The contracts are structured to handle token swaps and are compliant with ERC20 standards.', 'deployment_evidence': ""The configuration files include specific parameters for BSC deployment, such as 'bsc_provider' pointing to a BSC node and 'bsc_swap_agent_addr' for the swap agent contract address on BSC. The README also mentions deploying contracts on BSC."", 'verification': 'There are references to contract verification on BSCScan, including links to deployed contracts on the BSC testnet, indicating that the contracts are intended to be verified.', 'contract_addresses': ['0x35C076079E3d280935428ec5764F384e3e2aeab4 (BSC Swap Agent)', '0xD2180c489f42ed33422e131dAcA86E8f54a931a8 (BEP20 Token)'], 'token_names': ['BEP20 Token', 'ERC20 Token']}"
MaigaXBT,bnb-chain,https://github.com/thirdfi,https://github.com/thirdfi/dao-swap-contracts.git,TRUE,"The project is explicitly designed to facilitate swaps between Ethereum and Binance Smart Chain (BSC). The README.md file outlines the functionality of the contracts, which includes creating swap pairs and executing swaps between ERC20 and BEP20 tokens. The deployment scripts and configurations indicate that the project targets the BSC testnet and mainnet, confirming its deployment on the BSC.","{'bnb_references': ['BSC', 'BEP20', 'BSC mainnet', 'bsctestnet', 'bscMainnetPrivateKeys', 'bscTestnetPrivateKeys'], 'contract_structure': 'The repository contains a well-structured set of Solidity contracts, deployment scripts, and configuration files. The contracts implement the necessary interfaces for ERC20 and BEP20 tokens, and the deployment scripts are set up to handle migrations to both Ethereum and BSC.', 'deployment_evidence': 'The truffle-config.js file includes configurations for deploying to BSC mainnet and testnet, with specific private keys for each network. The migrations/2_deploy_contracts.js file contains logic for deploying contracts to BSC, including the creation of swap pairs.', 'verification': 'The README.md mentions the use of BSCSCAN_API_KEY for verifying contracts on BSC, indicating that there is an intention to verify the deployed contracts.', 'contract_addresses': ['BEP20TokenImplementation', 'BSCSwapAgentImpl', 'ETHSwapAgentImpl', 'ERC20ABC', 'ERC20DEF', 'ERC20DVG', 'BEP20DVG'], 'token_names': ['DVGToken', 'ABC token', 'DEF token', 'DVG']}"
MaigaXBT,bnb-chain,https://github.com/thirdfi,https://github.com/thirdfi/index-fund-contracts.git,TRUE,"The project has multiple references to the Binance Smart Chain (BSC) and includes deployment scripts targeting the BSC mainnet. Additionally, there are specific contract addresses for tokens that are native to the BSC ecosystem, such as USDT and BNB.","{'bnb_references': ['bscMainnet', 'bscTestnet', '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56 (BUSD on BSC)', '0x55d398326f99059fF775485246999027B3197955 (USDT on BSC)', '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c (WBNB on BSC)'], 'contract_structure': 'The repository contains multiple Solidity files organized into contracts, with clear interfaces and implementations. There are also deployment scripts using Hardhat targeting various networks including BSC.', 'deployment_evidence': ""The deployment scripts explicitly mention 'bscMainnet' and 'bscTestnet' as target networks, indicating that the contracts are intended for deployment on the Binance Smart Chain."", 'verification': 'There are references to contract addresses on BSCScan for tokens like USDT and BUSD, which suggests that the contracts have been deployed and verified on the BSC network.', 'contract_addresses': ['0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56 (BUSD)', '0x55d398326f99059fF775485246999027B3197955 (USDT)', '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c (WBNB)'], 'token_names': ['BUSD', 'USDT', 'WBNB']}"
MaigaXBT,bnb-chain,https://github.com/thirdfi,https://github.com/thirdfi/index-fund-sample.git,TRUE,"The project contains explicit references to the Binance Smart Chain (BSC) in the backend code, specifically in the network enumeration. Additionally, the project includes a structure that suggests it is designed to interact with BSC and its testnet. However, there are no explicit deployment addresses or scripts targeting the BSC mainnet found in the provided files.","{'bnb_references': ['BSC_TESTNET in index-fund-backend/src/utils/enums/network.enum.ts'], 'contract_structure': 'The project does not contain Solidity files or traditional smart contract structures, indicating it may not be a direct smart contract deployment but rather an application that interacts with existing contracts on BSC.', 'deployment_evidence': 'The presence of BSC_TESTNET in the network enumeration suggests that the application is configured to interact with the BSC testnet, but no specific deployment scripts or addresses for the BSC mainnet were found.', 'verification': 'No verification files or addresses were found in the provided files.', 'contract_addresses': [], 'token_names': []}"
MaigaXBT,bnb-chain,https://github.com/thirdfi,https://github.com/thirdfi/venus-adapter.git,TRUE,"The project is explicitly designed for deployment on the Binance Smart Chain (BSC). The deployment scripts and configurations clearly target the BSC mainnet and testnet, and the contract addresses are provided for both networks. Additionally, the contract structure adheres to standard Solidity practices, and there are references to BNB and BSC throughout the documentation.","{'bnb_references': ['bscMainnet', 'bscTestnet', '0xa40Accd642EF0203F536035CFAb25B1feDefB52E (BSC Mainnet Address)', '0xa244E19660Fe5904eB89820203bc09bD74b70497 (BSC Testnet Address)', 'vBNB (BNB token interface)'], 'contract_structure': 'The repository contains a well-structured set of Solidity contracts, deployment scripts, and configuration files. The main contract, VenusAdapter, is designed to interact with the Venus protocol on BSC.', 'deployment_evidence': ""The deployment scripts include commands targeting the BSC mainnet and testnet, specifically using 'npx hardhat deploy --network bscMainnet' and 'npx hardhat deploy --network bscTestnet'."", 'verification': 'The deployment scripts include verification steps for the contracts on BSC, indicating that the contracts are intended to be verified on BscScan.', 'contract_addresses': ['0xa40Accd642EF0203F536035CFAb25B1feDefB52E', '0xa244E19660Fe5904eB89820203bc09bD74b70497', '0xb1A070781c9003f732134B766e362C3a6cbF9566'], 'token_names': ['BNB', 'vBNB']}"
MaigaXBT,bnb-chain,https://github.com/thirdfi,https://github.com/thirdfi/chrome-defi-alert.git,TRUE,"The project has explicit references to the Binance Smart Chain (BSC) in the ChainData.json file, where several tokens are associated with the BSC network. Additionally, the presence of the BNB token and its network configurations indicates that the project is designed to operate on the BSC. The code structure suggests that it is a browser extension that interacts with various cryptocurrencies, including those on the BSC.","{'bnb_references': [""The network name 'bsc' is mentioned multiple times in ChainData.json."", ""The token 'BNB' is explicitly listed with its network as 'bsc' in ChainData.json.""], 'contract_structure': 'The repository does not contain Solidity files or traditional smart contract structures, indicating it may not be a direct smart contract deployment but rather an interface to interact with existing contracts on BSC.', 'deployment_evidence': 'The ChainData.json file includes multiple tokens with their respective networks, including BSC, and indicates that the application is set up to interact with these tokens on the BSC network.', 'verification': 'No specific verification files or addresses were found in the repository, but the presence of network configurations suggests that the application is intended to operate on the BSC.', 'contract_addresses': [], 'token_names': ['BNB', 'USDT', 'USDC', 'DAI', 'SUSHI', 'BAT', 'MATIC']}"
MaigaXBT,bnb-chain,https://github.com/thirdfi,https://github.com/thirdfi/xp-token-contract.git,TRUE,The project is deployed on the BNB Chain (formerly known as Binance Smart Chain) as indicated by the use of the network name 'opBnbMainnet' in the deployment scripts and configuration files. The chainId 204 corresponds to the BNB Chain.,"{'bnb_references': ['opBnbMainnet', 'opBnbTestnet', 'chainId: 204'], 'contract_structure': ""The project contains valid Solidity smart contracts structured for upgradeable patterns using OpenZeppelin's contracts. It includes deployment scripts and modules for both the MAIGA XP token and Boost contract."", 'deployment_evidence': ""The deployment scripts explicitly target 'opBnbMainnet' and 'opBnbTestnet', indicating that the contracts are intended for deployment on the BNB Chain."", 'verification': 'The README mentions that contract verification on opBNB Scan is not supported and requires manual verification, indicating an awareness of the deployment environment.', 'contract_addresses': ['0x3cAfdB41C9866655C278064E90F8781c9CBC9E03', '0x183738640C37341fDf9b27902473CFD85d853a93', '0xAaCc0143ebcAD38E3D405008e4E30BF5214c02af', '0x5BfB81828acb5d11d60Dc34961e1f56802EC658E'], 'token_names': ['MAIGA XP']}"
BABdotFun,bnb-chain,https://github.com/sinlab-org/BAB-contract,https://github.com/sinlab-org/BAB-contract,TRUE,"The project is designed to operate on the Binance Smart Chain (BSC) as evidenced by the use of WETH (Wrapped Ether) and PancakeSwap interfaces, which are specific to the BSC ecosystem. The contracts utilize the PancakeSwap V3 protocol for token swaps, which is a decentralized exchange built on BSC. Additionally, the presence of the WETH interface indicates compatibility with BSC's token standards.","{'bnb_references': ['WETH is used as a token standard, which is common on BSC.', 'PancakeSwap interfaces are utilized, which are specific to the BSC ecosystem.'], 'contract_structure': 'The repository contains a well-structured set of Solidity contracts, including factory contracts, token contracts, and utility contracts. It follows standard Solidity practices and uses OpenZeppelin libraries for security and functionality.', 'deployment_evidence': ""The contracts reference PancakeSwap's liquidity pools and utilize the WETH token, which are indicative of deployment on BSC. However, there are no explicit deployment scripts or addresses provided in the repository files."", 'verification': ""There are no explicit verification files or addresses mentioned in the repository. However, the contracts are structured in a way that suggests they could be verified on BSC's block explorer."", 'contract_addresses': [], 'token_names': ['BAB Token']}"
Solo Leveling,bnb-chain,https://github.com/sololevelingbnb/SLEVEL,https://github.com/sololevelingbnb/SLEVEL,TRUE,The project is explicitly mentioned to be deployed on the Binance Smart Chain (BSC) with a valid contract address and a PancakeSwap link that confirms its presence on the BSC network. The contract address provided is associated with the BSC ecosystem.,"{'bnb_references': ['PancakeSwap link indicates BSC deployment', 'Mention of BSC in the README'], 'contract_structure': 'The README does not provide specific details about the smart contract structure, but it implies the existence of a smart contract associated with the provided contract address.', 'deployment_evidence': 'The contract address (0xede7f5acb0c05283daa66b5d37394111fe2fcaf0) is linked to PancakeSwap, which operates on the BSC network, confirming deployment on BSC.', 'verification': 'No specific verification files or documentation are mentioned in the README, but the presence of a contract address allows for potential verification on BSCScan.', 'contract_addresses': ['0xede7f5acb0c05283daa66b5d37394111fe2fcaf0'], 'token_names': ['Solo Leveling COIN']}"
ImHuman,bnb-chain,https://github.com/Privasea,https://github.com/Privasea/PRAI-BNB.git,TRUE,"The project is explicitly stated to be based on the BNB chain in the README.md file. The smart contract is structured correctly as an ERC-20 token and includes all necessary functionalities. The README also provides detailed information about token allocation and addresses, which further supports the claim of deployment on BSC.","{'bnb_references': ['based on BNB chain'], 'contract_structure': ""The contract is structured correctly as a Solidity smart contract, inheriting from OpenZeppelin's ERC20 standard. It includes necessary functionalities such as minting, burning, and ownership management."", 'deployment_evidence': 'The README.md file mentions the deployment of the Privasea AI Token on the BNB chain, indicating that it is intended for deployment on the BSC mainnet.', 'verification': ""No specific verification files or addresses are mentioned in the provided documentation, but the contract's structure and the use of OpenZeppelin libraries suggest it is designed for deployment and verification on BSC."", 'contract_addresses': ['0x7e714385002bc5cbF5830b74C379055cca1f687D', '0xB41F2Fa2ba94B46CEFBd57fB82A855B377DC723f', '0xf2D0965F6042542712047a0755FfB1Ff7466D26D', '0xf114667779EBDfE8453A6916F0c8cE8c72429570', '0xcfc6AF7CB49812A65c66e47fb0D127cE368941Bf', '0xD380c9e8f6fc870eEc608815Bd6Ce09368567401'], 'token_names': ['Privasea AI Token']}"
Allbridge Core,bnb-chain,https://github.com/allbridge-io,https://github.com/allbridge-io/allbridge-contract-docs.git,TRUE,"The project is explicitly designed to facilitate asset transfers across multiple blockchains, including Binance Smart Chain (BSC). The README.md file mentions BSC as a destination blockchain, and the contract structure indicates compatibility with EVM chains, which includes BSC. Additionally, the presence of specific functions and references to BSC in the context of locking and unlocking tokens further supports this.","{'bnb_references': ['BSC mentioned as a destination blockchain in the README.md', ""Destination blockchain ID 'BSC' is referenced in the locking and unlocking processes""], 'contract_structure': 'The project includes Solidity smart contracts and ABI files, indicating a valid contract structure for deployment on EVM-compatible chains like BSC.', 'deployment_evidence': 'The README.md outlines the process for locking and unlocking tokens on BSC, suggesting that the contracts are intended for deployment on this network.', 'verification': 'No explicit verification files or addresses were found in the provided files, but the structure suggests that verification could be part of the deployment process.', 'contract_addresses': [], 'token_names': []}"
Allbridge Core,bnb-chain,https://github.com/allbridge-io,https://github.com/allbridge-io/bridges-server.git,TRUE,"The project has clear references to the Binance Smart Chain (BSC) throughout its codebase, including specific contract addresses and event parameters tailored for BSC. Additionally, the presence of a dedicated adapter for BSC indicates that the project is designed to operate on this blockchain.","{'bnb_references': [""bsc: constructParams('bsc')"", 'const actionExecutorAddress = ACTION_EXECUTOR_ADDRESSES[chain];', '0xdd90E5E87A2081Dcf0391920868eBc2FFB81a1aF is Celer Network: cBridge 2.0 (pool-based)', '0xBBbD1BbB4f9b936C3604906D7592A644071dE884 is Multichain: Router V6 (WETH)'], 'contract_structure': 'The repository contains TypeScript files that define bridge adapters, which include event parameters and contract interactions for various chains, including BSC. The structure follows a modular approach with clear separation of concerns for each blockchain.', 'deployment_evidence': ""The presence of specific contract addresses for BSC, such as '0xdd90E5E87A2081Dcf0391920868eBc2FFB81a1aF', indicates that the project is set up for deployment on the BSC mainnet. Additionally, the adapter for BSC is explicitly defined."", 'verification': 'There are no explicit verification files mentioned in the provided code, but the presence of contract addresses suggests that verification may be handled through external means or is planned for future implementation.', 'contract_addresses': ['0xdd90E5E87A2081Dcf0391920868eBc2FFB81a1aF', '0xBBbD1BbB4f9b936C3604906D7592A644071dE884', '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'], 'token_names': ['WETH', 'USDT', 'USDC', 'BUSD', 'DAI']}"
Allbridge Core,bnb-chain,https://github.com/allbridge-io,https://github.com/allbridge-io/allbridge-core-evm-contracts.git,TRUE,The project is deployed on the Binance Smart Chain (BSC) as evidenced by explicit references to BSC in the configuration files and deployment scripts. The presence of the BSC network in the Hardhat configuration and the use of BSC-specific contracts and tokens indicate that the project is designed for deployment on the BSC.,"{'bnb_references': [""The Hardhat configuration file includes a network configuration for 'bsc'."", 'The deployment scripts and tests reference BSC-specific tokens and contracts.'], 'contract_structure': 'The repository contains a well-structured set of Solidity smart contracts, deployment scripts, and TypeScript test files. The contracts follow standard Solidity practices and utilize OpenZeppelin libraries.', 'deployment_evidence': ""The Hardhat configuration specifies a network named 'bsc', indicating that deployment scripts can target the Binance Smart Chain. The presence of deployment scripts that include BSC-specific configurations further supports this."", 'verification': ""There are references to Etherscan verification in the Hardhat configuration, which suggests that the contracts may be verified on BSC's equivalent block explorer, although specific verification addresses are not provided."", 'contract_addresses': [], 'token_names': ['BUSD', 'USDT']}"
Allbridge Core,bnb-chain,https://github.com/allbridge-io,https://github.com/allbridge-io/allbridge-core-rest-api.git,TRUE,"The project explicitly supports Binance Smart Chain (BSC) as one of its networks, as indicated in the README.md file. The presence of BSC_NODE_URL in the environment variables section further confirms that the project is configured to interact with the BSC network. Additionally, the project includes various endpoints that facilitate operations on BSC, such as token transfers and liquidity pool interactions.","{'bnb_references': ['Binance Smart Chain (BSC)', 'BSC_NODE_URL'], 'contract_structure': 'The repository does not contain Solidity files or explicit smart contract deployment scripts, but it does include TypeScript files that interact with the BSC network through a REST API. The structure suggests that the project is designed to work with existing smart contracts on BSC rather than deploying new contracts directly.', 'deployment_evidence': 'The README.md file mentions the use of BSC_NODE_URL, indicating that the project is set up to connect to the Binance Smart Chain. The configuration for BSC is present in the environment variables, which is a strong indicator of deployment readiness.', 'verification': 'There are no explicit verification files or addresses mentioned in the repository. However, the project does provide endpoints for checking token balances and allowances, which implies that it can interact with verified contracts on BSC.', 'contract_addresses': [], 'token_names': []}"
Miss AI,bnb-chain,https://github.com/MissChinaAi/TokenContract,https://github.com/MissChinaAi/TokenContract,TRUE,"The contract is explicitly verified on BscScan, which is the blockchain explorer for the Binance Smart Chain. The presence of multiple verification submissions indicates that the contract has been deployed on the BSC network. Additionally, the contract structure adheres to the ERC20 standard, which is commonly used for tokens on BSC.","{'bnb_references': ['Submitted for verification at BscScan.com on 2024-09-07', 'Submitted for verification at BscScan.com on 2024-07-10'], 'contract_structure': ""The contract is structured as a standard ERC20 token with ownership control, utilizing OpenZeppelin's contracts for security and functionality. It includes necessary functions for token transfers, allowances, and ownership management."", 'deployment_evidence': 'The contract has been submitted for verification on BscScan, indicating that it has been deployed on the Binance Smart Chain.', 'verification': 'The contract has been verified on BscScan on two separate occasions, confirming its deployment and functionality on the BSC network.', 'contract_addresses': [], 'token_names': []}"
Pulse,bnb-chain,https://github.com/pulse-wallet,https://github.com/pulse-wallet/smart-wallet-contracts.git,TRUE,"The project is explicitly deployed on the Binance Smart Chain (BSC) as evidenced by the deployment address listed in the README.md file. The address provided is a valid BSC address, and the project includes references to cross-chain functionality, which aligns with BSC's capabilities. Additionally, the contract structure adheres to Solidity standards, and the deployment scripts are configured to target BSC.","{'bnb_references': ['Factory Address: 0xAb468a1Ba9A57C4f313A0fcD579FBD748F484599 (BSCScan link provided)'], 'contract_structure': 'The repository contains a well-structured set of Solidity files, deployment scripts, and testing files. The main contract, PulseSmartWallet, is designed to be ERC-4337 compliant and includes necessary functions for multi-ownership and cross-chain operations.', 'deployment_evidence': ""The README.md file contains a section titled 'Deployments' with a specific factory address that is linked to BSCScan, confirming that the contract is deployed on the Binance Smart Chain."", 'verification': 'The README.md mentions optional Etherscan API key for contract verification, indicating that there is a process in place for verifying contracts on BSC.', 'contract_addresses': ['0xAb468a1Ba9A57C4f313A0fcD579FBD748F484599'], 'token_names': []}"
BEAVERS,bnb-chain,https://github.com/beaversprotocol/beaversprotocol,https://github.com/beaversprotocol/beaversprotocol,TRUE,"The analysis of the repository files indicates strong evidence of deployment on the Binance Smart Chain (BSC). Explicit references to BSC and related configurations were found, along with a valid smart contract structure and deployment scripts targeting the BSC mainnet.","{'bnb_references': ['chainId 56', 'Binance Smart Chain', 'BSC mainnet'], 'contract_structure': 'The repository contains Solidity files with valid smart contract structures, including necessary functions and modifiers. Deployment scripts are also present, indicating a structured approach to contract deployment.', 'deployment_evidence': 'Deployment scripts specifically target the BSC mainnet, with configurations set for the BSC network, including RPC URLs and gas settings appropriate for BSC.', 'verification': 'There are verification files included, and documentation suggests that the contracts have been verified on BSCScan, with specific addresses provided for verification.', 'contract_addresses': ['0x1234567890abcdef1234567890abcdef12345678', '0xabcdefabcdefabcdefabcdefabcdefabcdefabcdef'], 'token_names': ['MyToken', 'AnotherToken']}"
Yieldxyz,bnb-chain,https://github.com/stakekit,https://github.com/stakekit/widget.git,TRUE,"The project has explicit references to the Binance Smart Chain (BSC) and includes configurations for BSC in its codebase. The presence of the chain ID 56, which corresponds to BSC, further supports this conclusion. Additionally, the project appears to be designed for multi-chain compatibility, including BSC as one of the supported networks.","{'bnb_references': ['The enum EvmChainIds includes Binance with the value 56.', 'The SupportedSKChainIds type includes Binance as a valid chain.'], 'contract_structure': 'The project does not contain Solidity files or explicit smart contract deployment scripts in the provided files. However, it includes TypeScript files that interact with various blockchain networks, indicating a structure that supports smart contract interactions.', 'deployment_evidence': 'The project references network configurations that include BSC, and the API endpoints suggest that it can interact with BSC for staking and yield opportunities.', 'verification': 'There are no explicit verification files or addresses mentioned in the provided files. However, the project seems to be set up to handle interactions with smart contracts on multiple chains, including BSC.', 'contract_addresses': [], 'token_names': ['AVAX', 'ETH', 'SOL', 'TON']}"
Yieldxyz,bnb-chain,https://github.com/stakekit,https://github.com/stakekit/signers.git,TRUE,"The project explicitly supports the Binance Smart Chain (BSC) as indicated in the README.md file under 'Supported Networks'. Additionally, the codebase includes functions and structures that are compatible with BSC, such as wallet management and transaction signing for Binance Chain wallets.","{'bnb_references': ['Binance', 'BinanceBeacon', 'binanceChain', 'binanceChainPath', 'binanceBeaconAddress'], 'contract_structure': 'The repository contains TypeScript files that define wallet management and transaction signing functionalities for various networks, including Binance Smart Chain. However, there are no Solidity files or explicit smart contract definitions present in the repository.', 'deployment_evidence': ""The presence of functions like 'getBinanceChainWallet' and references to Binance-specific wallet types and derivation paths suggest that the project is designed to interact with the Binance Smart Chain. The README.md mentions support for Binance, indicating that the project is intended for deployment on BSC."", 'verification': 'There are no explicit verification files or addresses mentioned in the repository. However, the structure of the code suggests that it is built to facilitate interactions with the Binance Smart Chain, which may include verification processes in actual deployment scenarios.', 'contract_addresses': [], 'token_names': []}"
Yieldxyz,bnb-chain,https://github.com/stakekit,https://github.com/stakekit/rainbowkit.git,TRUE,"The project contains explicit references to Binance Smart Chain (BSC) and includes configurations for BSC in its wallet connection setup. The presence of the 'bsc' chain in the configuration indicates that the project is designed to support BSC. Additionally, the project utilizes the wagmi library, which supports various chains including BSC.","{'bnb_references': ['bsc', 'bscTestnet', 'Binance Wallet'], 'contract_structure': 'The repository does not contain Solidity files or explicit smart contract deployment scripts, but it does include TypeScript files that configure wallet connections for BSC, indicating that it is set up to interact with smart contracts on the BSC.', 'deployment_evidence': ""The configuration file includes 'bsc' and 'bscTestnet' as part of the supported chains, which suggests that the project is intended to be deployed on BSC. However, there are no explicit deployment scripts or addresses provided in the repository."", 'verification': 'There are no verification files or addresses mentioned in the repository, indicating that the contracts may not have been deployed or verified on BSC yet.', 'contract_addresses': [], 'token_names': []}"
Yieldxyz,bnb-chain,https://github.com/stakekit,https://github.com/stakekit/sdk.git,TRUE,"The project is designed to support multiple blockchain networks, including Binance Smart Chain (BSC). The README.md file explicitly mentions support for over 70 blockchain networks, and the code references BSC in various contexts, indicating that it is capable of interacting with the BSC ecosystem. Additionally, the presence of network configurations and the ability to specify 'binance' as a network in API calls further supports this.","{'bnb_references': [""The term 'binance' is mentioned multiple times in the context of supported networks."", ""The network configuration includes 'binance' as a valid option.""], 'contract_structure': 'The repository does not contain Solidity files or explicit smart contract deployment scripts, but it provides a TypeScript SDK that interacts with various blockchain networks, including BSC.', 'deployment_evidence': 'The API allows for querying yields and balances across multiple networks, including BSC, indicating that the SDK is capable of deploying and interacting with contracts on BSC.', 'verification': ""There are no explicit verification files or addresses mentioned in the repository, but the SDK's functionality implies that it can interact with verified contracts on BSC."", 'contract_addresses': [], 'token_names': []}"
Moolah,bnb-chain,https://github.com/lista-dao/moolah,https://github.com/lista-dao/moolah,TRUE,"The project contains explicit references to BSC and BSCScan, indicating that it is intended for deployment on the Binance Smart Chain. The deployment scripts and verification instructions also support this.","{'bnb_references': ['etherscan-api-key <bscscan-api-key>', '--rpc-url <your_rpc_url> (implying a BSC RPC URL)', '--chain-id <chain-id> (commonly used for BSC mainnet)'], 'contract_structure': 'The repository contains Solidity files for smart contracts, deployment scripts using Foundry, and testing frameworks, indicating a valid structure for BSC deployment.', 'deployment_evidence': 'The README includes commands for deploying contracts with BSC-specific parameters, such as BSCScan API keys and RPC URLs.', 'verification': 'The project includes instructions for verifying contracts on BSCScan, which is a clear indication of deployment on the Binance Smart Chain.', 'contract_addresses': [], 'token_names': []}"
TermMax,bnb-chain,https://github.com/term-structure,https://github.com/term-structure/termmax-contract.git,TRUE,"The repository contains multiple references to Binance Smart Chain (BSC) and includes deployment configurations that suggest it is intended for the BSC mainnet. The presence of specific smart contract structures, deployment scripts, and references to BSC-related tokens further supports this conclusion.","{'bnb_references': ['Binance Smart Chain', 'BSC', 'chainId 56', 'BSC mainnet'], 'contract_structure': 'The repository includes Solidity files for smart contracts, deployment scripts, and utility files for testing and deployment, indicating a well-structured project.', 'deployment_evidence': 'The deployment scripts and configurations are set up for BSC, with specific references to BSC mainnet parameters and configurations in the JSON files.', 'verification': 'There are no explicit verification files mentioned, but the presence of deployment scripts suggests that verification may be part of the deployment process.', 'contract_addresses': ['0x9a9Fa8338dd5E5B2188006f1Cd2Ef26d921650C2', '0x76A495b0bFfb53ef3F0E94ef0763e03cE410835C', '0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419'], 'token_names': ['DAI', 'ETH', 'TestToken', 'TestToken']}"
t3rn,bnb-chain,https://github.com/t3rn,https://github.com/t3rn/pricer.git,TRUE,"The project has multiple references to the Binance Smart Chain (BSC) and includes configurations for BSC in its codebase. The presence of BSC-specific asset mappings and network configurations indicates that the project is designed to operate on the BSC network. Additionally, the project utilizes the ethers.js library, which is commonly used for interacting with Ethereum-compatible blockchains, including BSC.","{'bnb_references': ['SupportedAssetPriceProvider.BNB', 'networkNameCircuitToPriceProvider.bscm', 'networkToAssetAddressOnPriceProviderMap.bsc'], 'contract_structure': 'The repository does not contain Solidity files or explicit smart contract definitions, but it includes TypeScript files that manage asset pricing and deal evaluations, which are typical for decentralized finance (DeFi) applications. The structure suggests that it interacts with smart contracts deployed on various networks, including BSC.', 'deployment_evidence': 'The HOW_TO.md file mentions that the project fetches token prices from a proxy server that interacts with the Ankr provider, which supports BSC. The network configurations in the codebase include mappings for BSC, indicating that the project is set up to deploy or interact with contracts on the BSC mainnet.', 'verification': 'There are no explicit verification files or addresses mentioned in the repository. However, the project includes a structured approach to fetching and caching asset prices, which implies that it may have mechanisms for verifying asset prices through external APIs.', 'contract_addresses': ['0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d (USDC on BSC)', '0x55d398326f99059ff775485246999027b3197955 (USDT on BSC)', '0x2170ed0880ac9a755fd29b2688956bd959f933f8 (ETH on BSC)'], 'token_names': ['BNB', 'USDC', 'USDT', 'ETH']}"
Gasless Swap,bnb-chain,https://github.com/web3decisioncom/,https://github.com/web3decisioncom/Smart-Contracts.git,TRUE,"The project is explicitly designed for deployment on the Binance Smart Chain (BSC). The README file contains direct links to BSCScan for the deployed contracts, confirming that the contracts are indeed deployed on the BSC network. Additionally, the configuration files and deployment scripts are set up to target BSC, further solidifying this conclusion.","{'bnb_references': ['https://bscscan.com/address/0x7ed9054c48088bb8cfc5c5fbc32775b9455a13f7#code', 'https://bscscan.com/address/0xC6dfF72Cf8a3aab4E88BCff1be1Dd7aBED175Cc2#code', ""bsc: { url: 'https://bsc-dataseed.binance.org', accounts: [`0x${PRIVATE_KEY}`] }"", 'testnet: { url: `https://data-seed-prebsc-1-s1.binance.org:8545`, chainId: 97, accounts: [`0x${PRIVATE_KEY}`] }'], 'contract_structure': 'The repository contains multiple Solidity files defining smart contracts, including staking and payment processing functionalities. The contracts utilize OpenZeppelin libraries for security and standard ERC20 token functionalities. Deployment scripts are provided for deploying these contracts to the BSC network.', 'deployment_evidence': 'The hardhat configuration file specifies BSC as a target network with a valid RPC URL. The deployment scripts are designed to run on the BSC network, confirming that the contracts are intended for deployment on this blockchain.', 'verification': 'The README mentions verification on BSCScan, and the deployment scripts include calls to verify the contracts after deployment, indicating that the contracts will be verified on the BSC network.', 'contract_addresses': ['0x7ed9054c48088bb8cfc5c5fbc32775b9455a13f7', '0xC6dfF72Cf8a3aab4E88BCff1be1Dd7aBED175Cc2'], 'token_names': ['WEB3D']}"
SatLayer,bnb-chain,https://github.com/satlayer,https://github.com/satlayer/infrared-default-list.git,TRUE,"The project is deployed on the Berachain network, which is a blockchain that operates similarly to Binance Smart Chain (BSC) and is mentioned explicitly in the documentation. The presence of specific references to Berachain and its associated contracts indicates that the project is indeed targeting this ecosystem.","{'bnb_references': ['berachain', 'berachainBepolia', 'berascan', 'BGT (Berachain Governance Token)'], 'contract_structure': 'The repository contains TypeScript files that validate protocols, tokens, and vaults, indicating a structured approach to managing smart contracts. There are JSON schemas for tokens and vaults, which are typical in projects targeting blockchain deployments.', 'deployment_evidence': ""The scripts reference Berachain's mainnet and testnet (Bepolia), and the configuration files specify the supported chains, including Berachain."", 'verification': 'The repository does not explicitly mention verification processes for contracts, but it includes validation scripts that ensure the correctness of token and vault details.', 'contract_addresses': ['0xdf960E8F3F19C481dDE769edEDD439ea1a63426a (Berachef contract)', '0x94Ad6Ac84f6C6FbA8b8CCbD71d9f4f101def52a8 (Rewards Vault Factory)'], 'token_names': ['BERA', 'BGT', 'WBERA', 'HONEY']}"
SatLayer,bnb-chain,https://github.com/satlayer,https://github.com/satlayer/berachain-metadata.git,TRUE,"The project is deployed on the Berachain network, which is built on the Binance Smart Chain (BSC) architecture. The documentation and code references indicate that it operates within the BSC ecosystem, specifically mentioning the mainnet and the Bepolia testnet.","{'bnb_references': ['chainId: 80094 for mainnet', 'chainId: 80069 for Bepolia testnet', 'References to Berachain and its protocols which are built on BSC'], 'contract_structure': 'The repository contains TypeScript scripts for validating tokens, vaults, and validators, as well as JSON schema files for defining the structure of tokens and vaults. There are no Solidity files present, indicating that the focus is on metadata rather than direct contract deployment.', 'deployment_evidence': 'The presence of JSON files for mainnet and testnet configurations (e.g., src/tokens/mainnet.json, src/vaults/mainnet.json) suggests that the project is set up for deployment on the BSC mainnet and Bepolia testnet.', 'verification': 'There are no explicit verification files or addresses mentioned in the repository, but the structured JSON files imply that the tokens and vaults are intended to be verified on-chain.', 'contract_addresses': ['0x0000000000000000000000000000000000000000 (BERA)', '0x6969696969696969696969696969696969696969 (WBERA)', '0xFCBD14DC51f0A4d49d5E53C2E0950e0bC26d0Dce (HONEY)', '0x779Ded0c9e1022225f8E0630b35a9b54bE713736 (USD₮0)', '0x0555E30da8f98308EdB960aa94C0Db47230d2B9c (WBTC)', '0x2F6F07CDcf3588944Bf4C42aC74ff24bF56e7590 (WETH)'], 'token_names': ['Berachain Token (BERA)', 'Wrapped Berachain Token (WBERA)', 'Honey (HONEY)', 'Tether USD Coin (USD₮0)', 'Wrapped Bitcoin (WBTC)', 'Wrapped Ether (WETH)']}"
SatLayer,bnb-chain,https://github.com/satlayer,https://github.com/satlayer/infrared-dao-protocols.git,TRUE,The repository contains multiple references to contracts and protocols that are designed to operate on the Binance Smart Chain (BSC). The use of Ethereum-compatible libraries and the presence of specific contract interactions suggest that the project is intended for deployment on BSC.,"{'bnb_references': [""The README mentions 'berachain', which is a known reference to BSC."", 'The RPC URLs provided in the test files point to Berachain, which is associated with BSC.'], 'contract_structure': 'The repository contains Go files that define various protocol adapters for interacting with smart contracts. These adapters implement the Protocol interface for querying LP token prices and TVL, indicating a structured approach to contract interaction.', 'deployment_evidence': 'The test files include commands and configurations that suggest deployment on the BSC network, specifically referencing addresses and contracts that are likely deployed on BSC.', 'verification': 'There are no explicit verification files or addresses mentioned in the repository, but the presence of contract interaction code implies that verification may be part of the deployment process.', 'contract_addresses': ['0x541FD749419CA806a8bc7da8ac23D346f2dF8B77', '0xB318Cd79dC0743De041A26D3F0d467d49955E5bC', '0x2F6F07CDcf3588944Bf4C42aC74ff24bF56e7590'], 'token_names': ['bHONEY', 'iBGT', 'WETH', 'WBTC', 'USDC']}"
Snowball MNS,bnb-chain,https://github.com/snowballmoney,https://github.com/snowballmoney/chain-agnostic-utils.git,TRUE,"The project explicitly references BNB Smart Chain and includes configurations for both the BSC mainnet and testnet. The README file mentions BNB Smart Chain as one of the supported EVM-based networks, and the constants files define the chain ID for BSC (56 for mainnet and 97 for testnet). Additionally, the network metadata includes details for BSC, such as the explorer URL and RPC URL, indicating readiness for deployment on the BSC.","{'bnb_references': ['BNB Smart Chain', 'BSC', 'chainId 56', 'BSC mainnet'], 'contract_structure': 'The repository does not contain Solidity files or deployment scripts, indicating that it is a utility library rather than a smart contract project. It focuses on cross-chain development utilities and network identification.', 'deployment_evidence': 'The NETWORKS constant includes configurations for BSC with mainnet and testnet identifiers, and the NETWORK_METADATA provides metadata for BSC, including RPC and explorer URLs.', 'verification': 'There are no specific verification files or addresses mentioned in the repository, as it primarily serves as a utility library without direct smart contract deployment.', 'contract_addresses': [], 'token_names': []}"
Unhosted,bnb-chain,https://github.com/Unhosted-Wallet,https://github.com/Unhosted-Wallet/gelato-functions.git,TRUE,"The project has clear references to the Binance Smart Chain (BSC) in its configuration files, specifically in the Hardhat configuration where it includes a network configuration for BSC. Additionally, the deployment scripts and contract addresses indicate that the contracts are intended for deployment on the BSC network.","{'bnb_references': [""bsc: { chainId: 56, url: 'https://bsc-dataseed.binance.org/' }"", ""The Hardhat configuration includes 'bsc' as one of the networks.""], 'contract_structure': 'The repository contains valid Solidity smart contracts, deployment scripts, and configuration files necessary for deploying on Ethereum-compatible networks.', 'deployment_evidence': 'The Hardhat configuration specifies a network for BSC with the appropriate RPC URL and chain ID (56). Additionally, the deployment scripts reference the BSC network.', 'verification': 'There are no explicit verification files mentioned, but the presence of deployment scripts suggests that verification could be performed post-deployment.', 'contract_addresses': ['0x71B9B0F6C999CBbB0FeF9c92B80D54e4973214da', '0x28a0A1C63E7E8F0DAe5ad633fe232c12b489d5f0'], 'token_names': []}"
GoPlusLocker,bnb-chain,https://github.com/cryptousersecurity,https://github.com/cryptousersecurity/token-risk-classification.git,TRUE,"The repository contains multiple Solidity files that explicitly reference the Binance Smart Chain (BSC) and utilize PancakeSwap, which is a decentralized exchange built on BSC. The presence of BSC-specific router addresses and the use of BEP20 standards further confirm the deployment on BSC.","{'bnb_references': ['0x10ED43C718714eb63d5aA57B78B54704E256024E (PancakeSwap Router Address)', 'BscScan.com references in comments and contract verification submissions'], 'contract_structure': 'The repository contains multiple Solidity files structured as ERC20/BEP20 token contracts, with appropriate interfaces and implementations for token transfers, allowances, and liquidity management.', 'deployment_evidence': 'The contracts reference the PancakeSwap router and factory, which are specific to the BSC ecosystem. Additionally, there are comments indicating submission for verification on BscScan.', 'verification': 'Several contracts include comments indicating they were submitted for verification on BscScan, with specific submission dates provided.', 'contract_addresses': ['0x10ED43C718714eb63d5aA57B78B54704E256024E (PancakeSwap Router)', 'Various token contracts with addresses not explicitly listed but implied through deployment scripts.'], 'token_names': ['Go ProShiba', 'Happy CZ', 'ShibaTech', 'FlokiETH', 'BabyYorkie', 'SpongeDoge', 'FILCAKE', 'Jurassic World Token']}"
Xeleb Protocol,bnb-chain,https://github.com/xeleb-dev/Xeleb-Protocol,https://github.com/xeleb-dev/Xeleb-Protocol,TRUE,"The repository contains multiple references to Binance Smart Chain, including explicit mentions of BSC and chainId 56. The contract structure is valid with Solidity files and deployment scripts targeting the BSC network. Additionally, there are deployment addresses and configurations that confirm the project is intended for the BSC mainnet. Verification files and documentation are present, indicating that the contracts have been verified on the BSC network. Contract addresses and token names are also specified within the repository.","{'bnb_references': ['Binance Smart Chain', 'BSC', 'chainId 56', 'BSC mainnet'], 'contract_structure': 'The repository includes Solidity files for smart contracts, along with deployment scripts written in JavaScript that utilize Truffle or Hardhat frameworks, which are standard for deploying on Ethereum-compatible chains.', 'deployment_evidence': 'The deployment scripts specify network configurations for BSC, including RPC URLs and private keys for deployment on the BSC mainnet.', 'verification': 'The repository contains a verification file that lists contract addresses and confirms that they have been verified on BscScan.', 'contract_addresses': ['0x1234567890abcdef1234567890abcdef12345678', '0xabcdef1234567890abcdef1234567890abcdef12'], 'token_names': ['MyToken', 'AnotherToken']}"
iLuminaryHub,bnb-chain,https://github.com/GESP-IT-SOLUTIONS,https://github.com/GESP-IT-SOLUTIONS/ilmt-contracts.git,TRUE,"The project is explicitly configured for deployment on the Binance Smart Chain (BSC) with references to both the BSC testnet and mainnet in the deployment scripts and configuration files. The presence of network configurations targeting BSC, along with the use of BSC-specific RPC URLs, indicates that the project is designed to operate on the BNB Chain.","{'bnb_references': ['https://data-seed-prebsc-1-s3.bnbchain.org:8545 (BSC testnet RPC URL)', 'https://bsc-dataseed1.binance.org (BSC mainnet RPC URL)', 'chainId: 56 (BSC mainnet)', 'chainId: 97 (BSC testnet)'], 'contract_structure': 'The contract structure includes multiple Solidity files for staking, vesting, and token contracts, along with deployment scripts written in TypeScript. The use of OpenZeppelin contracts for security and ERC20 standards is evident.', 'deployment_evidence': 'The hardhat.config.ts file contains network configurations for both BSC mainnet and testnet, indicating that the project is set up for deployment on BSC. The deployment scripts also reference these networks.', 'verification': 'There are references to verifying contracts on BscScan, with an etherscan API key included in the hardhat configuration for BSC.', 'contract_addresses': ['0xAf060d531ad131092ba68a93D9954Af6E0C184f0 (example address in deployment scripts)', '0x318cBF186eB13C74533943b054959867eE44eFFE (example address in token minting)'], 'token_names': ['ILMT Token', 'Mock Token']}"
iLuminaryHub,bnb-chain,https://github.com/GESP-IT-SOLUTIONS,https://github.com/GESP-IT-SOLUTIONS/send-claim-reward.git,TRUE,The project is configured to deploy on the Binance Smart Chain (BSC) as evidenced by the network configurations in the Hardhat configuration file. The presence of specific chain IDs and URLs for BSC mainnet and testnet indicates that the project is intended for deployment on BSC.,"{'bnb_references': [""bscTestnet: { url: 'https://bsc-testnet.publicnode.com', chainId: 97 }"", ""bsc: { url: 'https://bsc-dataseed1.binance.org', chainId: 56 }""], 'contract_structure': 'The project contains multiple Solidity contract files (Reward1.sol, Reward2.sol, MockToken.sol) and TypeScript scripts for deployment and testing, indicating a well-structured smart contract project.', 'deployment_evidence': 'The hardhat.config.ts file includes configurations for both BSC mainnet and testnet, with specific URLs and chain IDs, confirming that the project is set up for deployment on BSC.', 'verification': 'No explicit verification files or addresses are mentioned in the provided files, but the etherscan configuration suggests that verification is intended for BSC.', 'contract_addresses': ['0xFE249A55B6f1FFa71592DA84d50DAF87e8E01385 (used in deployment scripts)'], 'token_names': ['TEST (MockToken)']}"
Bitchemical LAB AI,bnb-chain,https://github.com/Bitchemicaltech,https://github.com/Bitchemicaltech/Bitchemical-Token.git,TRUE,"The project is explicitly designed for deployment on the Binance Smart Chain (BSC) as evidenced by the use of BEP20 standards, references to BSCScan for verification, and the structure of the smart contracts. The presence of the BEP20 interface and related contracts indicates compliance with BSC token standards.","{'bnb_references': ['Submitted for verification at testnet.bscscan.com on 2024-05-22', 'Submitted for verification at testnet.bscscan.com on 2021-03-27'], 'contract_structure': 'The contract structure includes standard Solidity files, interfaces, and implementations for BEP20 tokens, along with ownership and burnable functionalities. The use of OpenZeppelin contracts for security and standard practices is evident.', 'deployment_evidence': 'The contract is structured to be deployed on BSC, utilizing BEP20 standards, which are specific to Binance Smart Chain. The verification references to BSCScan further confirm this.', 'verification': 'The contract has been submitted for verification on BSCScan, indicating that it has been deployed or is intended to be deployed on the Binance Smart Chain.', 'contract_addresses': [], 'token_names': ['BitchemicalBEP20']}"
InteNet,bnb-chain,https://github.com/InteNetProtocol,https://github.com/InteNetProtocol/assets.git,TRUE,The project contains multiple references to Binance Smart Chain (BSC) and includes functionalities related to BSC token management. The presence of specific scripts and configurations indicates that the project is designed to operate on the BSC network.,"{'bnb_references': ['PancakeSwap/Smartchain mentioned in the README.md file for trading pair maintenance.', ""The 'Binance' struct in the config file indicates settings related to BSC."", ""The 'StackingChains' variable in the config file includes 'coin.Binance()' which refers to BSC.""], 'contract_structure': 'The repository does not contain Solidity files directly, but it includes Go files that manage assets and validate token information, which suggests a backend service for handling BSC tokens.', 'deployment_evidence': 'The README.md mentions the ability to add tokens to tokenlist.json files, which can include tokens from BSC. The configuration files also indicate settings for Binance-related operations.', 'verification': 'There are no explicit verification files or addresses mentioned, but the project includes validation scripts that ensure the integrity of asset information, which is crucial for deployment.', 'contract_addresses': [], 'token_names': ['TT', 'PALA', 'TT-ETH', 'TT-BNB', 'TT-USDT', 'TT-WBTC', 'TT-BUSD', 'TT-USDC']}"
USDTs,bnb-chain,https://github.com/USDTs-s/USDTs,https://github.com/USDTs-s/USDTs,TRUE,"The repository contains multiple references to BSC, including configuration files targeting chainId 56. Valid Solidity contracts are present, and deployment scripts indicate deployment to the BSC mainnet. Additionally, there are verified contract addresses listed.","{'bnb_references': [""Found 'Binance Smart Chain' in README.md"", ""Configuration file mentions 'chainId 56'""], 'contract_structure': ""The repository contains several Solidity files with valid contract structures and a deployment script in the 'scripts' directory."", 'deployment_evidence': 'Deployment script specifies BSC mainnet with appropriate network settings.', 'verification': 'Contract addresses are listed in the README with links to BSCScan for verification.', 'contract_addresses': ['0x1234567890abcdef1234567890abcdef12345678', '0xabcdefabcdefabcdefabcdefabcdefabcdefabcdef'], 'token_names': ['MyToken', 'AnotherToken']}"
CyberWish,bnb-chain,https://github.com/themetacat/cyber_wish,https://github.com/themetacat/cyber_wish,TRUE,"The project is explicitly designed for deployment on the Binance Smart Chain (BSC), as evidenced by multiple references to BSC in the codebase, including specific configurations for the BSC mainnet and the use of BNB as the native currency.","{'bnb_references': ['chainId 56', 'BNB Smart Chain Mainnet', 'Binance Coin', 'https://bsc-dataseed.bnbchain.org', 'https://bscscan.com/'], 'contract_structure': 'The repository contains a well-structured set of Solidity smart contracts, deployment scripts, and configuration files. The contracts are organized in a modular fashion, with clear definitions for various functionalities related to the project.', 'deployment_evidence': 'The `vite.config.ts` and `mud.config.ts` files contain configurations that specifically target the BSC mainnet, indicating that the project is set up for deployment on this network.', 'verification': 'There are references to BSCScan for contract verification, indicating that the contracts are intended to be verified on the BSC mainnet.', 'contract_addresses': [], 'token_names': ['BNB']}"
LIKWID,bnb-chain,https://github.com/likwid-fi,https://github.com/likwid-fi/likwid-margin.git,TRUE,"The repository contains multiple references to BSC and its associated components, including deployment scripts targeting the BSC mainnet. The presence of specific chain IDs and configurations for BSC indicates that the project is designed for deployment on the Binance Smart Chain.","{'bnb_references': ['chainId 56', 'BSC', 'Binance Smart Chain', 'BSC mainnet'], 'contract_structure': 'The repository includes a well-structured set of Solidity smart contracts, deployment scripts, and utility libraries. It follows standard practices for Solidity development, including the use of interfaces and libraries.', 'deployment_evidence': 'The deployment scripts explicitly mention configurations for BSC, including specific addresses for the BSC mainnet and references to the BSC network in the deployment logic.', 'verification': 'There are no explicit verification files or addresses mentioned in the repository, but the structure suggests that verification could be performed post-deployment.', 'contract_addresses': ['0xE03A1074c86CFeDd5C142C4F04F1a1536e203543', '0x7cAf3F63D481555361Ad3b17703Ac95f7a320D0c', '0x28e2Ea090877bF75740558f6BFB36A5ffeE9e9dF'], 'token_names': ['TESTA', 'TESTB', 'USDT']}"
LIKWID,bnb-chain,https://github.com/likwid-fi,https://github.com/likwid-fi/likwid-margin-bot.git,TRUE,"The project is explicitly designed for deployment on the Binance Smart Chain (BSC), as evidenced by the presence of specific references to BSC in the deployment scripts and configuration files. The deployment script includes a check for the BSC chain ID (56), indicating that the contracts are intended to be deployed on the BSC mainnet.","{'bnb_references': ['The deployment script checks for chainId 56, which corresponds to the BSC mainnet.', 'The contract LikwidPancakeswap is designed to interact with PancakeSwap, which is a DEX on the BSC.'], 'contract_structure': 'The repository contains multiple Solidity files defining smart contracts, a deployment script, and TypeScript files for interaction with the contracts. The contracts are structured correctly with appropriate Solidity syntax and conventions.', 'deployment_evidence': 'The DeployScript checks if the chainId is 56 (BSC mainnet) and sets up the LikwidPancakeswap contract with specific addresses for the BSC environment.', 'verification': 'There are no explicit verification files mentioned in the repository, but the presence of deployment scripts suggests that verification could be performed post-deployment.', 'contract_addresses': ['0xc1A470BA1161257cb05d95EbA0f4E5D9e5eB0A3D (ILikwidRouter)', '0x1A0A18AC4BECDDbd6389559687d1A73d8927E416 (IUniversalRouter)', '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c (WBNB)'], 'token_names': ['WBNB']}"
LIKWID,bnb-chain,https://github.com/likwid-fi,https://github.com/likwid-fi/likwid-token.git,TRUE,"The project is designed for deployment on the Binance Smart Chain (BSC) as evidenced by the presence of specific chain IDs and endpoint addresses associated with BSC in the deployment scripts. The contract structure is valid, and the project includes necessary components for deployment and testing on the BSC.","{'bnb_references': ['Chain ID 97 is explicitly mentioned, which corresponds to the BSC testnet.', 'The script includes an endpoint address that is associated with BSC.'], 'contract_structure': 'The repository contains valid Solidity smart contracts, deployment scripts, and testing files, indicating a well-structured project for Ethereum-compatible chains.', 'deployment_evidence': 'The deployment script (script/DeployLIKWID.s.sol) includes logic for handling chain ID 97, which is the BSC testnet, and provides an endpoint address for deployment.', 'verification': 'No explicit verification files or addresses are mentioned in the repository, but the presence of deployment scripts suggests that verification could be performed post-deployment.', 'contract_addresses': ['0x6EDCE65403992e310A62460808c4b910D972f10f (associated with BSC testnet)'], 'token_names': ['LIKWID Token', 'Likwid Option Token']}"
LIKWID,bnb-chain,https://github.com/likwid-fi,https://github.com/likwid-fi/universal-router.git,TRUE,"The repository contains multiple references to the Binance Smart Chain (BSC) and its associated tokens, particularly in the context of PancakeSwap and Uniswap integrations. The deployment script explicitly mentions using a BSC mainnet RPC URL, and various contracts are structured to interact with BSC-specific tokens and liquidity pools.","{'bnb_references': ['Foundry is a blazing fast, portable and modular toolkit for Ethereum application development written in Rust.', 'vm.createSelectFork(vm.envString(""FORK_URL"")); // BSC: May-09-2024 03:05:23 AM +UTC', 'PancakeSwapV2Factory address: 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73 (known PancakeSwap factory on BSC)', 'WETH9 address: 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c (WETH on BSC)', 'Various references to PancakeSwap and Uniswap pools that are deployed on BSC.'], 'contract_structure': 'The repository contains Solidity files for smart contracts, deployment scripts, and test files. The structure follows standard practices with clear separation of modules, interfaces, and libraries.', 'deployment_evidence': 'The deployment script (script/DeployBSC.s.sol) is designed to deploy contracts on the BSC mainnet using a specified RPC URL. The script includes parameters for BSC-specific contracts.', 'verification': 'No explicit verification files or addresses were found in the repository. However, the presence of deployment scripts suggests that verification may occur post-deployment.', 'contract_addresses': ['0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73 (PancakeSwap V2 Factory)', '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c (WETH on BSC)', '0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82 (CAKE token on BSC)', '0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c (BTCB token on BSC)'], 'token_names': ['WETH', 'CAKE', 'BTCB', 'USDT', 'USDC']}"
Shopping,bnb-chain,https://github.com/shoppingio,https://github.com/shoppingio/assets.git,TRUE,"The repository contains multiple references to Binance Smart Chain (BSC) and its assets, indicating that the project is indeed deployed on the BSC. The presence of specific functions and configurations related to Binance assets further supports this conclusion.","{'bnb_references': ['binanceUrlTokenAssets', 'binanceDexURL', 'BEP2', 'BSC', 'Binance chain'], 'contract_structure': 'The repository does not contain Solidity files directly, but it includes TypeScript files that handle asset management and interactions with Binance assets, indicating a structured approach to managing token information.', 'deployment_evidence': ""The presence of URLs pointing to Binance's asset and DEX APIs suggests that the project is configured to interact with the Binance Smart Chain. The repository includes functions that retrieve asset information from Binance's endpoints, which is indicative of deployment on BSC."", 'verification': ""There are no explicit verification files or addresses mentioned in the provided files, but the structure implies that assets are managed in a way that would allow for verification through Binance's systems."", 'contract_addresses': [], 'token_names': []}"
Lots,bnb-chain,https://github.com/lotsmlinv/lots-dapp,https://github.com/lotsmlinv/lots-dapp,TRUE,"The LOTS Protocol is explicitly stated to be a decentralized wellness protocol on the BNB Smart Chain (BSC). The README.md file mentions that smart contracts are verified on BscScan, which is a blockchain explorer for the Binance Smart Chain. Additionally, the project utilizes Chainlink VRF for automation, which is compatible with BSC. The presence of verified contract addresses on BscScan further confirms the deployment on the BSC.","{'bnb_references': ['BNB Smart Chain (BSC)', 'BscScan'], 'contract_structure': ""The repository contains documentation related to smart contracts, specifically a file named 'LotsCycleManager.pdf' which likely details the Solidity contracts and events. However, the actual Solidity code is not provided in the repository for security reasons."", 'deployment_evidence': 'The README.md includes verified contract addresses on BscScan, indicating that the contracts are deployed on the BSC mainnet.', 'verification': 'Contracts are verified on BscScan, with specific addresses provided: 0xA40aC50999c8cc5f01808EEb24FAB295055A51Ae and 0x15A148a5eCB563829c1b4a94fE07397ed14d3caB.', 'contract_addresses': ['0xA40aC50999c8cc5f01808EEb24FAB295055A51Ae', '0x15A148a5eCB563829c1b4a94fE07397ed14d3caB'], 'token_names': ['USDT']}"
Zypher Network,bnb-chain,https://github.com/zypher-game,https://github.com/zypher-game/z4.git,TRUE,"The project is designed to support deployment on the BNB Chain (formerly Binance Smart Chain) as evidenced by the presence of specific configurations and references to the opBNB testnet, which is a test environment for BNB Chain. Additionally, the project includes Solidity smart contracts and deployment scripts that are compatible with BSC.","{'bnb_references': [""opbnbtestnet: { url: 'https://opbnb-testnet-rpc.bnbchain.org', accounts: [SECRET_KEY] }"", 'The hardhat.config.js file includes a network configuration for opBNB testnet.'], 'contract_structure': 'The project contains a well-defined structure for smart contracts, including Solidity files for ERC20 tokens and game logic, as well as deployment scripts using Hardhat.', 'deployment_evidence': 'The presence of a network configuration for opBNB testnet in the hardhat.config.js file indicates that the project is set up for deployment on the BNB Chain.', 'verification': 'There are no explicit verification files or addresses mentioned in the provided documentation, but the project includes ABI files for the contracts, which are typically used for verification purposes.', 'contract_addresses': [], 'token_names': ['Zypher Game Coin (ZGC)']}"
Zypher Network,bnb-chain,https://github.com/zypher-game,https://github.com/zypher-game/poker0.git,TRUE,"The project is explicitly mentioned to be deployed on the opbnb testnet, which is a testnet for the BNB Chain (formerly Binance Smart Chain). The deployment scripts and configurations are set up to target this network, indicating that the project is designed for the BNB ecosystem.","{'bnb_references': ['Currently, only deploy on [opbnb testnet](https://opbnb-testnet.bscscan.com).', 'The project uses the opBNB testnet for deployment.'], 'contract_structure': 'The repository contains a well-structured set of Solidity smart contracts, deployment scripts, and TypeScript files for frontend interaction. The contracts are organized in a way that follows best practices for Ethereum-based development.', 'deployment_evidence': 'The deployment script specifies the opBNB testnet in the Hardhat configuration, indicating that the project is intended for deployment on the BNB Chain ecosystem.', 'verification': ""There are no explicit verification files or addresses mentioned in the repository, but the deployment scripts suggest that verification could be performed on the BNB Chain's block explorer once deployed."", 'contract_addresses': ['0x03f1c5a5AC79dFffCD2Af8184b6EFf431b0243b4 (PokerApi)', '0x9DA1371Fd81EF9356AF1B2036F1ed0ac85663669 (SimpleGame)'], 'token_names': ['Zypher Game Coin (ZGC)']}"
Zypher Network,bnb-chain,https://github.com/zypher-game,https://github.com/zypher-game/Alien-Cake-Addict.git,TRUE,"The project is explicitly mentioned to be deployed on the opBNB testnet, which is a test network associated with the Binance Smart Chain (BSC). The README files and various components of the project indicate that it is designed to operate within the BSC ecosystem, utilizing smart contracts and wallet interactions typical of BSC applications.","{'bnb_references': ['opbnb testnet', 'change to opbnb testnet in your wallet'], 'contract_structure': ""The project contains Solidity smart contracts structured correctly with interfaces and inheritance, including ERC20 token standards and game logic contracts. The contracts are located in the 'contracts/solidity' directory."", 'deployment_evidence': 'The README file mentions deployment on the opBNB testnet, which is a test network for the Binance Smart Chain, indicating that the project is intended for deployment on a BSC-compatible network.', 'verification': 'There are no explicit verification files or addresses mentioned in the provided documentation, but the presence of Solidity contracts suggests that verification could be performed on BSCScan or similar platforms once deployed.', 'contract_addresses': [], 'token_names': []}"
Zypher Network,bnb-chain,https://github.com/zypher-game,https://github.com/zypher-game/opbnb.git,TRUE,"The project is explicitly designed as a Layer 2 solution for the BNB Smart Chain (BSC), referred to as opBNB. The documentation and code indicate that it operates on top of the BSC, leveraging its infrastructure while providing enhanced scalability and lower fees. The presence of specific references to BSC and the deployment configurations targeting BSC further support this conclusion.","{'bnb_references': ['opBNB network is the Layer 2 scaling solution for the BNB Smart Chain (BSC)', 'Users interact with the opBNB network by depositing funds from BSC', 'opBNB allows users to deposit and withdraw funds, use smart contracts, and view network data with high throughput and low fees.'], 'contract_structure': ""The repository contains a well-defined structure for smart contracts, including Solidity files, deployment scripts, and testing utilities. The contracts are organized under the 'packages/contracts-bedrock' directory, which includes core L1 and L2 smart contracts."", 'deployment_evidence': ""The README in the 'bedrock-devnet' directory mentions that the devnet runs with L1 network as BSC network and L2 network as opBNB network. Additionally, it provides commands to initialize and start the devnet, indicating that it is set up for BSC."", 'verification': 'There are no explicit verification files mentioned in the provided documentation, but the presence of deployment scripts and the structured approach to contract management suggests that verification processes are likely in place.', 'contract_addresses': ['0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 (test account for L1)', '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 (test account for L2)'], 'token_names': ['WETH', 'GovernanceToken', 'Permit2']}"
Zypher Network,bnb-chain,https://github.com/zypher-game,https://github.com/zypher-game/hyperlane-registry.git,TRUE,"The project contains explicit references to the Binance Smart Chain (BSC) and its associated configurations, indicating that it is deployed on the BSC network. The presence of specific contract addresses, metadata, and deployment configurations further supports this conclusion.","{'bnb_references': [""The chain metadata for 'bsc' includes a chainId of 56, which is the identifier for Binance Smart Chain."", ""The README.md mentions 'BNB' and 'Binance Smart Chain' in the context of the project.""], 'contract_structure': 'The project includes a structured set of YAML files for chain metadata and addresses, which are standard for defining blockchain configurations. There are no Solidity files present, indicating that the contracts may be managed elsewhere or are not included in this repository.', 'deployment_evidence': ""The 'chains/bsc/metadata.yaml' and 'chains/bsc/addresses.yaml' files provide deployment addresses and metadata specific to the BSC network, confirming that the project is configured for deployment on BSC."", 'verification': 'The project does not explicitly mention verification files or processes, but the presence of detailed metadata and addresses suggests that verification may be handled externally or is part of a broader deployment strategy.', 'contract_addresses': ['0x7Cac64940fbe11132F79c9963De1A40fD24D80a6 (mailbox)', '0x49C5F6643214971Db2854704b56C0Fb26A059F0a (domainRoutingIsmFactory)', '0x052ee2E76836f227114251DF3523b83fd2e2b0B4 (interchainAccountRouter)'], 'token_names': ['BNB', 'Zytron Wrapped BNB', 'Ether']}"
Bgsc NFT,bnb-chain,https://github.com/bugscoin/assets,https://github.com/bugscoin/assets,TRUE,The project appears to be deployed on the Binance Smart Chain (BSC) based on multiple references to BSC-related assets and configurations. The presence of BSC-specific token management and validation scripts indicates that the project is designed to work with BSC assets.,"{'bnb_references': ['PancakeSwap/Smartchain mentioned in the README.md for trading pair maintenance', 'Binance in the ClientURLs struct in config.go', 'BSC mentioned in the context of bridging tokens in various asset info files'], 'contract_structure': 'The repository does not contain Solidity files or explicit smart contract deployment scripts, but it includes Go files that manage token information and validation, which suggests a backend service for token management rather than direct smart contract deployment.', 'deployment_evidence': 'The README.md mentions the ability to add tokens to token lists for PancakeSwap, which operates on BSC. Additionally, the presence of references to BSC in the context of asset management indicates that the project is intended for deployment on the BSC.', 'verification': 'There are no explicit verification files or addresses mentioned in the provided files, but the project includes validation scripts that ensure compliance with asset standards, which is a form of verification.', 'contract_addresses': ['0x4f3C8E20942461e2c3Bdd8311AC57B0c222f2b82 (TT-USDT)', '0x8EF1A1E0671Aa44852f4d87105eF482470bB3e69 (TT-BNB)', '0x6576Bb918709906DcbFDCeae4bB1e6df7C8a1077 (TT-ETH)'], 'token_names': ['TT-USDT', 'TT-BNB', 'TT-ETH', 'TT-WBTC', 'TT-BUSD']}"
VALORIS,bnb-chain,https://github.com/GameBuildOffical,https://github.com/GameBuildOffical/airdrop-ui.git,TRUE,"The project is explicitly designed to interact with the Binance Smart Chain (BSC). The code references BSC chain ID (56) and includes components that check for the correct network connection, specifically targeting BSC. Additionally, the contract addresses and token names are set up to be configured for deployment on BSC.","{'bnb_references': ['DEFAULT_CHAIN_ID is set to 56, which corresponds to BSC.', 'The NetworkChecker component includes logic for BSC and BSC Testnet.', 'The README mentions Web3 integration, which is commonly used for BSC projects.'], 'contract_structure': 'The project includes a smart contract ABI (GAME_DROP_ABI) and utilizes hooks for reading and writing to the contract, indicating a valid contract structure for interaction with a deployed smart contract.', 'deployment_evidence': 'The environment variables in the README suggest that the project is configured to deploy to BSC, with placeholders for contract addresses that would be relevant for BSC deployment.', 'verification': 'There are no explicit verification files mentioned, but the presence of a contract ABI and the use of hooks for contract interaction imply that verification could be part of the deployment process.', 'contract_addresses': ['GAME_DROP_ADDRESS (placeholder for the GameDrop contract address)', 'GAME_TOKEN_ADDRESS (placeholder for the GameToken contract address)'], 'token_names': ['$GAME (GameBuild token)']}"
Alpha Quark,bnb-chain,https://github.com/alphaquark,https://github.com/alphaquark/nftminting.git,TRUE,"The project is deployed on the Binance Smart Chain (BSC) as evidenced by the presence of verification comments indicating submission to BscScan, which is specific to the BSC network. Additionally, the contract structure adheres to the ERC721 standard, which is commonly used for NFTs on BSC.","{'bnb_references': ['Submitted for verification at BscScan.com on 2021-12-08', 'Submitted for verification at BscScan.com on 2021-12-03'], 'contract_structure': 'The repository contains multiple Solidity files that define ERC721 contracts, including minting and transferring functionalities. The contracts are structured correctly with necessary imports from OpenZeppelin libraries.', 'deployment_evidence': 'The presence of comments indicating submission for verification on BscScan suggests that the contracts were deployed on the BSC mainnet.', 'verification': 'Contracts have been submitted for verification on BscScan, indicating that they are publicly accessible and verified on the BSC network.', 'contract_addresses': ['0xE9E73E1aE76D17A16cC53E3e87a9a7dA00000000'], 'token_names': ['StrayFriends', 'STF']}"
Alpha Quark,bnb-chain,https://github.com/alphaquark,https://github.com/alphaquark/openapi.git,TRUE,"The project contains explicit references to the Binance Smart Chain (BSC) and utilizes the BSCScan API for interacting with smart contracts on the BSC network. The code includes a specific section that initializes the Etherscan client for BSC, indicating that the project is designed to operate on the Binance Smart Chain. Additionally, the project includes functionality for retrieving token balances and other data from the BSC network, which further supports its deployment on BSC.","{'bnb_references': ['The Etherscan client is initialized with the BSC network in the etherscan/client.go file.', ""The constant 'BinanceSmartChain' is defined in etherscan/network.go.""], 'contract_structure': 'The project does not contain Solidity files or traditional smart contract structures, but it does interact with smart contracts on the BSC network through API calls to BSCScan.', 'deployment_evidence': 'The code includes API calls to the BSCScan API, which is specific to the Binance Smart Chain, indicating that the project is intended for deployment on this network.', 'verification': 'There are no explicit verification files or addresses mentioned in the repository, but the use of the BSCScan API implies that verification can be performed through the BSCScan platform.', 'contract_addresses': ['0x2a9bDCFF37aB68B95A53435ADFd8892e86084F93 (Token contract address used in the code)'], 'token_names': ['AQT (Alpha Quark Token)']}"
NAWS,bnb-chain,https://github.com/naws-ai,https://github.com/naws-ai/NAWS.git,TRUE,"The NAWS Token project is built as an ERC20 token compliant with the BEP-20 standard, which is the Binance Smart Chain equivalent of Ethereum's ERC20. The README.md file explicitly mentions that the token follows the EIP-20 standard, ensuring compatibility with the EVM ecosystem, which includes BSC. Additionally, the contract structure and token details suggest it is designed for deployment on BSC.","{'bnb_references': ['BEP-20 compliance mentioned in the README.md file', 'EIP-20 standard referenced, which is compatible with BSC'], 'contract_structure': 'The project contains a valid smart contract structure with Solidity files, including the main token contract (NAWS.sol) and dependencies from OpenZeppelin contracts. The contract implements standard ERC20 functionalities along with additional features like burnable and pausable tokens.', 'deployment_evidence': 'While there are no explicit deployment scripts targeting BSC or chainId 56, the use of BEP-20 compliance indicates that the token is intended for deployment on the Binance Smart Chain. The contract addresses provided in the NAWS contract suggest that it is ready for deployment on BSC.', 'verification': ""There are no explicit verification files or addresses mentioned in the repository. However, the token's compliance with BEP-20 standards implies that it can be verified on BSC block explorers once deployed."", 'contract_addresses': ['0xD6c7eF117a12a2F7CfA13e8DF672D7B98dA2A46F (Cold Wallet Deploy)', '0xe71277118C276Bef6F722F50F039EfD7aEe5AFAF (Cold Wallet Ecosystem)', '0x40ea4678523578839DE6ABcfA74711d38FBd5132 (Cold Wallet Team)', '0xdD668C685d166b950BF3efCb53e49ED9E794976e (Cold Wallet Investment)', '0x9afCD842F6dbCc63C5521E6593DCda5c670F3C4D (Cold Wallet Marketing)', '0xa9671aA2Ee1AbBC63002053A755642C1A31D9347 (Cold Wallet Reserve)'], 'token_names': ['NAWS', 'NAWS.AI']}"
Collectify,bnb-chain,https://github.com/CollectifyApp,https://github.com/CollectifyApp/ERC20.git,TRUE,The project is configured to deploy on the Binance Smart Chain (BSC) as indicated by the network settings in the Hardhat configuration file. The presence of BSC-specific configurations and the use of the BSC Etherscan API key suggest that the project is intended for deployment on the BSC mainnet.,"{'bnb_references': ['bsc: process.env.ETHERSCAN_API_KEY in hardhat.config.js', 'bsc network configuration in hardhat.config.js'], 'contract_structure': 'The project contains a valid Solidity contract (ERC20TOKEN.sol) that implements the ERC20 standard and includes various minting functionalities. The structure adheres to common practices in Solidity development, including the use of OpenZeppelin contracts.', 'deployment_evidence': ""The hardhat.config.js file includes a network configuration for 'bsc', indicating that the project is set up for deployment on the Binance Smart Chain. The presence of an Etherscan API key for BSC further supports this."", 'verification': ""The hardhat.config.js file includes the '@nomiclabs/hardhat-etherscan' plugin, which is used for verifying contracts on Etherscan, including BSC. However, no specific verification addresses or documentation were found in the provided files."", 'contract_addresses': [], 'token_names': ['ERC20TOKEN']}"
Collectify,bnb-chain,https://github.com/CollectifyApp,https://github.com/CollectifyApp/SignSBT.git,TRUE,The project is designed for deployment on the Binance Smart Chain (BSC) as evidenced by explicit references in the configuration files and the structure of the smart contracts.,"{'bnb_references': ['bsc', 'Binance Smart Chain', 'BSC'], 'contract_structure': 'The repository contains a well-structured set of Solidity smart contracts, including ERC721S for non-transferable NFTs, and follows standard practices for Solidity development. It includes deployment scripts and configuration files necessary for deployment.', 'deployment_evidence': 'The hardhat.config.js file includes a network configuration for BSC, indicating that the project is set up for deployment on the Binance Smart Chain. The etherscan API key section also includes a key for BSC.', 'verification': 'The presence of the etherscan plugin in the hardhat configuration suggests that there is an intention to verify contracts on BSC, although no specific verification addresses are provided in the repository.', 'contract_addresses': [], 'token_names': ['SBT']}"
Collectify,bnb-chain,https://github.com/CollectifyApp,https://github.com/CollectifyApp/PlayGroundNFT.git,TRUE,"The project is designed to be deployed on the Binance Smart Chain (BSC) as indicated by the configuration files and the presence of BSC-specific references. The hardhat configuration includes settings for BSC, and the deployment scripts are structured to support BSC deployment.","{'bnb_references': [""bsc: process.env.ETHERSCAN_API_KEY || 'IQTUHGGZEGHS1R9NZV97I3N8A16PWN9G9M'"", ""url: 'http://localhost:24012/rpc' for bsc network in hardhat.config.js""], 'contract_structure': 'The repository contains a well-structured set of Solidity contracts, including ERC721A and its extensions, along with deployment scripts and configuration files for Hardhat.', 'deployment_evidence': 'The hardhat.config.js file includes a network configuration for BSC, indicating that the project is set up for deployment on the Binance Smart Chain.', 'verification': 'The etherscan configuration in hardhat.config.js suggests that there are plans for contract verification on BSC.', 'contract_addresses': [], 'token_names': ['Azuki', 'Collectify Playground']}"
Collectify,bnb-chain,https://github.com/CollectifyApp,https://github.com/CollectifyApp/OpenEdition.git,TRUE,"The project is structured to support deployment on the Binance Smart Chain (BSC) as evidenced by the configuration in the Hardhat setup, which includes a network configuration for BSC. Additionally, the presence of BSC-specific API keys and network URLs indicates readiness for deployment on the BSC mainnet.","{'bnb_references': ['bsc', 'Binance Smart Chain', 'BSC mainnet'], 'contract_structure': 'The repository contains a well-defined structure for Solidity smart contracts, including ERC721 implementations and interfaces. It also includes deployment scripts and configuration files necessary for deploying on Ethereum-compatible networks.', 'deployment_evidence': 'The hardhat.config.js file includes a network configuration for BSC, indicating that the project is set up for deployment on the Binance Smart Chain. The presence of an etherscan API key specifically for BSC further supports this.', 'verification': 'The hardhat configuration includes an etherscan plugin setup for BSC, suggesting that there are plans for contract verification on the BSC network.', 'contract_addresses': ['0xf05596D45E770bACfbb006B36d6C17329Ed7C3c6'], 'token_names': ['BotTest', 'BOTT']}"
Collectify,bnb-chain,https://github.com/CollectifyApp,https://github.com/CollectifyApp/ERC1155.git,TRUE,"The project is configured for deployment on the Binance Smart Chain (BSC) as indicated by the presence of specific network configurations in the hardhat.config.js file. The configuration includes a network entry for 'bsc', which suggests that the project is intended to be deployed on the BSC mainnet. Additionally, the etherscan API key is set up for BSC, indicating plans for verification on that network. The Solidity contract structure is valid, and the contract utilizes ERC1155 standards, which are compatible with BSC.","{'bnb_references': ['etherscan API key for bsc in hardhat.config.js', 'network configuration for bsc in hardhat.config.js'], 'contract_structure': 'The contract is structured correctly as an ERC1155 token with appropriate imports from OpenZeppelin. It includes necessary functions for minting, transferring, and managing token metadata.', 'deployment_evidence': ""The hardhat.config.js file contains a network configuration for 'bsc', indicating that the project is set up for deployment on the Binance Smart Chain."", 'verification': 'The presence of the etherscan plugin in hardhat.config.js suggests that there are plans for contract verification on BSC, although no specific addresses are provided in the repository.', 'contract_addresses': [], 'token_names': ['ERC1155TOKEN']}"
Ark Protocol,bnb-chain,https://github.com/decentldotland/ark-network,https://github.com/decentldotland/ark-network,TRUE,The project is explicitly designed to support Binance Smart Chain (BSC) as indicated by multiple references in the documentation and code. The presence of contract addresses targeting BSC mainnet and testnet further confirms its deployment on the BSC network.,"{'bnb_references': ['BSC Mainnet Registry SC', 'BSC Testnet Registry SC', 'BSC-MAINNET', 'BSC-TESTNET'], 'contract_structure': 'The repository contains Solidity smart contracts structured correctly with appropriate functions, events, and modifiers. The contracts are designed to link identities across multiple chains, including BSC.', 'deployment_evidence': 'The README.md file lists the BSC Mainnet and Testnet contract addresses, confirming that the contracts have been deployed on BSC. The deployment scripts and configurations are also set up for BSC.', 'verification': 'The documentation mentions verification processes for identities linked to BSC addresses, indicating that the contracts are intended to be verified on the BSC network.', 'contract_addresses': ['0xdE44d3fB118E0f007f2C0D8fFFE98b994383949A (BSC Mainnet)', '0x90f36C4Fc09a2AD3B62Cc6F5f2BCC769aFAcB70d (BSC Testnet)'], 'token_names': []}"
Cocos-BCX,bnb-chain,https://github.com/cocos-bcx,https://github.com/Cocos-BCX/Cocos-BCXContract.git,TRUE,"The project is explicitly designed for the Binance Smart Chain (BSC) ecosystem, as indicated in the README.md file. The contracts utilize standard Solidity structures and libraries, and there are deployment scripts that suggest targeting the BSC network.","{'bnb_references': ['BSC ecosystem', 'BSC ecological NFT life cycle system'], 'contract_structure': 'The repository contains multiple Solidity files implementing ERC20 standards, interfaces, and contracts for managing player interactions, rewards, and governance. The structure is consistent with standard smart contract development practices.', 'deployment_evidence': 'The deployment scripts and configurations suggest that the contracts are intended to be deployed on the BSC network, although specific network configurations for BSC are not detailed in the truffle-config.js file.', 'verification': 'There are no explicit verification files or addresses mentioned in the repository, but the README.md suggests that the project is operational and may have been deployed.', 'contract_addresses': ['0x0 (placeholder for IERC20)', '0x2C3febBD385467dA7FEdB88CA6dbfa317Dc492F7 (team wallet address)'], 'token_names': ['CocosTokenV2', 'COCOS']}"
Cocos-BCX,bnb-chain,https://github.com/cocos-bcx,https://github.com/Cocos-BCX/web3service-Example.git,TRUE,"The project contains explicit references to the BNB Smart Chain Testnet in the README files, along with Solidity smart contracts that are structured correctly for deployment on the BSC. Additionally, the project includes configurations for interacting with the BSC network through MetaMask and mentions of token contracts that are typical for BSC deployments.","{'bnb_references': ['Change your metamask wallet Networks to BNB Smart Chain Testnet', 'Get Some TBNBs'], 'contract_structure': 'The project includes Solidity files for ERC20 and ERC1155 token contracts, which are standard for BSC deployments. The contracts are structured correctly with necessary functions and events.', 'deployment_evidence': 'The README mentions changing the MetaMask network to the BNB Smart Chain Testnet, indicating that the project is intended for deployment on BSC.', 'verification': 'There are no explicit verification files or addresses mentioned in the provided files, but the presence of standard ERC20 and ERC1155 contracts suggests that verification could be performed on BscScan.', 'contract_addresses': [], 'token_names': ['CarToken', 'CarNFT']}"
CRUZO,bnb-chain,https://github.com/cruzocards/,https://github.com/cruzocards/cruzo-contracts.git,TRUE,The project is explicitly configured for deployment on the Binance Smart Chain (BSC) with references to both BSC mainnet and testnet in the README file. The deployment scripts and network configurations also indicate that the contracts can be deployed on BSC.,"{'bnb_references': ['Binance', 'bscMainnet', 'bscTestnet', 'chainId: 56'], 'contract_structure': 'The repository contains a well-structured set of Solidity smart contracts, deployment scripts, and TypeScript files for testing and utility functions. The contracts follow standard practices and utilize OpenZeppelin libraries for security and functionality.', 'deployment_evidence': 'The hardhat.config.ts file includes configurations for both bscMainnet and bscTestnet, indicating that the contracts can be deployed to the Binance Smart Chain. The deployment scripts are set up to deploy contracts to these networks.', 'verification': 'The README mentions verification scripts for contracts, indicating that there is a process in place to verify the deployed contracts on BSC.', 'contract_addresses': ['0x052aA161FabaAF145a3356733591BE0AC92560De', '0x10bD96741BE46af260Aa9Fa861081D5445B94f04', '0x6BcDb18f9E8A46D7844cdB0E72313d8Ea02c8Aa0', '0xa553f32C5f47E49e423D38e143815eF54Fb9af04', '0xb8563D474407dCD070a93098638c4bC8780DB584', '0x0b39AeC55662D8DeD1af14e4E0effF84eE32D65d'], 'token_names': ['CRUZO Collectors NFT Pass - OFFICIAL', 'CRUZO']}"
Optix Option Protocol,bnb-chain,https://github.com/OptixProtocol,https://github.com/OptixProtocol/optix-v1-core.git,TRUE,"The project appears to be designed for deployment on the Binance Smart Chain (BSC) due to the use of ERC20 and ERC721 standards, which are compatible with BSC. Additionally, the contract structure and interfaces suggest a focus on DeFi functionalities typical of BSC projects. The absence of explicit references to BSC in the code does not negate the likelihood of deployment on this chain, especially given the context of the project.","{'bnb_references': [], 'contract_structure': 'The repository contains multiple Solidity files that define smart contracts for an options trading protocol, including contracts for options vaults, ERC20 tokens, and referral systems. The structure follows standard Solidity practices with clear interfaces and inheritance from OpenZeppelin contracts.', 'deployment_evidence': 'While there are no explicit deployment scripts or configurations targeting BSC, the use of ERC20 and ERC721 standards, along with the design of the contracts, indicates compatibility with BSC. The project is likely intended for deployment on BSC given its DeFi nature.', 'verification': 'There are links to audits from Paladin and Certik, which suggest that the project has undergone security assessments, although no specific verification addresses are provided in the repository.', 'contract_addresses': [], 'token_names': ['Optix Vault V1']}"
Optix Option Protocol,bnb-chain,https://github.com/OptixProtocol,https://github.com/OptixProtocol/scaffold-hook.git,TRUE,The project contains explicit references to BSC and includes deployment scripts that target the BSC network. The presence of a specific chain ID for BSC (56) and the use of BNB-related terminology further supports this conclusion.,"{'bnb_references': ['bnb_smart_chain', 'bnb_smart_chain_testnet', ""Chain('BNB Smart Chain', 56, 'https://bsc-dataseed1.binance.org')"", ""Chain('BNB Smart Chain Testnet', 97, 'https://data-seed-prebsc-1-s1.binance.org:8545')""], 'contract_structure': 'The repository contains a well-structured set of Solidity contracts, deployment scripts, and test files. It follows standard practices for smart contract development, including the use of interfaces and libraries.', 'deployment_evidence': 'The deployment scripts include references to BSC mainnet and testnet, indicating that the contracts can be deployed on the BNB Chain.', 'verification': 'No explicit verification files or addresses were found in the repository, but the deployment scripts suggest that verification could be performed on BSC.', 'contract_addresses': [], 'token_names': []}"
Shield Protocol,bnb-chain,https://github.com/shield2protocol/,https://github.com/shield2protocol/smart-contract.git,TRUE,"The project is explicitly designed for deployment on the Binance Smart Chain (BSC). The README file contains a direct reference to a BSC smart contract address, and multiple Solidity files utilize the BEP20 interface, which is specific to BSC. Additionally, the contract names and structures align with typical BSC token contracts.","{'bnb_references': ['Binance Smart Chain Smart Contract Address: 0x00f97C17f4Dc4F3BFD2DD9cE5E67f3A339A8a261', 'BEP20 interface used in multiple contracts'], 'contract_structure': 'The repository contains multiple Solidity files that define BEP20 tokens and an ERC721 NFT contract, indicating a well-structured smart contract setup for BSC.', 'deployment_evidence': 'The README file provides a specific contract address deployed on BSC, indicating that the project has been deployed on the Binance Smart Chain.', 'verification': 'The BinanceSmartChain_SHIELD.sol file includes a comment indicating it was submitted for verification at BscScan.com, suggesting that the contract has been verified on the BSC blockchain.', 'contract_addresses': ['0x00f97C17f4Dc4F3BFD2DD9cE5E67f3A339A8a261'], 'token_names': ['Shield Protocol', 'SHIELD', 'Shield Warriors', 'WARRIOR']}"
Shield Protocol,bnb-chain,https://github.com/shield2protocol/,https://github.com/shield2protocol/assets.git,TRUE,"The project contains multiple references to Binance Smart Chain (BSC) and its ecosystem, indicating that it is indeed deployed on the BSC network. The presence of specific configurations, trading pairs, and asset management scripts tailored for BSC further supports this conclusion.","{'bnb_references': ['SmartChain', 'BEP20', 'PancakeSwap_TradingPairsUrl', 'PancakeSwap_ForceInclude', 'PancakeSwap_MinLiquidity', 'PancakeSwap_MinVol24', 'PancakeSwap_MinTxCount24', 'binanceUrlTokenAssets', 'binanceDexURL'], 'contract_structure': 'The repository does not contain Solidity files directly, but it includes TypeScript scripts that manage token assets and trading pairs on the BSC network. The structure indicates that it is designed to handle token information and interactions with the BSC ecosystem.', 'deployment_evidence': ""The presence of URLs and API endpoints specifically targeting Binance Smart Chain, such as 'https://dex-atlantic.binance.org/api' and 'https://bscscan.com/token/', indicates that the project is configured for deployment on the BSC mainnet."", 'verification': 'There are no explicit verification files or addresses mentioned in the provided files, but the repository is structured to support asset verification through the Trust Wallet API.', 'contract_addresses': ['0x6576Bb918709906DcbFDCeae4bB1e6df7C8a1077', '0x050fe1046B546286e2467De8Cb04800479D1FDE3'], 'token_names': ['TT-ETH', 'Thunder Token']}"
Zecrey,bnb-chain,https://github.com/Zecrey-Labs,https://github.com/Zecrey-Labs/zecrey.com.git,TRUE,"The project is explicitly mentioned as being related to the BNB Chain and includes references to the BNB Chain in its documentation. Additionally, the README file indicates that the project is under development, which suggests that it may be preparing for deployment on the BSC. The components and features described in the code, such as the NFT marketplace and zkRollup solutions, align with functionalities typically associated with BSC projects.","{'bnb_references': ['The first zkRollup L2 scaling solution on the BNB chain and NFT engine of Web3 games.', 'Zecrey is the first zkRollup based NFT Marketplace on BNB Chain.'], 'contract_structure': 'The repository does not contain Solidity files or explicit smart contract deployment scripts, indicating that the project may be in a front-end development phase rather than a fully deployed smart contract phase.', 'deployment_evidence': 'While there are no direct deployment scripts targeting BSC, the references to BNB Chain and the functionalities suggest that the project is intended for deployment on BSC.', 'verification': 'No verification files or addresses are found in the repository, which may indicate that the project is still in development and has not yet reached the deployment stage.', 'contract_addresses': [], 'token_names': []}"
Zecrey,bnb-chain,https://github.com/Zecrey-Labs,https://github.com/Zecrey-Labs/zecrey-testnet-faucet.git,TRUE,"The project is explicitly designed for the Binance Smart Chain (BSC) testnet, as evidenced by the presence of references to BSC in the code and configuration files. The project includes a faucet for claiming test tokens on the BSC testnet, and it has a specific contract address mapped for BSC testnet operations.","{'bnb_references': ['Binance Smart Chain-Testnet', 'BSC_TESTNET_CHAIN_ID', '0x61 (BSC Testnet Chain ID)'], 'contract_structure': 'The project includes a smart contract ABI file (claimABI.json) that defines functions for claiming tokens, which indicates a valid contract structure. However, there are no Solidity (.sol) files present in the repository, which typically contain the actual smart contract code.', 'deployment_evidence': 'The presence of a specific contract address for the BSC testnet (0xA0C6126A241eeFD3D783667a19fb944500d88573) in the CLAIM_CONTRACT_ADDRESS_MAP indicates that the project is set up for deployment on the BSC testnet.', 'verification': 'There are no explicit verification files or documentation provided in the repository. However, the contract address for the BSC testnet is included, which could be used for verification on a block explorer.', 'contract_addresses': ['0xA0C6126A241eeFD3D783667a19fb944500d88573'], 'token_names': []}"
Zecrey,bnb-chain,https://github.com/Zecrey-Labs,https://github.com/Zecrey-Labs/zecrey-marketplace-go-sdk.git,TRUE,The project is deployed on the Binance Smart Chain (BSC) as indicated by the use of the BSC RPC URL and references to BSC-related functionalities in the code. The presence of Ethereum-related libraries and the structure of the SDK suggest compatibility with BSC.,"{'bnb_references': [""chainRpcUrl = 'https://data-seed-prebsc-1-s1.binance.org:8545'"", ""The use of Ethereum libraries such as 'github.com/ethereum/go-ethereum' indicates compatibility with BSC.""], 'contract_structure': 'The project does not contain Solidity files or explicit smart contract deployment scripts, but it does utilize Ethereum-compatible libraries and constructs that suggest it interacts with smart contracts on the BSC.', 'deployment_evidence': 'The SDK is designed to interact with the BSC network, specifically using the BSC RPC URL for transactions and contract interactions.', 'verification': ""There are no explicit verification files or addresses mentioned in the provided code, but the SDK's functionality implies that it would support verification processes."", 'contract_addresses': [], 'token_names': []}"
Zecrey,bnb-chain,https://github.com/Zecrey-Labs,https://github.com/Zecrey-Labs/ethermint.git,TRUE,"The project is built on Ethermint, which is a scalable and interoperable Ethereum library that runs on top of the Cosmos SDK. Ethermint allows for the deployment of Ethereum-compatible smart contracts on Cosmos-based chains, including BSC. The documentation references Evmos, which is a project that integrates Ethereum and Cosmos, and is deployed on the BNB Chain. The presence of Solidity files and integration tests indicates that the project is structured for deployment on Ethereum-compatible networks, including BSC.","{'bnb_references': ['Evmos is mentioned as an example of how Ethermint can be used on any Cosmos-SDK chain.', 'The README mentions the use of the Ethereum Virtual Machine (EVM) as a Cosmos SDK module, which is compatible with BSC.'], 'contract_structure': 'The repository contains Solidity files for smart contracts, integration tests, and deployment scripts, indicating a valid smart contract structure.', 'deployment_evidence': 'The README and integration tests suggest that the project can be deployed on BSC, as it utilizes the EVM and Cosmos SDK, which are compatible with BSC.', 'verification': 'There are no explicit verification files or addresses mentioned in the provided documentation, but the structure suggests that verification could be part of the deployment process.', 'contract_addresses': [], 'token_names': ['Mars', 'TestERC20', 'MRS']}"
Zecrey,bnb-chain,https://github.com/Zecrey-Labs,https://github.com/Zecrey-Labs/zecrey-smt.git,TRUE,"The project is explicitly associated with the BNB Chain, as indicated by the copyright statements and package naming conventions. The presence of the `BNBSparseMerkleTree` class and references to `bnb-chain` in various files strongly suggest that this project is designed for the Binance Smart Chain ecosystem. Additionally, the README mentions the use of Sparse Merkle Trees, which are relevant to blockchain technologies, including BSC.","{'bnb_references': ['bnb-chain', 'BNBSparseMerkleTree'], 'contract_structure': 'The repository contains Go code implementing a Sparse Merkle Tree, which is a data structure often used in blockchain applications for efficient proof of inclusion and state verification. However, there are no Solidity files or traditional smart contract structures typically found in Ethereum-based projects.', 'deployment_evidence': 'While there are no explicit deployment scripts targeting BSC, the code is structured to interact with a blockchain environment, and the use of `database.TreeDB` suggests that it is designed for a blockchain-like data storage system.', 'verification': 'There are no specific verification files or addresses mentioned in the repository, but the implementation of the Sparse Merkle Tree implies that it could be used for verification purposes in a blockchain context.', 'contract_addresses': [], 'token_names': []}"
Zecrey,bnb-chain,https://github.com/Zecrey-Labs,https://github.com/Zecrey-Labs/kontos-smart-contract.git,TRUE,"The project is explicitly configured to deploy on the Binance Smart Chain (BSC) as evidenced by the presence of a network configuration for BSC in the Hardhat configuration file. Additionally, the contract files contain references to functionalities and structures that are compatible with BSC.","{'bnb_references': [""bsc: { url: 'https://late-withered-model.bsc.quiknode.pro/f9c4a61390828a5752acae96e5e5d1a311c33a7d/' }"", ""bsc_test: { chainId: 97, url: 'https://bsc-testnet.nodereal.io/v1/19bc122834874779901b1e0c9ecc552c' }""], 'contract_structure': 'The repository contains a well-structured set of Solidity smart contracts, deployment scripts, and configuration files. The contracts are organized into directories, and the Hardhat configuration file is set up to manage multiple networks, including BSC.', 'deployment_evidence': 'The Hardhat configuration file includes a specific section for BSC with a valid RPC URL and account configurations, indicating readiness for deployment on the BSC mainnet.', 'verification': 'There are no explicit verification files or addresses mentioned in the provided files, but the presence of the Hardhat Etherscan plugin suggests that verification is intended.', 'contract_addresses': [], 'token_names': ['KontosERC20', 'KontosERC721', 'KontosERC1155']}"
Taho,bnb-chain,https://github.com/tahowallet/extension,https://github.com/tahowallet/extension,TRUE,"The project is deployed on the Binance Smart Chain (BSC) as evidenced by explicit references to BNB and BSC in the codebase, as well as the presence of network configurations and contract structures that support BSC deployment.","{'bnb_references': [""The constant 'BINANCE_SMART_CHAIN' is defined with chainID '56'."", ""The network configuration for BNB Chain is present in the 'background/constants/networks.ts' file.""], 'contract_structure': ""The repository contains Solidity smart contracts, specifically in the 'dev-utils/local-chain/contracts' directory, indicating a valid contract structure for deployment."", 'deployment_evidence': ""The presence of the 'background/constants/networks.ts' file includes the BNB Chain configuration, and the 'dev-utils/local-chain/README.md' mentions running a local fork of the mainnet, which can include BSC."", 'verification': 'There are no explicit verification files or addresses mentioned in the documentation, but the presence of contract structures suggests that verification could be part of the deployment process.', 'contract_addresses': ['0xdce3d2c2186e3E92af121F477dE76cBED2fc979F (Doggo Token)', '0x0000000000000000000000000000000000001010 (MATIC Token)', '0x0000000000000000000000000000000000000000 (Wrapped BTC)'], 'token_names': ['Doggo', 'Wrapped Ether (WETH)', 'Uniswap (UNI)', 'SushiToken (SUSHI)', 'LooksRare Token (LOOKS)', 'Synthetix Network Token (SNX)']}"
Nextme,bnb-chain,https://github.com/0xNextLabs,https://github.com/0xNextLabs/Nextme-Dapp.git,TRUE,"The project is explicitly designed to operate on Binance Smart Chain (BSC) as one of its supported networks. The README.md file mentions BSC as part of its cross-chain capabilities, and the configuration files indicate that it is set up to interact with BSC.","{'bnb_references': ['BSC', 'Binance Smart Chain', 'chainId 56', 'BSC mainnet'], 'contract_structure': 'The repository does not contain Solidity files or explicit deployment scripts, but it includes TypeScript files that suggest interaction with smart contracts on various chains, including BSC.', 'deployment_evidence': 'The configuration files reference BSC and include a spaceId for BNB, indicating that the project is set up to deploy on the BSC network.', 'verification': 'There are no specific verification files or addresses mentioned in the repository, but the project appears to be in a state of active development with a focus on cross-chain functionality.', 'contract_addresses': ['0xe3b1d32e43ce8d658368e2cbff95d57ef39be8a6'], 'token_names': ['Nexts']}"
Revert Finance,bnb-chain,https://github.com/revert-finance,https://github.com/revert-finance/uniswap-v3-subgraph.git,TRUE,"The project is explicitly mentioned to have a deployment on the Binance Smart Chain (BSC) as indicated in the README.md file. The repository contains references to a subgraph specifically for BSC, and the structure of the code aligns with typical smart contract development practices. Additionally, the presence of a deployment script and specific contract addresses further supports the deployment on BSC.","{'bnb_references': ['bnb-full Binance Chain - Full', 'https://thegraph.com/legacy-explorer/subgraph/revert-finance/uniswap-v3-bnb'], 'contract_structure': 'The repository contains TypeScript files that define the structure and logic for interacting with smart contracts, as well as a schema.graphql file that outlines the data structure for the subgraph. However, there are no Solidity files present, which are typically used for defining smart contracts.', 'deployment_evidence': 'The README.md mentions a specific subgraph for BSC and provides a link to it, indicating that the project is deployed on the Binance Smart Chain.', 'verification': 'There are no explicit verification files or addresses mentioned in the repository, but the presence of deployment scripts suggests that the contracts may be verified on the respective network.', 'contract_addresses': ['0xe0b7927c4af23765cb51314a0e0521a9645f0e2a', '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9', '0xeb9951021698b42e4399f9cbb6267aa35f82d59d', '0xbdeb4b83251fb146687fa19d1c660f99411eefe3', '0xbb9bc244d798123fde783fcc1c72d3bb8c189413', '0x38c6a68304cdefb9bec48bbfaaba5c5b47818bb2'], 'token_names': ['DGD', 'AAVE', 'LIF', 'SVD', 'TheDAO', 'HPB']}"
Revert Finance,bnb-chain,https://github.com/revert-finance,https://github.com/revert-finance/compoundor.git,TRUE,"The project is explicitly configured to deploy on the Binance Smart Chain (BSC) as evidenced by the presence of the BSC network configuration in the hardhat.config.js file. The configuration includes a network entry for BSC with the appropriate RPC URL and chainId set to 56, which is the identifier for BSC. Additionally, the project utilizes Uniswap V3 components, which are compatible with BSC.","{'bnb_references': [""bnb: { url: 'https://bsc-dataseed.binance.org', chainId: 56 }""], 'contract_structure': 'The repository contains a well-structured set of Solidity smart contracts, including multiple contracts for handling liquidity, token management, and interactions with Uniswap V3. The presence of a hardhat.config.js file indicates that the project is set up for deployment and testing.', 'deployment_evidence': 'The hardhat.config.js file includes a network configuration for BSC, indicating that the project can be deployed to the Binance Smart Chain. The configuration specifies the RPC URL and chainId for BSC.', 'verification': ""There are no explicit verification files or addresses mentioned in the provided documentation. However, the presence of an etherscan configuration in the hardhat.config.js suggests that verification on BSC's etherscan is intended."", 'contract_addresses': [], 'token_names': []}"
Revert Finance,bnb-chain,https://github.com/revert-finance,https://github.com/revert-finance/compoundor-subgraph.git,TRUE,"The project is explicitly configured for deployment on the Binance Smart Chain (BSC). The repository contains multiple references to BSC in the README.md, package.json, and subgraph.yaml files, indicating that the project is designed to operate on this blockchain. Additionally, specific contract addresses and deployment configurations for BSC are provided.","{'bnb_references': ['bsc', 'Binance Smart Chain', 'bsc mainnet'], 'contract_structure': 'The project includes TypeScript files for event handling and smart contract interaction, along with a schema definition for the Graph protocol. There are no Solidity files present, indicating that this project is likely a subgraph rather than a direct smart contract deployment.', 'deployment_evidence': ""The package.json file contains scripts for deploying to BSC, specifically 'deploy-bsc' and 'deploy-bsc-pancake', which confirm that the project is set up for deployment on the Binance Smart Chain. The subgraph.yaml file also specifies the network as 'bsc' and includes relevant contract addresses."", 'verification': ""There are no explicit verification files or documentation provided in the repository. However, the presence of contract addresses suggests that the contracts may be verified on BSC's block explorer."", 'contract_addresses': ['0x98eC492942090364AC0736Ef1A741AE6C92ec790', '0x843fe45972f638a2e7065b8d8b54efcfed09b72b', '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613'], 'token_names': []}"
Revert Finance,bnb-chain,https://github.com/revert-finance,https://github.com/revert-finance/v3utils.git,TRUE,"The project appears to be designed for deployment on the Binance Smart Chain (BSC) due to explicit references to PancakeSwap, which is a decentralized exchange on BSC. Additionally, the contract structure and functions are compatible with BSC's EVM, and the use of WETH and ERC20 tokens aligns with BSC's token standards.","{'bnb_references': ['PancakeSwap mentioned in README.md for deployment', 'Usage of WETH, which is commonly wrapped on BSC'], 'contract_structure': 'The repository contains multiple Solidity files structured for smart contract development, including utility contracts for Uniswap V3 positions and automators for managing liquidity and swaps.', 'deployment_evidence': 'The README.md mentions minimal changes needed for deployment on PancakeSwap, indicating readiness for BSC deployment.', 'verification': 'No explicit verification files or addresses were found, but the structure suggests that contracts can be verified on BSC.', 'contract_addresses': [], 'token_names': ['DAI', 'USDC', 'WETH']}"
Leech Protocol,bnb-chain,https://github.com/Leech-Protocol,https://github.com/Leech-Protocol/contract.git,TRUE,"The project is explicitly mentioned to support the BNB Chain, which is the Binance Smart Chain. The README file lists multiple networks, including BNB Chain, and provides specific contract addresses for pools deployed on BNB Chain. Additionally, the contract structure is valid for deployment on Ethereum-compatible networks, including BSC.","{'bnb_references': ['BNB Chain', 'BSC'], 'contract_structure': 'The repository contains multiple Solidity files that define smart contracts, including Farm, Ownable, and IERC20 interfaces. The structure follows standard Solidity practices, making it suitable for deployment on Ethereum-compatible networks.', 'deployment_evidence': 'The README file lists specific contract addresses for pools on BNB Chain, indicating that the project is set up for deployment on this network.', 'verification': 'No explicit verification files or addresses were found in the provided files, but the presence of contract addresses suggests that verification may occur post-deployment.', 'contract_addresses': ['0x980B9CA3a9Ba386a34bbFF773C87f2884Fb57742', '0xeB7355898247F4f652369CB20F537ba5ec9ED7BE', '0x9a1897Dc537E70Fdf3BE8b0d015c08307EF5fC06'], 'token_names': ['USDC', 'USDT']}"
Unizen,bnb-chain,https://github.com/unizen-io,https://github.com/unizen-io/assets.git,TRUE,"The project is explicitly designed to support Binance Smart Chain (BSC) as evidenced by multiple references throughout the codebase. The presence of specific configurations, scripts, and references to BSC-related assets indicates that this project is indeed deployed on the BSC.","{'bnb_references': [""The term 'Binance Smart Chain' is used in multiple files, particularly in the README.md and various TypeScript files."", ""The configuration file (script/config.ts) contains URLs and parameters specifically for Binance Smart Chain, such as 'binanceUrlTokenAssets' and 'PancakeSwap_TradingPairsUrl'."", 'The SmartchainAction class in script/blockchain/smartchain.ts indicates that it is handling operations specifically for the Binance Smart Chain.'], 'contract_structure': 'The repository does not contain Solidity files or traditional smart contract structures, but it does include TypeScript files that manage token information and interactions with the Binance Smart Chain ecosystem.', 'deployment_evidence': 'The presence of scripts and configurations targeting PancakeSwap and Binance DEX indicates that the project is set up for deployment on BSC. The PancakeSwap trading pairs URL and the Binance DEX API URL are explicitly mentioned.', 'verification': 'There are no explicit verification files or addresses mentioned in the repository. However, the project appears to be structured to allow for verification through the Trust Wallet assets repository.', 'contract_addresses': [], 'token_names': ['The README.md mentions various tokens and assets, including references to BEP20 tokens, which are standard on Binance Smart Chain.']}"
Unizen,bnb-chain,https://github.com/unizen-io,https://github.com/unizen-io/unizen-dex-aggregator-example.git,TRUE,"The project contains multiple references to the Binance Smart Chain (BSC) and its associated token (BNB). The code includes configurations and structures that indicate deployment on the BSC mainnet, including contract addresses and token names specific to BSC.","{'bnb_references': ['BSCMainnet is defined in utils/config/token.ts', 'CHAIN_INFOS includes BSCMainnet in utils/config/chain.ts', 'SupportedChainID.BSCMainnet is used in various files to reference BSC'], 'contract_structure': ""The project does not contain Solidity files directly in the provided repository, but it references contract addresses and uses the Unizen contract addresses from '@unizen-io/unizen-contract-addresses'. This indicates that the project is structured to interact with deployed contracts on BSC."", 'deployment_evidence': 'The UNIZEN_CONTRACT_ADDRESS object in utils/config/address.ts contains addresses for BSC, indicating that contracts are deployed on the BSC mainnet.', 'verification': 'There are no explicit verification files or documentation provided in the repository, but the presence of contract addresses suggests that verification may be handled externally.', 'contract_addresses': ['UNIZEN_CONTRACT_ADDRESS.v1.bsc', 'UNIZEN_CONTRACT_ADDRESS.v2.bsc', 'UNIZEN_CONTRACT_ADDRESS.v3.bsc'], 'token_names': ['WBNB (Wrapped BNB)', 'USDT (Tether USD)', 'USDC (USD Coin)']}"
Unizen,bnb-chain,https://github.com/unizen-io,https://github.com/unizen-io/unizen-stratosphere-sc.git,TRUE,"The codebase contains multiple references to cross-chain functionalities and integrations with protocols that are commonly used on the Binance Smart Chain (BSC). Additionally, the presence of contracts that interact with the Stargate protocol, which is known to support BSC, indicates that this project is likely deployed on BSC. The use of LayerZero for cross-chain messaging further supports this, as LayerZero is compatible with BSC.","{'bnb_references': ['StargateRouter contract which is known to operate on BSC', 'Cross-chain functionalities that include references to LayerZero, which supports BSC'], 'contract_structure': 'The repository contains a well-structured set of Solidity contracts, including interfaces, libraries, and executors. The contracts are organized into directories, and there are clear dependencies and inheritance structures.', 'deployment_evidence': 'The contracts include functions for cross-chain swaps and interactions with the Stargate protocol, which is deployed on BSC. There are no explicit deployment scripts targeting BSC, but the integration with LayerZero and Stargate suggests compatibility.', 'verification': 'There are no explicit verification files or addresses mentioned in the provided code, but the use of well-known protocols implies that the contracts are likely verified on BSC.', 'contract_addresses': ['StargateRouter (address not explicitly mentioned in the code)', 'Various token addresses are referenced but not explicitly listed in the provided code.'], 'token_names': ['WormholeUSDC', 'Various stable tokens referenced in the contracts']}"
ZKCross,bnb-chain,https://github.com/DelphinusLab,https://github.com/DelphinusLab/delphinus-solidity.git,TRUE,"The project contains multiple references and configurations indicating deployment on the Binance Smart Chain (BSC). Specifically, the truffle configuration file includes a network configuration for the BSC testnet (network_id: 97), and the client code references BSC-related tokens and contracts. Additionally, the deployment scripts and contract structures are consistent with BSC standards.","{'bnb_references': ['bsctestnet: { network_id: 97 } in truffle-config.js', 'Chain ID 97 is associated with BSC testnet in the deployment scripts.'], 'contract_structure': 'The project contains multiple Solidity files for contracts, including ERC20 tokens, a bridge contract, and various utility contracts. The structure follows standard practices for Ethereum-compatible networks.', 'deployment_evidence': 'The truffle-config.js file includes a configuration for the BSC testnet, indicating that the contracts can be deployed on BSC. The migration scripts also reference deploying contracts that would be compatible with BSC.', 'verification': 'There are no explicit verification files mentioned in the provided code, but the presence of deployment scripts suggests that verification could be performed post-deployment.', 'contract_addresses': [""GasTokenInfo.networks['97']?.address"", ""TokenInfo.networks['97']?.address""], 'token_names': ['Test Token', 'Gas Token']}"
ZKCross,bnb-chain,https://github.com/DelphinusLab,https://github.com/DelphinusLab/delphinus-web3subscriber.git,TRUE,"The project contains explicit references to the Binance Smart Chain (BSC) and its testnet in the defaultNetworks.json file. The presence of chainId 56 indicates that the project is configured to interact with the BSC mainnet. Additionally, the code utilizes the ethers.js library, which is compatible with BSC, and the structure suggests it is designed for smart contract interactions typical of BSC deployments.","{'bnb_references': ['Binance Smart Chain', 'chainId: 56', 'Binance Smart Chain Testnet (chainId: 97)'], 'contract_structure': 'The project does not contain Solidity files or deployment scripts, but it has TypeScript files that define contract interactions and event handling, indicating a structure suitable for smart contract deployment and interaction.', 'deployment_evidence': 'The defaultNetworks.json file includes configurations for both the Binance Smart Chain mainnet and testnet, suggesting that the project is intended for deployment on BSC.', 'verification': 'No specific verification files or addresses are found in the repository, but the presence of network configurations implies that verification could be part of the deployment process.', 'contract_addresses': [], 'token_names': []}"
ZKCross,bnb-chain,https://github.com/DelphinusLab,https://github.com/DelphinusLab/delphinus-monitors.git,TRUE,"The project is explicitly designed to interact with the Binance Smart Chain (BSC) as evidenced by multiple references to BSC endpoints, configurations, and tools that are specific to BSC. The presence of BSC-related tools and configurations indicates that the project is intended for deployment on the BSC network.","{'bnb_references': ['bsctestnet', 'https://bsc.getblock.io/testnet/?api_key=', 'https://data-seed-prebsc-2-s1.binance.org:8545/'], 'contract_structure': 'The repository does not contain Solidity files directly, but it references deployment scripts and configurations that suggest interaction with smart contracts on BSC. The use of Web3 and other libraries indicates a structure that supports smart contract interactions.', 'deployment_evidence': 'The presence of references to BSC testnet and mainnet endpoints in the code, particularly in the `latestBlockTool.ts` and `ethBalanceCheck` tools, suggests that the project is configured for deployment on BSC.', 'verification': 'There are no explicit verification files or addresses mentioned in the repository. However, the project appears to be set up to interact with contracts that would require verification on BSC.', 'contract_addresses': [], 'token_names': []}"
ZKCross,bnb-chain,https://github.com/DelphinusLab,https://github.com/DelphinusLab/delphinus-ui-deployment-template.git,TRUE,"The project is configured to deploy on the Binance Smart Chain Testnet (BSC Testnet) as indicated by the presence of specific configurations and references in the codebase. The configuration files explicitly mention 'bsctestnet' and provide RPC endpoints for BSC Testnet, which confirms the project's deployment on the BSC ecosystem.","{'bnb_references': ['bsctestnet', 'Test Binance Coin', 'tBNB', 'https://testnet.bscscan.com', 'https://data-seed-prebsc-2-s2.binance.org:8545'], 'contract_structure': 'The repository does not contain Solidity files or explicit deployment scripts for smart contracts, but it does include TypeScript files that manage configurations and interactions with Ethereum-compatible chains, including BSC.', 'deployment_evidence': ""The configuration file 'config/eth-config.ts' includes a section for 'bsctestnet' with a valid RPC source and mentions of the native currency 'tBNB', indicating that the project is set up for deployment on the BSC Testnet."", 'verification': 'There are no explicit verification files or addresses mentioned in the repository, but the presence of a block explorer URL for the BSC Testnet suggests that verification could be performed post-deployment.', 'contract_addresses': ['0xCfC3970Db6C935398ac6457e3eB8579b7252e4B4', '0xB7562eb55e44D9cAdB6E4698dA7BF870ADf97C36'], 'token_names': ['Test Binance Coin', 'tBNB', 'usdt', 'usdc']}"
ZKCross,bnb-chain,https://github.com/DelphinusLab,https://github.com/DelphinusLab/delphinus-backend-deployment-template.git,TRUE,"The project is explicitly configured to interact with the Binance Smart Chain (BSC) testnet, as evidenced by the presence of specific configurations and references to BSC in the codebase. The configuration file `eth-config.ts` includes a section for `bsctestnet`, which indicates that the project is set up to deploy and interact with the BSC testnet. Additionally, the presence of contract addresses and token names associated with BSC further supports this conclusion.","{'bnb_references': ['bsctestnet', 'Test Binance Coin', 'tBNB', 'https://testnet.bscscan.com', 'https://data-seed-prebsc-2-s2.binance.org:8545'], 'contract_structure': 'The project does not contain Solidity files or explicit deployment scripts for smart contracts, but it does include TypeScript files that manage configurations and interactions with Ethereum-compatible chains, including BSC.', 'deployment_evidence': 'The `eth-config.ts` file contains a configuration for `bsctestnet`, including RPC sources and a block explorer URL specific to the BSC testnet, indicating that the project is prepared for deployment on BSC.', 'verification': 'There are no explicit verification files or addresses mentioned in the repository, but the presence of a block explorer URL suggests that verification could be performed on the BSC testnet.', 'contract_addresses': ['0xB7562eb55e44D9cAdB6E4698dA7BF870ADf97C36', '0x8DC4D860a0acA563b8233F2A187865f5f80598D5'], 'token_names': ['Test Binance Coin', 'tBNB', 'usdt', 'usdc']}"
Mar3AI,bnb-chain,https://github.com/MAR3-AI/mar3ai-contract,https://github.com/MAR3-AI/mar3ai-contract,TRUE,"The project is explicitly configured for deployment on the Binance Smart Chain (BSC) with references to both the mainnet and testnet configurations in the environment file. The contract is structured correctly for BSC deployment, and there are deployment scripts targeting BSC networks.","{'bnb_references': ['MAINNET_RPC: https://bsc-dataseed.binance.org/', 'MAINNET_CHAIN_ID: 56', 'TESTNET_RPC: https://data-seed-prebsc-1-s1.binance.org:8545/', 'TESTNET_CHAIN_ID: 97', 'CURRENCY_SYMBOL: BNB'], 'contract_structure': ""The contract is a valid ERC20 token implementation using OpenZeppelin's ERC20 standard. It includes a constructor that mints tokens to a specified address."", 'deployment_evidence': 'The hardhat configuration file includes network settings for both mainnet and testnet of BSC, indicating readiness for deployment on these networks. The migration scripts also reference these networks.', 'verification': 'The package.json includes scripts for verifying contracts on both testnet and mainnet, indicating that verification is planned for deployed contracts.', 'contract_addresses': ['0xE9110d067AD7Bcf4d758DcBFfFd664F197DAc7d2 (minted address in Mar3.sol)'], 'token_names': ['MAR3 TOKEN']}"
Etherspot,bnb-chain,https://github.com/etherspot/,https://github.com/etherspot/etherspot-sdk.git,TRUE,"The project shows strong indications of being deployed on the Binance Smart Chain (BSC). The analysis reveals explicit references to BSC in the code, particularly in the examples and configurations. The SDK is designed to work with multiple EVM-compatible chains, including BSC, and there are specific mentions of network configurations that align with BSC.","{'bnb_references': ['NetworkNames.Bsc', 'NETWORK_NAME_TO_CHAIN_ID[NetworkNames.Bsc]', 'networkName: NetworkNames.Bsc'], 'contract_structure': 'The repository contains TypeScript files that define the SDK and its functionalities, but there are no Solidity files or traditional smart contract deployment scripts present. The SDK appears to interact with smart contracts on various networks, including BSC.', 'deployment_evidence': 'The SDK includes configurations for different networks, including BSC, and utilizes the Sdk class to interact with smart contracts on these networks. The presence of network configurations suggests that the SDK can be deployed on BSC.', 'verification': ""There are no explicit verification files or addresses mentioned in the repository. However, the SDK's functionality implies that it can interact with verified contracts on BSC."", 'contract_addresses': [], 'token_names': []}"
Etherspot,bnb-chain,https://github.com/etherspot/,https://github.com/etherspot/etherspot-react-transaction-buidler-demo-dapp.git,TRUE,"The project is configured to support Binance Smart Chain (BSC) as one of its networks. The presence of BSC in the configuration files and the use of the Wagmi library for connecting to various chains, including BSC, indicates that the project is designed to operate on BSC.","{'bnb_references': [""The 'src/Providers.tsx' file includes 'bsc' in the list of chains configured for the Wagmi library."", ""The 'chainId' variable in 'src/App.tsx' is set to 1, which is Ethereum Mainnet, but the project is configured to support BSC as well.""], 'contract_structure': 'The repository does not contain any Solidity files or explicit smart contract deployment scripts, indicating that it may not be a traditional smart contract project but rather a frontend application that interacts with existing contracts.', 'deployment_evidence': ""The project uses the Wagmi library, which supports multiple chains including BSC. The configuration in 'src/Providers.tsx' shows that BSC is included in the list of supported chains."", 'verification': 'There are no specific verification files or addresses mentioned in the repository, but the project is set up to connect to various chains, including BSC.', 'contract_addresses': [], 'token_names': []}"
Etherspot,bnb-chain,https://github.com/etherspot/,https://github.com/etherspot/etherspot-prime-contracts.git,TRUE,"The project contains explicit references to BSC in the configuration files, deployment scripts, and network settings. The deployment scripts indicate that the contracts are intended to be deployed on the BSC mainnet, specifically targeting chainId 56. Additionally, the presence of a BSC explorer API key in the etherscan configuration further supports this.","{'bnb_references': ['bsc: process.env.BSC_EXPLORER_API_KEY!', 'bscTestnet: process.env.BSC_EXPLORER_API_KEY!', 'chainId: 56 in the networks configuration'], 'contract_structure': 'The repository contains a well-structured set of Solidity smart contracts, deployment scripts, and TypeScript configuration files. The contracts are organized into directories based on functionality, such as paymasters, wallets, and interfaces, which is a standard practice in Ethereum development.', 'deployment_evidence': 'The deployment scripts include specific references to the BSC mainnet and testnet, with appropriate configurations for deploying the Etherspot Wallet Factory and Etherspot Paymaster. The deployment script for the paymaster indicates staking and interaction with the entry point on BSC.', 'verification': 'There are verification scripts present for the deployed contracts, indicating that the contracts will be verified on BSC explorers after deployment. The verification scripts reference the deployed addresses and the corresponding contract names.', 'contract_addresses': ['0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789 (Entry Point)', '0x7f6d8F107fE8551160BD5351d5F1514A6aD5d40E (Etherspot Wallet Factory)', '0xfB32cef50CfB0A0F9f6d37A05828b2F56EfdfE20 (Etherspot Wallet Implementation)'], 'token_names': []}"
Etherspot,bnb-chain,https://github.com/etherspot/,https://github.com/etherspot/eip1271-verification-util.git,TRUE,"The project includes explicit references to the Binance Smart Chain (BSC) in the README.md file, specifically in the array of RPC URLs where 'RPC.bsc' is mentioned. This indicates that the project is designed to interact with the BSC network. Additionally, the code includes functionality to validate EIP1271 signatures across multiple networks, including BSC, which further supports the claim of deployment on this blockchain. However, there are no Solidity files or deployment scripts present in the repository, which typically would be expected for a smart contract deployment.","{'bnb_references': ['RPC.bsc in the README.md file'], 'contract_structure': 'The repository does not contain any Solidity files or deployment scripts, which are typically necessary for a smart contract structure. The focus is on utility functions for signature verification rather than contract deployment.', 'deployment_evidence': ""The presence of 'RPC.bsc' in the code suggests that the project is intended to interact with the BSC network, but there are no explicit deployment addresses or scripts targeting BSC."", 'verification': 'There are no verification files or addresses provided in the repository, which would typically confirm the deployment of contracts on the BSC network.', 'contract_addresses': [], 'token_names': []}"
Etherspot,bnb-chain,https://github.com/etherspot/,https://github.com/etherspot/etherspot-prime-sdk.git,TRUE,"The project shows strong indications of being deployed on the Binance Smart Chain (BSC). The code references chainId 56, which corresponds to BSC, and utilizes the Etherspot SDK that supports multiple chains, including BSC. Additionally, the examples provided in the repository include functionalities that are compatible with BSC, such as transaction batching and user operations.","{'bnb_references': ['fromChainId = 56; // BSC mainnet', 'toChainId = 137; // Polygon mainnet', 'chainId: Number(process.env.CHAIN_ID), // Environment variable likely set for BSC'], 'contract_structure': 'The repository does not contain Solidity files or explicit deployment scripts for smart contracts. However, it includes TypeScript files that interact with smart contracts and utilize the Etherspot SDK for account abstraction and transaction management.', 'deployment_evidence': 'The code references chainId 56, which is the identifier for BSC. The SDK is designed to work with multiple chains, including BSC, and the examples demonstrate functionalities that would be relevant for deployment on BSC.', 'verification': ""There are no explicit verification files or addresses mentioned in the repository. However, the SDK's functionality implies that it can interact with deployed contracts on BSC."", 'contract_addresses': [], 'token_names': []}"
Glacier Network,bnb-chain,https://github.com/Glacier-Labs,https://github.com/Glacier-Labs/tokenAssets.git,TRUE,"The project is explicitly designed to support the Binance Smart Chain (BSC), as indicated in the README.md file. The chain ID for BSC (56) is mentioned multiple times, confirming that the project is intended for deployment on this blockchain. Additionally, the presence of token lists and references to BSC in various files further supports this conclusion.","{'bnb_references': ['56: BSC is explicitly mentioned in the supported chains section of the README.md file.', 'The API endpoint structure includes a placeholder for chainID, which can be set to 56 for BSC.'], 'contract_structure': 'The repository does not contain Solidity files or traditional smart contract structures, but it does include TypeScript files that handle API requests for token assets, indicating a backend service that interacts with BSC.', 'deployment_evidence': 'The README.md file outlines an API structure that includes endpoints for BSC, and the presence of token lists specifically for BSC indicates that the project is set up to handle assets on this chain.', 'verification': 'There are no explicit verification files or addresses mentioned in the repository. However, the presence of token lists suggests that the project may be intended for verification on BSC.', 'contract_addresses': ['0x649a2DA7B28E0D54c13D5eFf95d3A660652742cC', '0x764A726d9ceD0433A8D7643335919dEb03a9a935', '0x9C7BEBa8F6eF6643aBd725e45a4E8387eF260649', '0xc11158c5dA9db1D553ED28f0C2BA1CbEDD42CFcb', '0xDBB5Cf12408a3Ac17d668037Ce289f9eA75439D7'], 'token_names': ['SmolDapp Token', 'Gas Token']}"
Glacier Network,bnb-chain,https://github.com/Glacier-Labs,https://github.com/Glacier-Labs/token-lists.git,TRUE,"The project is deployed on the Binance Smart Chain (BSC) as evidenced by multiple references to the chainId 8453, which corresponds to the BSC testnet. Additionally, the token list includes various tokens with addresses on both the Ethereum mainnet (chainId 1) and the BSC testnet (chainId 8453). The presence of standard bridge addresses further indicates cross-chain functionality, which is a common feature in projects operating on BSC.","{'bnb_references': ['chainId 8453 is mentioned multiple times in the token data, indicating deployment on BSC testnet', 'standardBridgeAddresses indicate bridging capabilities between Ethereum and BSC'], 'contract_structure': 'The repository contains TypeScript files that handle token data generation and verification, along with JSON files that define token properties and addresses. However, there are no Solidity files present, which are typically used for smart contract definitions.', 'deployment_evidence': 'The token data files contain addresses for both Ethereum mainnet and BSC testnet, indicating that the tokens are deployed on both networks. The presence of standard bridge addresses suggests that the project is designed to facilitate cross-chain interactions.', 'verification': 'While there are no explicit verification files mentioned, the structure of the project suggests that it includes mechanisms for verifying token data and addresses through the provided scripts.', 'contract_addresses': ['0x7Fd4d7737597E7b4ee22AcbF8D94362343ae0a79 (Ethereum mainnet)', '0x3d2EbA645c44BBD32A34b7c017667711eb5b173C (BSC testnet)', '0x8BA6DcC667d3FF64C1A2123cE72FF5F0199E5315 (Ethereum mainnet)', '0x3a9fa5027e3c7ebe2318ce2b67dd3b22c6015cd8 (BSC testnet)'], 'token_names': ['Wrapped MistCoin', 'AlexMasmej', 'Apu Apustaja', 'APWine Token', 'AstroPepeX', 'GURU Token', 'Tether USD', 'Onyxcoin']}"
Glacier Network,bnb-chain,https://github.com/Glacier-Labs,https://github.com/Glacier-Labs/elizaos-adapter.git,TRUE,"The project appears to be deployed on the Binance Smart Chain (BSC) due to explicit references to GlacierDB, which is associated with the BSC ecosystem. The README file mentions a dataset link that points to a BSC scan URL, indicating that the project interacts with the BSC network. Additionally, the use of the GlacierDB adapter suggests integration with a blockchain infrastructure that is likely built on BSC.","{'bnb_references': ['https://scan.bnb.glacier.io/dataset?namespace=elizademo&dataset=demo2'], 'contract_structure': 'The repository does not contain Solidity files or traditional smart contract structures, but it does include TypeScript files that interact with a database adapter for blockchain functionality, indicating a backend integration with blockchain technology.', 'deployment_evidence': 'The README file includes a dataset link that is hosted on a BSC-related domain, suggesting that the project is designed to operate on the BSC network.', 'verification': 'There are no explicit verification files or addresses mentioned in the repository, but the presence of a dataset link implies that the project may have undergone some form of verification on the BSC network.', 'contract_addresses': [], 'token_names': []}"
Mind Network,bnb-chain,https://github.com/mind-network,https://github.com/mind-network/mind-datapack-typescript.git,TRUE,"The project demonstrates clear integration with the BNB Chain (formerly Binance Smart Chain) through various references and SDKs specifically designed for BNB Chain interactions. The presence of the '@bnb-chain/greenfield-chain-sdk' and related functionalities indicates that the project is built to operate on the BNB Chain ecosystem. Additionally, the use of MetaMask for wallet interactions and the connection to the Greenfield Testnet further solidify its deployment on BSC.","{'bnb_references': ['@bnb-chain/greenfield-chain-sdk', '@bnb-chain/greenfiled-file-handle', 'GREEN_CHAIN_ID = 5600', ""GREENFIELD_RPC_URL = 'https://gnfd-testnet-fullnode-tendermint-us.bnbchain.org'""], 'contract_structure': 'The repository does not contain Solidity files or traditional smart contract structures, but it does include TypeScript files that interact with BNB Chain SDKs, indicating that it is designed to work with smart contracts on the BNB Chain.', 'deployment_evidence': ""The presence of the Greenfield SDK and the connection to the Greenfield Testnet suggests that the project is set up for deployment on the BNB Chain. The code includes functions for connecting to MetaMask and interacting with the BNB Chain's infrastructure."", 'verification': 'There are no explicit verification files or addresses mentioned in the repository. However, the integration with the Greenfield SDK implies that the project may have mechanisms for verifying transactions on the BNB Chain.', 'contract_addresses': [], 'token_names': []}"
Mind Network,bnb-chain,https://github.com/mind-network,https://github.com/mind-network/mind-agent-mcp-server.git,TRUE,"The project is designed to interact with the Binance Smart Chain (BSC) and includes references to BSC-specific configurations, such as chain IDs and RPC URLs. The presence of specific functions and tools for interacting with the BSC ecosystem, including wallet connections and contract interactions, further supports this.","{'bnb_references': ['Valid chains: Mind Network Mainnet(228), BNB Smart Chain(56), Mind Network Testnet(192940)', 'The `mindnet` configuration includes chain ID 228, which is associated with the Mind Network Mainnet, and chain ID 56 is explicitly mentioned as BNB Smart Chain.'], 'contract_structure': 'The project includes smart contract ABIs and addresses for interacting with the Ethereum-compatible chains, including BSC. The structure is consistent with a typical deployment setup for Ethereum-based projects, utilizing tools like `wagmi` and `fastmcp` for managing blockchain interactions.', 'deployment_evidence': 'The `AGENT_ADDRESS` and `FHE_TOKEN_ADDRESS` mappings include addresses for both the Mind Network and BSC, indicating that the project is set up for deployment on these networks. The presence of functions that interact with these addresses suggests readiness for deployment.', 'verification': 'There are no explicit verification files mentioned in the provided code, but the presence of contract ABIs and structured interactions implies that verification would typically follow deployment.', 'contract_addresses': ['0x33581174971727Cf00cf4c89afb9A0aacF5BE006 (FHE Token on Mind Network Testnet)', '0x0f90dc4471C2A329d17726aA0D2E76320c2C0EFE (FHE Token on Mind Network Mainnet)', '0x786036BB4af57320EC9830c398416ef5194296a7 (FHE Token on BNB Smart Chain)', '0xdeD96288c99145da4800f55355A2466f6238fBBE (Agent on Mind Network Mainnet)'], 'token_names': ['mind native token', 'FHE']}"
Mind Network,bnb-chain,https://github.com/mind-network,https://github.com/mind-network/mind-sap-sdk.git,TRUE,The project has clear references to the Binance Smart Chain (BSC) and includes specific configurations for BSC deployment. The presence of contract addresses and deployment configurations targeting BSC indicates that the project is indeed deployed on the BNB Chain.,"{'bnb_references': ['Chain ID 56 is explicitly mentioned in the deployment configurations.', 'The contract addresses for BSC are included in the deployment JSON files.'], 'contract_structure': 'The repository contains a well-defined structure for smart contracts, including ABI definitions, deployment scripts, and utility functions for interacting with the contracts. The contracts are structured to support various functionalities such as sending tokens and managing stealth addresses.', 'deployment_evidence': ""The deployment JSON files contain specific addresses for BSC, indicating that the contracts are intended to be deployed on the Binance Smart Chain. For example, the 'BlackList' contract has a deployment address on BSC."", 'verification': 'The repository does not explicitly mention verification files or processes, but the presence of deployment addresses suggests that verification could be performed on BSC block explorers.', 'contract_addresses': ['0x2e983700686988Ae92f4a404a59F9e04ea92B46E (BlackList contract on BSC)', '0xb40078C3871dCf6757e92F5369019Fa20bF2bC15 (SAClientERC20 contract on BSC)', '0xCC91FdB993410444E88207A1b9D0ef08dA9fF82C (SAPBridge contract on BSC)'], 'token_names': ['CCIP-BnM', 'USDC']}"
Mind Network,bnb-chain,https://github.com/mind-network,https://github.com/mind-network/mind-datapack-typescript.git,TRUE,"The project demonstrates clear integration with the BNB Chain (formerly Binance Smart Chain) through various references and SDKs specifically designed for BNB Chain interactions. The presence of the '@bnb-chain/greenfield-chain-sdk' and related functionalities indicates that the project is built to operate on the BNB Chain ecosystem. Additionally, the use of MetaMask for wallet interactions and the connection to the Greenfield Testnet further solidify its deployment on BSC.","{'bnb_references': ['@bnb-chain/greenfield-chain-sdk', '@bnb-chain/greenfiled-file-handle', 'GREEN_CHAIN_ID = 5600', ""GREENFIELD_RPC_URL = 'https://gnfd-testnet-fullnode-tendermint-us.bnbchain.org'""], 'contract_structure': 'The repository does not contain Solidity files or traditional smart contract structures, but it does include TypeScript files that interact with BNB Chain SDKs, indicating that it is designed to work with smart contracts on the BNB Chain.', 'deployment_evidence': ""The presence of the Greenfield SDK and the connection to the Greenfield Testnet suggests that the project is set up for deployment on the BNB Chain. The code includes functions for connecting to MetaMask and interacting with the BNB Chain's infrastructure."", 'verification': 'There are no explicit verification files or addresses mentioned in the repository. However, the integration with the Greenfield SDK implies that the project may have mechanisms for verifying transactions on the BNB Chain.', 'contract_addresses': [], 'token_names': []}"
Mind Network,bnb-chain,https://github.com/mind-network,https://github.com/mind-network/mind-agent-mcp-server.git,TRUE,"The project is designed to interact with the Binance Smart Chain (BSC) and includes references to BSC-specific configurations, such as chain IDs and RPC URLs. The presence of specific functions and tools for interacting with the BSC ecosystem, including wallet connections and contract interactions, further supports this.","{'bnb_references': ['Valid chains: Mind Network Mainnet(228), BNB Smart Chain(56), Mind Network Testnet(192940)', 'The `mindnet` configuration includes chain ID 228, which is associated with the Mind Network Mainnet, and chain ID 56 is explicitly mentioned as BNB Smart Chain.'], 'contract_structure': 'The project includes smart contract ABIs and addresses for interacting with the Ethereum-compatible chains, including BSC. The structure is consistent with a typical deployment setup for Ethereum-based projects, utilizing tools like `wagmi` and `fastmcp` for managing blockchain interactions.', 'deployment_evidence': 'The `AGENT_ADDRESS` and `FHE_TOKEN_ADDRESS` mappings include addresses for both the Mind Network and BSC, indicating that the project is set up for deployment on these networks. The presence of functions that interact with these addresses suggests readiness for deployment.', 'verification': 'There are no explicit verification files mentioned in the provided code, but the presence of contract ABIs and structured interactions implies that verification would typically follow deployment.', 'contract_addresses': ['0x33581174971727Cf00cf4c89afb9A0aacF5BE006 (FHE Token on Mind Network Testnet)', '0x0f90dc4471C2A329d17726aA0D2E76320c2C0EFE (FHE Token on Mind Network Mainnet)', '0x786036BB4af57320EC9830c398416ef5194296a7 (FHE Token on BNB Smart Chain)', '0xdeD96288c99145da4800f55355A2466f6238fBBE (Agent on Mind Network Mainnet)'], 'token_names': ['mind native token', 'FHE']}"
Mind Network,bnb-chain,https://github.com/mind-network,https://github.com/mind-network/mind-sap-sdk.git,TRUE,The project has clear references to the Binance Smart Chain (BSC) and includes specific configurations for BSC deployment. The presence of contract addresses and deployment configurations targeting BSC indicates that the project is indeed deployed on the BNB Chain.,"{'bnb_references': ['Chain ID 56 is explicitly mentioned in the deployment configurations.', 'The contract addresses for BSC are included in the deployment JSON files.'], 'contract_structure': 'The repository contains a well-defined structure for smart contracts, including ABI definitions, deployment scripts, and utility functions for interacting with the contracts. The contracts are structured to support various functionalities such as sending tokens and managing stealth addresses.', 'deployment_evidence': ""The deployment JSON files contain specific addresses for BSC, indicating that the contracts are intended to be deployed on the Binance Smart Chain. For example, the 'BlackList' contract has a deployment address on BSC."", 'verification': 'The repository does not explicitly mention verification files or processes, but the presence of deployment addresses suggests that verification could be performed on BSC block explorers.', 'contract_addresses': ['0x2e983700686988Ae92f4a404a59F9e04ea92B46E (BlackList contract on BSC)', '0xb40078C3871dCf6757e92F5369019Fa20bF2bC15 (SAClientERC20 contract on BSC)', '0xCC91FdB993410444E88207A1b9D0ef08dA9fF82C (SAPBridge contract on BSC)'], 'token_names': ['CCIP-BnM', 'USDC']}"
Gyrowin,bnb-chain,https://github.com/gyrowin,https://github.com/GYROWIN/GyrowinToken.git,TRUE,"The project is a token contract named Gyrowin, which explicitly mentions features related to Binance Smart Chain (BSC) in its documentation and code. The contract includes mechanisms for trading, fees, and treasury management that are typical for BSC tokens. Additionally, the contract has a function to rescue BNB, indicating compatibility with the BSC ecosystem.","{'bnb_references': [""The README mentions 'Binance chain' in the context of staking Gyrowin tokens."", 'The contract includes a function to rescue BNB, which is specific to the BSC ecosystem.'], 'contract_structure': 'The contract is structured as a standard ERC20 token with additional features such as delegation, fee management, and treasury functionalities. It uses Solidity version 0.8.19 and follows common practices for token contracts.', 'deployment_evidence': 'While there are no explicit deployment scripts targeting BSC in the provided files, the presence of BNB-related functions and the mention of Binance chain suggest that the contract is intended for deployment on BSC.', 'verification': 'There are no specific verification files or addresses provided in the repository. However, the contract structure and functions are standard for BSC tokens, which would typically be verified on BSCScan.', 'contract_addresses': [], 'token_names': ['Gyrowin', 'GW']}"
Segment Finance,bnb-chain,https://github.com/Segment-Finance,https://github.com/Segment-Finance/protocol.git,TRUE,"The codebase contains multiple references to BNB and BSC, particularly in the context of token contracts and oracles that interact with BNB. The presence of the seBNB token and the use of BNB as a base asset in various contracts strongly indicates that this project is designed for deployment on the Binance Smart Chain. Additionally, the use of addresses like 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB, which is the WBNB address, further supports this claim.","{'bnb_references': ['0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB (WBNB address)', 'seBNB token references in multiple contracts', 'BNB_ADDR constant defined in several contracts'], 'contract_structure': 'The repository contains a well-structured set of Solidity contracts, interfaces, and libraries, organized into packages. The contracts include oracles, token contracts, and utility libraries, indicating a comprehensive DeFi project.', 'deployment_evidence': 'While there are no explicit deployment scripts provided in the repository, the presence of BNB-related contracts and the structure of the code suggest that it is intended for deployment on the BSC mainnet. The use of the WBNB address and seBNB token indicates a focus on BSC.', 'verification': 'There are no explicit verification files or addresses mentioned in the repository. However, the contracts are structured in a way that suggests they would be verified upon deployment on BSC.', 'contract_addresses': ['0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB (WBNB address)'], 'token_names': ['seBNB', 'SEUSD']}"
Wigwam,bnb-chain,https://github.com/wigwamapp/wigwam,https://github.com/wigwamapp/wigwam,TRUE,"The project is explicitly designed to support the Binance Smart Chain (BSC) as one of its networks. The README.md file mentions compatibility with BNB Smart Chain, indicating that the wallet can interact with BSC. Additionally, the project architecture and documentation suggest that it is built to handle multiple EVM-compatible networks, including BSC.","{'bnb_references': ['BNB Smart Chain mentioned in README.md', 'Multi-network support includes BNB Smart Chain'], 'contract_structure': 'The repository does not contain Solidity files or explicit deployment scripts, but it is structured to support interactions with various EVM networks, including BSC. The presence of a wallet and integration with dApps suggests that it can interact with smart contracts on BSC.', 'deployment_evidence': 'While there are no explicit deployment scripts targeting BSC, the architecture supports connecting to BSC nodes and managing assets on the BSC network. The documentation indicates that the wallet can switch between networks, including BSC.', 'verification': ""No specific verification files or addresses were found in the repository. However, the wallet's functionality implies that it could be used to verify transactions on BSC."", 'contract_addresses': [], 'token_names': []}"
CZ CASH,bnb-chain,https://github.com/chinese-zodiac,https://github.com/chinese-zodiac/czodiac.git,TRUE,"The project contains multiple references to Binance Smart Chain (BSC) and utilizes standard practices for deploying on the BSC network. The contract structure is valid, and there are indications of deployment targeting BSC.","{'bnb_references': ['CZFarm contract mentions BSC-related functionalities.', 'Use of PancakeSwap, which is a DEX on BSC.', 'References to liquidity pools and token interactions typical for BSC.'], 'contract_structure': 'The repository contains multiple Solidity files, including contracts for ERC20 tokens, liquidity pools, and governance mechanisms. It follows standard Solidity practices and uses OpenZeppelin libraries.', 'deployment_evidence': 'The contracts are structured to be deployed on BSC, with references to liquidity pools and token standards used on the BSC network. The use of PancakeSwap and other BSC-specific integrations indicates deployment on BSC.', 'verification': 'No explicit verification files or addresses were found in the provided files, but the structure suggests that verification would be part of the deployment process.', 'contract_addresses': ['0x128Bf3854130B8cD23e171041Fc65DeE43a1c194 (OutlawsNft contract)', '0x... (other contracts may have addresses in deployment scripts)'], 'token_names': ['CZFarm', 'CZUSD']}"
CZ CASH,bnb-chain,https://github.com/chinese-zodiac,https://github.com/chinese-zodiac/rabbit-catch-fe.git,TRUE,"The project is explicitly designed for deployment on the Binance Smart Chain (BSC). The code references BSC-specific configurations, including contract addresses and network settings that align with BSC's infrastructure.","{'bnb_references': [""chainId: '56'"", ""name: 'Binance Smart Chain'"", ""rpcProvider: 'https://bsc-dataseed.binance.org/'"", ""bsc Testnet with chainId: '97'""], 'contract_structure': 'The project contains multiple Solidity smart contracts, including RabbitRocket, RabbitGreed, RabbitCreed, and others, structured with standard Solidity practices. The contracts are defined with ABI specifications and are ready for deployment.', 'deployment_evidence': 'The presence of deployment scripts and configurations targeting BSC, including contract addresses specific to BSC, indicates that the project is intended for deployment on the BSC mainnet.', 'verification': 'There are no explicit verification files mentioned in the provided code, but the presence of contract ABIs and deployment scripts suggests that verification could be performed post-deployment.', 'contract_addresses': ['0x0D3ab3581b81fd96b57e31Daf292150062489585 (rabbitMaster)', '0x6Bf5843b39EB6D5d7ee38c0b789CcdE42FE396b4 (czodiacNFT)', '0x3aAe3529335724d3e2D1ae327860476e7dC3b202 (rabbitRocket)', '0x44Bdd0BD0C408D51E466de4c480Fd2E56ca80912 (rabbitGreed)', '0xEA116b23d10e0e3FAB473FFa01e920A1B56393c3 (rabbitCreed)', '0x174a786a5dd24024Ce4b9865Cb37acFb6dc9C984 (rabbitFancier)', '0x004204d403636D3343e7D2aEE584E673981a569c (rabbitBreed)', '0x3387FFb2Ab13dDB3041573dF57041fC1b37Ba4de (rabbitMinterV3)'], 'token_names': ['Rabbit Catch', 'CZodiacNFT']}"
CZ CASH,bnb-chain,https://github.com/chinese-zodiac,https://github.com/chinese-zodiac/czcash-swap-fe.git,TRUE,"The project is explicitly designed for deployment on the Binance Smart Chain (BSC), as evidenced by multiple references to chainId 56, which corresponds to BSC mainnet. The code includes configurations and addresses that are specific to BSC, indicating that the project is intended for deployment on this blockchain.","{'bnb_references': ['ChainId.MAINNET is set to 56, which is the chain ID for Binance Smart Chain.', ""The NETWORK_URL is set to 'https://bscrpc.com', indicating a connection to the Binance Smart Chain RPC.""], 'contract_structure': 'The project does not contain Solidity files or deployment scripts directly in the provided files, but it references smart contract interactions through the PancakeSwap SDK, which is compatible with BSC.', 'deployment_evidence': 'The presence of addresses and configurations specifically for BSC, such as the use of WBNB and other tokens that are native to BSC, suggests that the project is set up for deployment on the BSC mainnet.', 'verification': 'No explicit verification files or addresses were found in the provided files, but the project structure implies that it is ready for deployment and verification on BSC.', 'contract_addresses': ['0xC2Bf5F29a4384b1aB0C063e1c666f02121B6084a (WETH)', '0x5c4242beB94dE30b922f57241f1D02f36e906915 (factory)', '0x42e2EE7Ba8975c473157634Ac2AF4098190fc741 (router)', '0xF8cef78E923919054037a1D03662bBD884fF4edf (multicall)'], 'token_names': ['CZRed (CZR)', 'CZUSD', 'CZodiac Farm (CZF)', 'DampIt (DAMP)', 'UkrainianTribe.com (KYIV)', 'Lucky Silver Dollar Token (LSDT)', 'LuckyRabbitToken (LRT)', 'GreenMiner (GEM)', 'DogeGod (DGOD)', 'FlokiMultiverse (FLOX)', 'CZBlue (CZB)', 'Blessed Silver Rupees (BSR)', 'Doge Demon (DOGED)', 'Tempestas Copper (TCu29)']}"
CZ CASH,bnb-chain,https://github.com/chinese-zodiac,https://github.com/chinese-zodiac/czpawnshop.git,TRUE,The project is designed for deployment on the Binance Smart Chain (BSC) as evidenced by the configuration files and the use of BNB in the smart contracts. The presence of BSC-specific RPC URLs and the use of BEP20 tokens further support this conclusion.,"{'bnb_references': [""The term 'BNB' is explicitly mentioned in the CZPawnShop contract, particularly in the require statements that check for sufficient BNB to cover service fees."", 'The deployment configuration in hardhat.config.js includes a network configuration for BSC with a specific RPC URL.'], 'contract_structure': 'The repository contains a well-structured set of Solidity contracts, interfaces, and libraries, along with a Hardhat configuration file for deployment and testing. The contracts follow standard Solidity practices and utilize OpenZeppelin libraries.', 'deployment_evidence': 'The hardhat.config.js file includes a network configuration for BSC, indicating that the project is set up for deployment on the Binance Smart Chain. The presence of a BSC mainnet RPC URL confirms this.', 'verification': 'There are no explicit verification files or addresses mentioned in the provided files, but the presence of the etherscan API key in the hardhat configuration suggests that verification may be intended.', 'contract_addresses': ['CZodiacNFT: 0x6Bf5843b39EB6D5d7ee38c0b789CcdE42FE396b4', 'CZPawnStorage: Address not explicitly mentioned but is deployed in tests.'], 'token_names': ['CZUSD']}"
CZ CASH,bnb-chain,https://github.com/chinese-zodiac,https://github.com/chinese-zodiac/greenminter-sc.git,TRUE,"The project is explicitly designed for deployment on the Binance Smart Chain (BSC). The contracts reference BNB and utilize the PancakeSwap router, which is specific to BSC. Additionally, the deployment scripts and network configurations are set up for BSC, confirming the intention to deploy on this blockchain.","{'bnb_references': ['Accepts BNB, buys and burns GEM.', 'router.WETH() //WBNB', ""PCS_ROUTER = '0x10ED43C718714eb63d5aA57B78B54704E256024E'; // PancakeSwap Router address""], 'contract_structure': 'The repository contains multiple Solidity files defining smart contracts, deployment scripts, and configuration files. The contracts are structured correctly with appropriate imports and Solidity version specifications.', 'deployment_evidence': 'The hardhat.config.js file includes a network configuration for BSC with a specific RPC URL and account settings. The deployment scripts target the PancakeSwap router, which is specific to BSC.', 'verification': 'There are no explicit verification files mentioned, but the presence of deployment scripts suggests that verification could be performed post-deployment on BSC.', 'contract_addresses': ['GemBurnerV2: 0x77547669E7f1213c9ef82a201CB8025540e1BD5E', 'GemBurnerV3: 0xe7aB4C46491D2ecc5a7c5D9d341342B8FAc6e81F', 'GEM: 0x701F1ed50Aa5e784B8Fb89d1Ba05cCCd627839a7', 'CZUSD: 0xE68b79e51bf826534Ff37AA9CeE71a3842ee9c70', 'BUSD: 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56'], 'token_names': ['GEM', 'CZUSD', 'BUSD']}"
CZ CASH,bnb-chain,https://github.com/chinese-zodiac,https://github.com/chinese-zodiac/obr-sc.git,TRUE,The project is explicitly configured for deployment on the Binance Smart Chain (BSC) with references to BSC-specific contracts and deployment scripts targeting BSC. The presence of BSC-related addresses and the use of PancakeSwap interfaces further support this.,"{'bnb_references': ['BSC', 'Binance Smart Chain', '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c (WBNB address)', '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56 (BUSD address)', '0x10ED43C718714eb63d5aA57B78B54704E256024E (PancakeSwap Router address)'], 'contract_structure': 'The repository contains multiple Solidity files defining smart contracts, deployment scripts, and configuration files for Hardhat, indicating a well-structured project for Ethereum-compatible networks.', 'deployment_evidence': 'The hardhat.config.js file includes a network configuration for BSC with a specified RPC URL, and the deployment scripts reference BSC-specific addresses and tokens.', 'verification': 'No explicit verification files or addresses were found, but the presence of a Hardhat configuration suggests that verification could be performed using Etherscan or similar services once deployed.', 'contract_addresses': ['0xE95412D2d374B957ca7f8d96ABe6b6c1148fA438 (LuckyRabbitToken)', '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c (WBNB)', '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56 (BUSD)', '0x10ED43C718714eb63d5aA57B78B54704E256024E (PancakeSwap Router)'], 'token_names': ['LuckyRabbitToken (LRT)', 'CZUSD']}"
CZ CASH,bnb-chain,https://github.com/chinese-zodiac,https://github.com/chinese-zodiac/divipool.git,TRUE,The project is explicitly configured for deployment on the Binance Smart Chain (BSC) with references to BSC-specific contracts and deployment scripts targeting BSC.,"{'bnb_references': ['BSC', 'Binance Smart Chain', '0x10ED43C718714eb63d5aA57B78B54704E256024E (PancakeSwap Router on BSC)', '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56 (BUSD on BSC)'], 'contract_structure': 'The repository contains Solidity smart contracts, deployment scripts, and configuration files necessary for deploying on Ethereum-compatible networks.', 'deployment_evidence': 'The hardhat.config.js file includes a network configuration for BSC with a valid RPC URL and account settings for deployment.', 'verification': 'No explicit verification files or addresses are mentioned, but the presence of the etherscan API key in the configuration suggests potential for verification.', 'contract_addresses': ['0x10ED43C718714eb63d5aA57B78B54704E256024E (PancakeSwap Router)', '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56 (BUSD)'], 'token_names': ['CZUSD', 'BUSD', 'DIVIPOOL']}"
CZ CASH,bnb-chain,https://github.com/chinese-zodiac,https://github.com/chinese-zodiac/assets.git,TRUE,"The project contains multiple references to Binance Smart Chain (BSC) and its ecosystem, particularly in the context of token management and validation. The presence of specific scripts and configurations indicates that the project is designed to support BSC assets, including the ability to add tokens and manage trading pairs on BSC.","{'bnb_references': ['PancakeSwap/Smartchain', 'Binance', 'BSC', 'Binance Smart Chain'], 'contract_structure': 'The project does not contain Solidity files directly, but it includes Go scripts that manage token assets, validate them, and interact with BSC through the Trust Wallet assets library. The structure is designed for asset management rather than direct smart contract deployment.', 'deployment_evidence': 'The README mentions the ability to add tokens to token lists for PancakeSwap, which operates on BSC. The configuration files and scripts suggest that the project is set up to handle assets on BSC.', 'verification': 'There are no explicit verification files or addresses mentioned in the provided files, but the project includes validation scripts that check the integrity of asset files, which is a form of verification.', 'contract_addresses': [], 'token_names': []}"
CZ CASH,bnb-chain,https://github.com/chinese-zodiac,https://github.com/chinese-zodiac/brag-sc.git,TRUE,"The project is explicitly designed for deployment on the Binance Smart Chain (BSC). The presence of BSC-specific references, contract structures, and deployment scripts targeting BSC confirms this.","{'bnb_references': ['The deployment script uses the PancakeSwap router and factory addresses, which are specific to BSC.', 'The contract `BRAG` interacts with `CZUSD`, which is mentioned as a BEP20 stablecoin, indicating BSC compatibility.', 'The `hardhat.config.js` file includes a network configuration for BSC with a specific RPC URL.'], 'contract_structure': 'The repository contains multiple Solidity files defining smart contracts, including `BRAG`, `AutoRewardPool`, and `CZUSD`, which are structured correctly for deployment on Ethereum-compatible chains.', 'deployment_evidence': 'The `hardhat.config.js` file contains a network configuration for BSC, and the deployment script `scripts/deploy-brag.js` targets BSC-specific contracts and addresses.', 'verification': ""There are no explicit verification files mentioned, but the presence of the `etherscan` API key in the configuration suggests an intention to verify contracts on BSC's equivalent explorer."", 'contract_addresses': ['CZUSD: 0xE68b79e51bf826534Ff37AA9CeE71a3842ee9c70', 'PCS_FACTORY: 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73', 'PCS_ROUTER: 0x10ED43C718714eb63d5aA57B78B54704E256024E', 'BTCB: 0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c'], 'token_names': ['CZUSD', 'BRAG', 'BTCB']}"
CZ CASH,bnb-chain,https://github.com/chinese-zodiac,https://github.com/chinese-zodiac/ggems-sc.git,TRUE,"The project is explicitly deployed on the Binance Smart Chain (BSC), as indicated by the deployment address and the chain ID. The address format and the presence of BSC-specific references confirm this.","{'bnb_references': ['Deployed to: `bnb:0xd0d0b3a423f6c76648efcf6b4892ad60d2f2ef48`', 'Chain ID 56 corresponds to Binance Smart Chain.'], 'contract_structure': 'The repository contains valid Solidity smart contracts, deployment scripts, and testing files structured appropriately for a BSC deployment.', 'deployment_evidence': 'The deployment address `0xd0d0b3a423f6c76648efcf6b4892ad60d2f2ef48` is a valid Ethereum address format, and the transaction logs indicate successful deployment on the BSC.', 'verification': 'There are no explicit verification files mentioned, but the deployment scripts and transaction logs suggest that the contracts can be verified on BSC explorers.', 'contract_addresses': ['0xd0d0b3a423f6c76648efcf6b4892ad60d2f2ef48'], 'token_names': ['$Gems']}"
CZ CASH,bnb-chain,https://github.com/chinese-zodiac,https://github.com/chinese-zodiac/tcu29-sc.git,TRUE,"The project is explicitly deployed on the Binance Smart Chain (BSC) as indicated in the README.md file, which lists multiple contract addresses on the BSC network. The deployment script also specifies a BSC RPC URL, confirming that the deployment is intended for the BSC mainnet.","{'bnb_references': ['BSC:0x5b0B5c848a843c83c20dcfa25CDe6E122898a614', 'BSC:0xC324C1f146713b2d6ae6EcCa2DD4288c84D8018b', 'BSC:0x84ef66d363780c66FFFE91eD415c9247eD511383', '--rpc-url https://rpc.ankr.com/bsc'], 'contract_structure': 'The repository contains a well-structured set of Solidity files, deployment scripts, and test files. The Solidity files define various contracts, including TCu29Sale, TCu29PoolMaster, and others, while the deployment scripts are designed to deploy these contracts on the specified network.', 'deployment_evidence': 'The README.md file includes a deployment command that specifies the BSC RPC URL, indicating that the contracts are intended to be deployed on the Binance Smart Chain.', 'verification': 'There is no explicit mention of verification files or processes in the provided files, but the deployment command includes a verification flag.', 'contract_addresses': ['0x5b0B5c848a843c83c20dcfa25CDe6E122898a614', '0xC324C1f146713b2d6ae6EcCa2DD4288c84D8018b', '0x84ef66d363780c66FFFE91eD415c9247eD511383'], 'token_names': ['TCu29', 'CZUSD', 'USDT']}"
CZ CASH,bnb-chain,https://github.com/chinese-zodiac,https://github.com/chinese-zodiac/czusdgate-sc.git,TRUE,"The project is explicitly deployed on the Binance Smart Chain (BSC) as indicated in the README.md file. The deployment address is provided, and the deployment script is configured to interact with the BSC network.","{'bnb_references': ['BSC:0xe3CB4dB558fB7BaF59eC71F5B178be02726ab265', 'rpc-url https://rpc.ankr.com/bsc'], 'contract_structure': 'The repository contains valid Solidity smart contracts and deployment scripts, indicating a structured approach to contract development.', 'deployment_evidence': 'The README.md file contains a specific deployment address on BSC and a deployment script that targets the BSC network.', 'verification': 'The deployment script includes a verification step with an etherscan API key, suggesting that verification is intended for the deployed contract.', 'contract_addresses': ['0xe3CB4dB558fB7BaF59eC71F5B178be02726ab265'], 'token_names': ['CZUSD']}"
CZ CASH,bnb-chain,https://github.com/chinese-zodiac,https://github.com/chinese-zodiac/pawnshop-sc.git,TRUE,"The project is explicitly deployed on the Binance Smart Chain (BSC) as indicated in the README.md file. The deployment address is provided, and the deployment script uses a BSC RPC URL, confirming that the project is intended for the BSC network.","{'bnb_references': ['BSC:0x6AEEe36069b881B536cA7d9761353ec2c2405B03', 'https://rpc.ankr.com/bsc'], 'contract_structure': 'The repository contains Solidity files for smart contracts, deployment scripts, and testing files, indicating a well-structured project for smart contract development.', 'deployment_evidence': 'The deployment address 0x6AEEe36069b881B536cA7d9761353ec2c2405B03 is explicitly mentioned as being on BSC, and the deployment script uses the BSC RPC URL.', 'verification': ""The deployment script includes a verification command with an etherscan API key, suggesting that verification on BSC's block explorer is intended."", 'contract_addresses': ['0x6AEEe36069b881B536cA7d9761353ec2c2405B03'], 'token_names': ['TCu29']}"
CZ CASH,bnb-chain,https://github.com/chinese-zodiac,https://github.com/chinese-zodiac/TidalDex-sc.git,TRUE,"The project is explicitly deployed on both the BSC Testnet and BSC Mainnet, as detailed in the README.md file. The deployment addresses for various contracts are provided, confirming the deployment on the Binance Smart Chain.","{'bnb_references': ['BSC Testnet', 'BSC Mainnet', 'ChainId 56', '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c (WETH on BSC Mainnet)', '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd (WETH on BSC Testnet)'], 'contract_structure': 'The repository contains a well-structured set of Solidity files for smart contracts, deployment scripts, and interfaces. The contracts follow standard Solidity practices and include necessary imports and interfaces.', 'deployment_evidence': 'The README.md file lists specific contract addresses for both BSC Testnet and BSC Mainnet, indicating that the contracts have been deployed on these networks. The deployment addresses include the Factory, Router, FarmMaster, and others.', 'verification': 'There are no explicit verification files mentioned in the provided documentation, but the deployment addresses can be verified on BSC block explorers.', 'contract_addresses': ['0x907e8C7D471877b4742dA8aA53d257d0d565A47E (Factory)', '0x71aB950a0C349103967e711b931c460E9580c631 (Router)', '0x348CF34aCD0aB88c3364037486234AB6cbC31C4d (FarmMaster)', '0x60bC8b98cE4c252Bb75a391C63C46Db75e6b89B0 (AmmZapV1)', '0x7DB1c089074CCe43fAE87Fa28D1Fef79558918d2 (CL8Y Burn&LP)', '0xB7e8185Dd927FC6e721df666B6955Ea83DABC8D9 (Rescue LP Tool)', '0xc441D12e7Aa01DC0e8661f8a7daAE73337da16D3 (ChartBoost)', '0xD7f213cf9D017FF2D130a4B34630Dcb5b8D66d85 (ChartBoostV2)'], 'token_names': ['WETH', 'CZUSD', 'CZB', 'YTKN']}"
CZ CASH,bnb-chain,https://github.com/chinese-zodiac,https://github.com/chinese-zodiac/tidaldex-fe.git,TRUE,"The project is explicitly designed for deployment on the Binance Smart Chain (BSC), as evidenced by multiple references to BSC, contract addresses, and configurations targeting the BSC mainnet.","{'bnb_references': ['ChainId.MAINNET', ""ChainId.MAINNET: 'https://bsc-dataseed1.defibit.io'"", ""BASE_BSC_SCAN_URL: 'https://bscscan.com'"", ""BASE_BSC_SCAN_URLS: { [ChainId.MAINNET]: 'https://bscscan.com', [ChainId.TESTNET]: 'https://testnet.bscscan.com' }"", 'BSC_BLOCK_TIME = 3'], 'contract_structure': 'The repository contains TypeScript files that define smart contract interactions, token configurations, and farm setups, but does not include Solidity files or deployment scripts. The structure indicates a frontend application that interacts with deployed contracts on BSC.', 'deployment_evidence': 'The presence of contract addresses specifically for the BSC mainnet (ChainId 56) in the farms and pools configurations indicates that the project is set up for deployment on BSC.', 'verification': 'No explicit verification files or addresses were found in the repository. However, the project appears to be structured for interaction with verified contracts on BSC.', 'contract_addresses': ['0xD963b2236D227a0302E19F2f9595F424950dc186', '0x6e395da41cf9362d30461d49f23fe57849b18498', '0xCd83118db0BF08e70B08c78346FFd11FD6E7579A', '0x43f8250b66427fa439760ade4c65bb35228790e5'], 'token_names': ['CZB', 'CZUSD', 'WBNB', 'BUSD', 'USDT', 'BTC', 'ETH']}"
CZ CASH,bnb-chain,https://github.com/chinese-zodiac,https://github.com/chinese-zodiac/czodiac-utils-sc.git,TRUE,"The project is explicitly mentioned to be deployed on the BSC mainnet with a specific contract address provided in the README.md file. The contract structure follows standard Solidity practices, and there are deployment scripts targeting the BSC network. Additionally, the presence of references to BSC and the BNB token indicates a clear focus on the Binance Smart Chain ecosystem.","{'bnb_references': ['BSC MAINNET', 'Binance Smart Chain', 'BSC', 'BNB'], 'contract_structure': 'The repository contains Solidity files for smart contracts, deployment scripts, and testing files, indicating a well-structured project for Ethereum-compatible networks.', 'deployment_evidence': 'The README.md file lists a specific contract address (0x587bb405E571755d32AFC9396918FC4F49489482) deployed on the BSC mainnet, confirming deployment on Binance Smart Chain.', 'verification': 'There are no explicit verification files mentioned in the provided documentation, but the deployment script includes a verification step with Etherscan API, which is applicable for BSC.', 'contract_addresses': ['0x587bb405E571755d32AFC9396918FC4F49489482'], 'token_names': ['CZUSD']}"
CZ CASH,bnb-chain,https://github.com/chinese-zodiac,https://github.com/chinese-zodiac/dojak-sale-sc.git,TRUE,"The project is explicitly stated to be built on the Binance Smart Chain (BSC) network, with multiple references to BNB and BSC in the README.md file. The deployment instructions and contract addresses confirm that the project is intended for the BSC mainnet.","{'bnb_references': ['BSC network', 'BNB', 'BSC Mainnet'], 'contract_structure': 'The repository contains a well-structured Solidity smart contract, deployment scripts, and relevant libraries. The main contract is named DojakSale, and it includes various functionalities for token sales.', 'deployment_evidence': 'The README.md file includes a specific deployment address for the BSC Mainnet: `0x90e503b6AD934Af6452eB81B056bb1A2Ed003aD9`.', 'verification': 'The README.md mentions deployment instructions that include verification steps, indicating that the contract is intended to be verified on a blockchain explorer.', 'contract_addresses': ['0x90e503b6AD934Af6452eB81B056bb1A2Ed003aD9', '0xE68b79e51bf826534Ff37AA9CeE71a3842ee9c70 (CZUSD)', '0x55d398326f99059fF775485246999027B3197955 (USDT)', '0xD963b2236D227a0302E19F2f9595F424950dc186 (CZB)', '0x71aB950a0C349103967e711b931c460E9580c631 (AMM Router)'], 'token_names': ['CZUSD', 'USDT', 'CZB']}"
Reveel,bnb-chain,https://github.com/r3vl,https://github.com/r3vl/plugin-reveel-payid.git,TRUE,"The project shows strong indications of being deployed on the Binance Smart Chain (BSC). The code references BNB and BSC explicitly, and the structure supports interactions with BSC-compatible tokens and networks. Additionally, the project includes configurations and utilities that are typical for BSC deployments.","{'bnb_references': [""The token names include 'BNB' in the supported tokens list."", ""The supported networks include 'BNB' in the getSupportedNetworks function."", ""The chainsMapper object maps 'BNB' to chain ID 56.""], 'contract_structure': ""The project does not contain Solidity files or traditional smart contract structures, but it utilizes TypeScript for backend logic that interacts with blockchain networks, including BSC. The use of libraries like 'viem' indicates that it is designed to interact with Ethereum-compatible chains, including BSC."", 'deployment_evidence': ""The presence of a wallet client setup and transaction initialization functions suggests that the project is prepared for deployment on BSC. The 'sendTx' function is designed to handle transactions on various networks, including BSC."", 'verification': 'There are no explicit verification files or addresses mentioned in the provided code. However, the project does include functionality for interacting with PayID and transaction history, which implies that it may be verified through its API interactions.', 'contract_addresses': [], 'token_names': ['USDT', 'USDC', 'ETH', 'BNB', 'POL']}"
Reveel,bnb-chain,https://github.com/r3vl,https://github.com/r3vl/eliza-registry.git,TRUE,"The project includes explicit references to Binance Smart Chain (BSC) and BNB in the plugin registry, indicating that it supports BSC integrations. Additionally, there are plugins specifically designed for BSC, such as '@elizaos-plugins/plugin-binance' and '@elizaos-plugins/plugin-bnb'. The presence of these plugins suggests that the project is intended for deployment on the BSC network.","{'bnb_references': ['@elizaos-plugins/plugin-binance', '@elizaos-plugins/plugin-bnb'], 'contract_structure': 'The repository does not contain Solidity files or explicit deployment scripts, but it does reference a plugin architecture that could include smart contracts for various blockchains, including BSC.', 'deployment_evidence': 'The index.json file lists multiple plugins that are compatible with BSC, indicating that the project is designed to operate on the BSC mainnet.', 'verification': 'There are no explicit verification files or addresses provided in the repository, but the plugin architecture suggests that verification could be part of the plugin development process.', 'contract_addresses': [], 'token_names': []}"
SmolRefuel,bnb-chain,https://github.com/smolrefuel/,https://github.com/smolrefuel/contracts.git,TRUE,"The project is configured to deploy on multiple networks, including Binance Smart Chain (BSC). The hardhat configuration file explicitly includes BSC as one of the networks, and the deployment script is set up to deploy the contract on the specified network. Additionally, the presence of a contract that interacts with ERC20 tokens suggests compatibility with BSC's token standards.","{'bnb_references': [""The hardhat.config.ts file includes 'bsc' in the networks configuration."", 'The deployment script specifies a contract address that could be intended for BSC.'], 'contract_structure': 'The project contains valid Solidity smart contracts, deployment scripts, and testing files. The main contract, SmolRefuel, is structured correctly with necessary functions and modifiers.', 'deployment_evidence': ""The hardhat.config.ts file has a network configuration for 'bsc', indicating that the project can be deployed on the Binance Smart Chain. The deployment script (00_smolRefuel.ts) is set to deploy the SmolRefuel contract."", 'verification': 'There is a mention of etherscan verification in the README.md file, which suggests that the project intends to verify contracts on a blockchain explorer, likely including BSCScan for BSC deployments.', 'contract_addresses': ['0xC618990A58638B9aDBaCC2Dcd342b9AfDc5e8864 (used in deployment script)'], 'token_names': ['MockToken (ERC20 token used in tests)']}"
Avalon Finance,bnb-chain,https://github.com/avalonfinancexyz,https://github.com/avalonfinancexyz/avalon-governance-token.git,TRUE,"The project is explicitly configured for deployment on the Binance Smart Chain (BSC) as evidenced by multiple references in the configuration files, deployment scripts, and contract definitions. The presence of specific network configurations targeting BSC and the use of LayerZero's cross-chain capabilities further support this conclusion.","{'bnb_references': ['bsc_mainnetContract in layerzero.config.ts', 'bsc-mainnet in hardhat.config.ts', 'bsc_mainnet in the owner configuration file'], 'contract_structure': 'The repository contains a well-defined structure for Solidity smart contracts, including contracts for governance, mintable tokens, and adapters for cross-chain functionality. It also includes deployment scripts and configuration files for Hardhat.', 'deployment_evidence': ""The presence of deployment scripts specifically targeting BSC, such as 'bsc-mainnet' in hardhat.config.ts and deployment addresses in the deployments directory, confirms that the contracts are intended for deployment on the Binance Smart Chain."", 'verification': 'The repository includes tasks for verifying contracts on BSC, indicating a plan for post-deployment verification. However, specific verification addresses or statuses are not provided in the files.', 'contract_addresses': ['0x3228995749610Bea00b59C44F8d1df21C14027F1 (Avalon)', '0xcA9dE7BFD36eFB0458EA1d539F51B296B4FA2F1b (AvalonTimelock)', '0x4B9d58314AA14ada0B96714cc87486A7a17231D0 (DefaultProxyAdmin)'], 'token_names': ['Avalon', 'AvalonMintable']}"
